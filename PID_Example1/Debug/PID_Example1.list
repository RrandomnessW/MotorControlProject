
PID_Example1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ce4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08007e78  08007e78  00017e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082d0  080082d0  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080082d0  080082d0  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082d0  080082d0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082d0  080082d0  000182d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082d4  080082d4  000182d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080082d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b4c  20000090  08008368  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bdc  08008368  00020bdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109ec  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c0  00000000  00000000  00030aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00032c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  000339d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b42c  00000000  00000000  00034668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001001c  00000000  00000000  0004fa94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a44b6  00000000  00000000  0005fab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103f66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ef4  00000000  00000000  00103fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e5c 	.word	0x08007e5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08007e5c 	.word	0x08007e5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_d2f>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab4:	bf24      	itt	cs
 8000ab6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000abe:	d90d      	bls.n	8000adc <__aeabi_d2f+0x30>
 8000ac0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000acc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad4:	bf08      	it	eq
 8000ad6:	f020 0001 	biceq.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae0:	d121      	bne.n	8000b26 <__aeabi_d2f+0x7a>
 8000ae2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae6:	bfbc      	itt	lt
 8000ae8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	4770      	bxlt	lr
 8000aee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af6:	f1c2 0218 	rsb	r2, r2, #24
 8000afa:	f1c2 0c20 	rsb	ip, r2, #32
 8000afe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b02:	fa20 f002 	lsr.w	r0, r0, r2
 8000b06:	bf18      	it	ne
 8000b08:	f040 0001 	orrne.w	r0, r0, #1
 8000b0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b18:	ea40 000c 	orr.w	r0, r0, ip
 8000b1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b24:	e7cc      	b.n	8000ac0 <__aeabi_d2f+0x14>
 8000b26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2a:	d107      	bne.n	8000b3c <__aeabi_d2f+0x90>
 8000b2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b30:	bf1e      	ittt	ne
 8000b32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3a:	4770      	bxne	lr
 8000b3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	0000      	movs	r0, r0
	...

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b56:	f001 f827 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5a:	f000 f987 	bl	8000e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5e:	f000 fb75 	bl	800124c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b62:	f000 fb4d 	bl	8001200 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b66:	f000 fb1b 	bl	80011a0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b6a:	f000 f9d9 	bl	8000f20 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000b6e:	f000 fa2b 	bl	8000fc8 <MX_TIM6_Init>
  MX_TIM15_Init();
 8000b72:	f000 fa5f 	bl	8001034 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8000b76:	f000 fae3 	bl	8001140 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit (&huart1, message, strlen(message), 100 );
 8000b7a:	48a1      	ldr	r0, [pc, #644]	; (8000e00 <main+0x2b0>)
 8000b7c:	f7ff fb28 	bl	80001d0 <strlen>
 8000b80:	4603      	mov	r3, r0
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	2364      	movs	r3, #100	; 0x64
 8000b86:	499e      	ldr	r1, [pc, #632]	; (8000e00 <main+0x2b0>)
 8000b88:	489e      	ldr	r0, [pc, #632]	; (8000e04 <main+0x2b4>)
 8000b8a:	f004 fc3c 	bl	8005406 <HAL_UART_Transmit>

  __HAL_UART_ENABLE_IT( &huart1, UART_IT_IDLE );//enable idle interrupt
 8000b8e:	4b9d      	ldr	r3, [pc, #628]	; (8000e04 <main+0x2b4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b9b      	ldr	r3, [pc, #620]	; (8000e04 <main+0x2b4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f042 0210 	orr.w	r2, r2, #16
 8000b9c:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT( &hdma_usart1_rx, DMA_IT_TC);//enable DMA complete interrupt
 8000b9e:	4b9a      	ldr	r3, [pc, #616]	; (8000e08 <main+0x2b8>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b98      	ldr	r3, [pc, #608]	; (8000e08 <main+0x2b8>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f042 0202 	orr.w	r2, r2, #2
 8000bac:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT( &hdma_usart1_rx, DMA_IT_HT);//disable half transfer interrupt
 8000bae:	4b96      	ldr	r3, [pc, #600]	; (8000e08 <main+0x2b8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b94      	ldr	r3, [pc, #592]	; (8000e08 <main+0x2b8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f022 0204 	bic.w	r2, r2, #4
 8000bbc:	601a      	str	r2, [r3, #0]

  HAL_UART_Receive_DMA( &huart1, DMA_RX_Buffer, DMA_RX_BUFFER_SIZE );//enable uart1 DMA receiving
 8000bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bc2:	4992      	ldr	r1, [pc, #584]	; (8000e0c <main+0x2bc>)
 8000bc4:	488f      	ldr	r0, [pc, #572]	; (8000e04 <main+0x2b4>)
 8000bc6:	f004 fd29 	bl	800561c <HAL_UART_Receive_DMA>

  COM_Status = 0;
 8000bca:	4b91      	ldr	r3, [pc, #580]	; (8000e10 <main+0x2c0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]

  HAL_TIM_PWM_Start( &htim15, TIM_CHANNEL_1 );
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4890      	ldr	r0, [pc, #576]	; (8000e14 <main+0x2c4>)
 8000bd4:	f003 fa5a 	bl	800408c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start( &htim15, TIM_CHANNEL_1 );
 8000bd8:	2100      	movs	r1, #0
 8000bda:	488e      	ldr	r0, [pc, #568]	; (8000e14 <main+0x2c4>)
 8000bdc:	f004 fa06 	bl	8004fec <HAL_TIMEx_PWMN_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000be0:	213c      	movs	r1, #60	; 0x3c
 8000be2:	488d      	ldr	r0, [pc, #564]	; (8000e18 <main+0x2c8>)
 8000be4:	f003 fbde 	bl	80043a4 <HAL_TIM_Encoder_Start>
  TIM2->CNT = 32767; //encoder couter offset;
 8000be8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(&htim2);
 8000bf2:	4889      	ldr	r0, [pc, #548]	; (8000e18 <main+0x2c8>)
 8000bf4:	f003 f952 	bl	8003e9c <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2110      	movs	r1, #16
 8000bfc:	4887      	ldr	r0, [pc, #540]	; (8000e1c <main+0x2cc>)
 8000bfe:	f001 fcd7 	bl	80025b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2120      	movs	r1, #32
 8000c06:	4885      	ldr	r0, [pc, #532]	; (8000e1c <main+0x2cc>)
 8000c08:	f001 fcd2 	bl	80025b0 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim6);
 8000c0c:	4884      	ldr	r0, [pc, #528]	; (8000e20 <main+0x2d0>)
 8000c0e:	f003 f991 	bl	8003f34 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0); //set NVIC priority
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2036      	movs	r0, #54	; 0x36
 8000c18:	f001 f907 	bl	8001e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); //enable interrupt
 8000c1c:	2036      	movs	r0, #54	; 0x36
 8000c1e:	f001 f920 	bl	8001e62 <HAL_NVIC_EnableIRQ>

  //PID coefficients for motor controller STK681-332 Kp = 2.3, Ki = 0.3, Kd = 0.25
  vKp = 3.0;
 8000c22:	4b80      	ldr	r3, [pc, #512]	; (8000e24 <main+0x2d4>)
 8000c24:	4a80      	ldr	r2, [pc, #512]	; (8000e28 <main+0x2d8>)
 8000c26:	601a      	str	r2, [r3, #0]
  vKi = 0.3;
 8000c28:	4b80      	ldr	r3, [pc, #512]	; (8000e2c <main+0x2dc>)
 8000c2a:	4a81      	ldr	r2, [pc, #516]	; (8000e30 <main+0x2e0>)
 8000c2c:	601a      	str	r2, [r3, #0]
  vKd = 0.25;
 8000c2e:	4b81      	ldr	r3, [pc, #516]	; (8000e34 <main+0x2e4>)
 8000c30:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8000c34:	601a      	str	r2, [r3, #0]
  Speed_TIM6_Target = -13653/200;
 8000c36:	4b80      	ldr	r3, [pc, #512]	; (8000e38 <main+0x2e8>)
 8000c38:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8000c3c:	601a      	str	r2, [r3, #0]
  //40506 close to the max
  if(Speed_TIM6_Target < 0)
 8000c3e:	4b7e      	ldr	r3, [pc, #504]	; (8000e38 <main+0x2e8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	da03      	bge.n	8000c4e <main+0xfe>
  {
	  CCW = 1;
 8000c46:	4b7d      	ldr	r3, [pc, #500]	; (8000e3c <main+0x2ec>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	e002      	b.n	8000c54 <main+0x104>
  }
  else
  {
	  CCW = 0;
 8000c4e:	4b7b      	ldr	r3, [pc, #492]	; (8000e3c <main+0x2ec>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
  }

  for ( k = 0; k < NSAMP; k++ ) {
 8000c54:	4b7a      	ldr	r3, [pc, #488]	; (8000e40 <main+0x2f0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	801a      	strh	r2, [r3, #0]
 8000c5a:	e047      	b.n	8000cec <main+0x19c>
  	  value = (int16_t) rint((sinf( ( (2.0*PI)/NSAMP) * k)) * 3214.0 );
 8000c5c:	4b78      	ldr	r3, [pc, #480]	; (8000e40 <main+0x2f0>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fc5f 	bl	8000524 <__aeabi_i2d>
 8000c66:	a362      	add	r3, pc, #392	; (adr r3, 8000df0 <main+0x2a0>)
 8000c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6c:	f7ff fcc4 	bl	80005f8 <__aeabi_dmul>
 8000c70:	4602      	mov	r2, r0
 8000c72:	460b      	mov	r3, r1
 8000c74:	4610      	mov	r0, r2
 8000c76:	4619      	mov	r1, r3
 8000c78:	f7ff ff18 	bl	8000aac <__aeabi_d2f>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	ee00 3a10 	vmov	s0, r3
 8000c82:	f006 fb8f 	bl	80073a4 <sinf>
 8000c86:	ee10 3a10 	vmov	r3, s0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fc5c 	bl	8000548 <__aeabi_f2d>
 8000c90:	a359      	add	r3, pc, #356	; (adr r3, 8000df8 <main+0x2a8>)
 8000c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c96:	f7ff fcaf 	bl	80005f8 <__aeabi_dmul>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	ec43 2b17 	vmov	d7, r2, r3
 8000ca2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ca6:	eef0 0a67 	vmov.f32	s1, s15
 8000caa:	f006 faed 	bl	8007288 <rint>
 8000cae:	ec53 2b10 	vmov	r2, r3, d0
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f7ff feb1 	bl	8000a1c <__aeabi_d2iz>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	4b61      	ldr	r3, [pc, #388]	; (8000e44 <main+0x2f4>)
 8000cc0:	801a      	strh	r2, [r3, #0]
  	  SINE_PWM[k] = value < 3215 ? value : 3214;
 8000cc2:	4b60      	ldr	r3, [pc, #384]	; (8000e44 <main+0x2f4>)
 8000cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cc8:	4a5d      	ldr	r2, [pc, #372]	; (8000e40 <main+0x2f0>)
 8000cca:	8812      	ldrh	r2, [r2, #0]
 8000ccc:	4611      	mov	r1, r2
 8000cce:	f640 428e 	movw	r2, #3214	; 0xc8e
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	bfa8      	it	ge
 8000cd6:	4613      	movge	r3, r2
 8000cd8:	b21a      	sxth	r2, r3
 8000cda:	4b5b      	ldr	r3, [pc, #364]	; (8000e48 <main+0x2f8>)
 8000cdc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
  for ( k = 0; k < NSAMP; k++ ) {
 8000ce0:	4b57      	ldr	r3, [pc, #348]	; (8000e40 <main+0x2f0>)
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4b55      	ldr	r3, [pc, #340]	; (8000e40 <main+0x2f0>)
 8000cea:	801a      	strh	r2, [r3, #0]
 8000cec:	4b54      	ldr	r3, [pc, #336]	; (8000e40 <main+0x2f0>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000cf4:	d3b2      	bcc.n	8000c5c <main+0x10c>
  }
  //the max speed connected to the old motor controller is 202 cts
  //the max speed connected to the new motor controller is 178 cts
  for ( k = 0; k < NSAMP; k++ ) {
 8000cf6:	4b52      	ldr	r3, [pc, #328]	; (8000e40 <main+0x2f0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	801a      	strh	r2, [r3, #0]
 8000cfc:	e040      	b.n	8000d80 <main+0x230>
	  value = (int16_t) rint( ( sinf( ( (2.0*PI)/NSAMP) * k ) ) * 178 );
 8000cfe:	4b50      	ldr	r3, [pc, #320]	; (8000e40 <main+0x2f0>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fc0e 	bl	8000524 <__aeabi_i2d>
 8000d08:	a339      	add	r3, pc, #228	; (adr r3, 8000df0 <main+0x2a0>)
 8000d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0e:	f7ff fc73 	bl	80005f8 <__aeabi_dmul>
 8000d12:	4602      	mov	r2, r0
 8000d14:	460b      	mov	r3, r1
 8000d16:	4610      	mov	r0, r2
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f7ff fec7 	bl	8000aac <__aeabi_d2f>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	ee00 3a10 	vmov	s0, r3
 8000d24:	f006 fb3e 	bl	80073a4 <sinf>
 8000d28:	eef0 7a40 	vmov.f32	s15, s0
 8000d2c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000e4c <main+0x2fc>
 8000d30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d34:	ee17 0a90 	vmov	r0, s15
 8000d38:	f7ff fc06 	bl	8000548 <__aeabi_f2d>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	ec43 2b10 	vmov	d0, r2, r3
 8000d44:	f006 faa0 	bl	8007288 <rint>
 8000d48:	ec53 2b10 	vmov	r2, r3, d0
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f7ff fe64 	bl	8000a1c <__aeabi_d2iz>
 8000d54:	4603      	mov	r3, r0
 8000d56:	b21a      	sxth	r2, r3
 8000d58:	4b3a      	ldr	r3, [pc, #232]	; (8000e44 <main+0x2f4>)
 8000d5a:	801a      	strh	r2, [r3, #0]
	  SINE_RPM[k] = value < 208 ? value : 207;
 8000d5c:	4b39      	ldr	r3, [pc, #228]	; (8000e44 <main+0x2f4>)
 8000d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d62:	4a37      	ldr	r2, [pc, #220]	; (8000e40 <main+0x2f0>)
 8000d64:	8812      	ldrh	r2, [r2, #0]
 8000d66:	2bcf      	cmp	r3, #207	; 0xcf
 8000d68:	bfa8      	it	ge
 8000d6a:	23cf      	movge	r3, #207	; 0xcf
 8000d6c:	b219      	sxth	r1, r3
 8000d6e:	4b38      	ldr	r3, [pc, #224]	; (8000e50 <main+0x300>)
 8000d70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for ( k = 0; k < NSAMP; k++ ) {
 8000d74:	4b32      	ldr	r3, [pc, #200]	; (8000e40 <main+0x2f0>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <main+0x2f0>)
 8000d7e:	801a      	strh	r2, [r3, #0]
 8000d80:	4b2f      	ldr	r3, [pc, #188]	; (8000e40 <main+0x2f0>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000d88:	d3b9      	bcc.n	8000cfe <main+0x1ae>
  }
  int32_t speed = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(start)
 8000d8e:	4b31      	ldr	r3, [pc, #196]	; (8000e54 <main+0x304>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0fb      	beq.n	8000d8e <main+0x23e>
	  {
		  speed = (int32_t) ( Speed_TIM6_Measured * 200.0 * (60.0/5120.0) );//encoder counts to rpm
 8000d96:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <main+0x308>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fbc2 	bl	8000524 <__aeabi_i2d>
 8000da0:	f04f 0200 	mov.w	r2, #0
 8000da4:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <main+0x30c>)
 8000da6:	f7ff fc27 	bl	80005f8 <__aeabi_dmul>
 8000daa:	4602      	mov	r2, r0
 8000dac:	460b      	mov	r3, r1
 8000dae:	4610      	mov	r0, r2
 8000db0:	4619      	mov	r1, r3
 8000db2:	f04f 0200 	mov.w	r2, #0
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <main+0x310>)
 8000db8:	f7ff fc1e 	bl	80005f8 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f7ff fe2a 	bl	8000a1c <__aeabi_d2iz>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	607b      	str	r3, [r7, #4]
		  sprintf( msg, "%d\r\n", speed ); // msg will display speed measured in rpm
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	4925      	ldr	r1, [pc, #148]	; (8000e64 <main+0x314>)
 8000dd0:	4825      	ldr	r0, [pc, #148]	; (8000e68 <main+0x318>)
 8000dd2:	f005 fdeb 	bl	80069ac <siprintf>
		  //Transmit_DMA ( &huart1, (uint8_t*) msg, strlen(msg) );
		  //sprintf( msg, "%d\r\n", Err );
		  //sprintf( msg, "cts: %d\r\n", Speed_TIM6_Measured ); //msg will display speed measured in encoder counts.
		  Transmit_DMA ( &huart1, (uint8_t*) msg, strlen(msg) );
 8000dd6:	4824      	ldr	r0, [pc, #144]	; (8000e68 <main+0x318>)
 8000dd8:	f7ff f9fa 	bl	80001d0 <strlen>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	4921      	ldr	r1, [pc, #132]	; (8000e68 <main+0x318>)
 8000de2:	4808      	ldr	r0, [pc, #32]	; (8000e04 <main+0x2b4>)
 8000de4:	f000 faaa 	bl	800133c <Transmit_DMA>
		  //sprintf( msg, "pwm reg: %d\r\n", TIM15->CCR1);
		  //sprintf(msg, "Uk: %d\r\n", Uk);
		  //sprintf( msg, "Err: %d\r\n", Err );
		  //sprintf( msg, "Uk: %d\r\n", Uk);

		  start = 0;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <main+0x304>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
	  if(start)
 8000dee:	e7ce      	b.n	8000d8e <main+0x23e>
 8000df0:	91c8365d 	.word	0x91c8365d
 8000df4:	3f9015bf 	.word	0x3f9015bf
 8000df8:	00000000 	.word	0x00000000
 8000dfc:	40a91c00 	.word	0x40a91c00
 8000e00:	20000000 	.word	0x20000000
 8000e04:	20000190 	.word	0x20000190
 8000e08:	200002a0 	.word	0x200002a0
 8000e0c:	20000328 	.word	0x20000328
 8000e10:	2000052c 	.word	0x2000052c
 8000e14:	20000144 	.word	0x20000144
 8000e18:	200000ac 	.word	0x200000ac
 8000e1c:	48000400 	.word	0x48000400
 8000e20:	200000f8 	.word	0x200000f8
 8000e24:	20000554 	.word	0x20000554
 8000e28:	40400000 	.word	0x40400000
 8000e2c:	20000558 	.word	0x20000558
 8000e30:	3e99999a 	.word	0x3e99999a
 8000e34:	2000055c 	.word	0x2000055c
 8000e38:	20000534 	.word	0x20000534
 8000e3c:	20000578 	.word	0x20000578
 8000e40:	20000550 	.word	0x20000550
 8000e44:	2000089c 	.word	0x2000089c
 8000e48:	2000057c 	.word	0x2000057c
 8000e4c:	43320000 	.word	0x43320000
 8000e50:	200008a4 	.word	0x200008a4
 8000e54:	20000560 	.word	0x20000560
 8000e58:	20000530 	.word	0x20000530
 8000e5c:	40690000 	.word	0x40690000
 8000e60:	3f880000 	.word	0x3f880000
 8000e64:	08007e78 	.word	0x08007e78
 8000e68:	20000564 	.word	0x20000564

08000e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b09c      	sub	sp, #112	; 0x70
 8000e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e76:	2228      	movs	r2, #40	; 0x28
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f005 fd8e 	bl	800699c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e90:	463b      	mov	r3, r7
 8000e92:	2234      	movs	r2, #52	; 0x34
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f005 fd80 	bl	800699c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea4:	2310      	movs	r3, #16
 8000ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eac:	2300      	movs	r3, #0
 8000eae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000eb0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 fb90 	bl	80025e0 <HAL_RCC_OscConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000ec6:	f000 fb91 	bl	80015ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eca:	230f      	movs	r3, #15
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ee0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f002 fbb8 	bl	800365c <HAL_RCC_ClockConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000ef2:	f000 fb7b 	bl	80015ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM15;
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <SystemClock_Config+0xb0>)
 8000ef8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f02:	463b      	mov	r3, r7
 8000f04:	4618      	mov	r0, r3
 8000f06:	f002 fddf 	bl	8003ac8 <HAL_RCCEx_PeriphCLKConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000f10:	f000 fb6c 	bl	80015ec <Error_Handler>
  }
}
 8000f14:	bf00      	nop
 8000f16:	3770      	adds	r7, #112	; 0x70
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	00040001 	.word	0x00040001

08000f20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	; 0x30
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	2224      	movs	r2, #36	; 0x24
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f005 fd34 	bl	800699c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f34:	463b      	mov	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <MX_TIM2_Init+0xa4>)
 8000f40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f46:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <MX_TIM2_Init+0xa4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_TIM2_Init+0xa4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <MX_TIM2_Init+0xa4>)
 8000f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_TIM2_Init+0xa4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_TIM2_Init+0xa4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f66:	2303      	movs	r3, #3
 8000f68:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <MX_TIM2_Init+0xa4>)
 8000f92:	f003 f961 	bl	8004258 <HAL_TIM_Encoder_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000f9c:	f000 fb26 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_TIM2_Init+0xa4>)
 8000fae:	f004 f8bb 	bl	8005128 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000fb8:	f000 fb18 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	3730      	adds	r7, #48	; 0x30
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200000ac 	.word	0x200000ac

08000fc8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_TIM6_Init+0x64>)
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <MX_TIM6_Init+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <MX_TIM6_Init+0x64>)
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_TIM6_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <MX_TIM6_Init+0x64>)
 8000fec:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000ff0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_TIM6_Init+0x64>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <MX_TIM6_Init+0x64>)
 8000ffa:	f002 fef7 	bl	8003dec <HAL_TIM_Base_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001004:	f000 faf2 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_TIM6_Init+0x64>)
 8001016:	f004 f887 	bl	8005128 <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001020:	f000 fae4 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200000f8 	.word	0x200000f8
 8001030:	40001000 	.word	0x40001000

08001034 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b096      	sub	sp, #88	; 0x58
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001046:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	615a      	str	r2, [r3, #20]
 8001058:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	222c      	movs	r2, #44	; 0x2c
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f005 fc9b 	bl	800699c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001066:	4b34      	ldr	r3, [pc, #208]	; (8001138 <MX_TIM15_Init+0x104>)
 8001068:	4a34      	ldr	r2, [pc, #208]	; (800113c <MX_TIM15_Init+0x108>)
 800106a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800106c:	4b32      	ldr	r3, [pc, #200]	; (8001138 <MX_TIM15_Init+0x104>)
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001072:	4b31      	ldr	r3, [pc, #196]	; (8001138 <MX_TIM15_Init+0x104>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3214;
 8001078:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <MX_TIM15_Init+0x104>)
 800107a:	f640 428e 	movw	r2, #3214	; 0xc8e
 800107e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001080:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <MX_TIM15_Init+0x104>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001086:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <MX_TIM15_Init+0x104>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <MX_TIM15_Init+0x104>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001092:	4829      	ldr	r0, [pc, #164]	; (8001138 <MX_TIM15_Init+0x104>)
 8001094:	f002 ffa2 	bl	8003fdc <HAL_TIM_PWM_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800109e:	f000 faa5 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80010aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ae:	4619      	mov	r1, r3
 80010b0:	4821      	ldr	r0, [pc, #132]	; (8001138 <MX_TIM15_Init+0x104>)
 80010b2:	f004 f839 	bl	8005128 <HAL_TIMEx_MasterConfigSynchronization>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80010bc:	f000 fa96 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c0:	2360      	movs	r3, #96	; 0x60
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e0:	2200      	movs	r2, #0
 80010e2:	4619      	mov	r1, r3
 80010e4:	4814      	ldr	r0, [pc, #80]	; (8001138 <MX_TIM15_Init+0x104>)
 80010e6:	f003 fb0b 	bl	8004700 <HAL_TIM_PWM_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f000 fa7c 	bl	80015ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	4619      	mov	r1, r3
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <MX_TIM15_Init+0x104>)
 800111c:	f004 f86a 	bl	80051f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001126:	f000 fa61 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800112a:	4803      	ldr	r0, [pc, #12]	; (8001138 <MX_TIM15_Init+0x104>)
 800112c:	f000 fb0e 	bl	800174c <HAL_TIM_MspPostInit>

}
 8001130:	bf00      	nop
 8001132:	3758      	adds	r7, #88	; 0x58
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000144 	.word	0x20000144
 800113c:	40014000 	.word	0x40014000

08001140 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_USART1_UART_Init+0x58>)
 8001146:	4a15      	ldr	r2, [pc, #84]	; (800119c <MX_USART1_UART_Init+0x5c>)
 8001148:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <MX_USART1_UART_Init+0x58>)
 800114c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001150:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_USART1_UART_Init+0x58>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_USART1_UART_Init+0x58>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_USART1_UART_Init+0x58>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_USART1_UART_Init+0x58>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_USART1_UART_Init+0x58>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_USART1_UART_Init+0x58>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_USART1_UART_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_USART1_UART_Init+0x58>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_USART1_UART_Init+0x58>)
 8001184:	f004 f8f1 	bl	800536a <HAL_UART_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800118e:	f000 fa2d 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000190 	.word	0x20000190
 800119c:	40013800 	.word	0x40013800

080011a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011a6:	4a15      	ldr	r2, [pc, #84]	; (80011fc <MX_USART2_UART_Init+0x5c>)
 80011a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011ac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80011b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011c6:	220c      	movs	r2, #12
 80011c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011e4:	f004 f8c1 	bl	800536a <HAL_UART_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011ee:	f000 f9fd 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000218 	.word	0x20000218
 80011fc:	40004400 	.word	0x40004400

08001200 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_DMA_Init+0x48>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	4a0f      	ldr	r2, [pc, #60]	; (8001248 <MX_DMA_Init+0x48>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6153      	str	r3, [r2, #20]
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <MX_DMA_Init+0x48>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	200e      	movs	r0, #14
 8001224:	f000 fe01 	bl	8001e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001228:	200e      	movs	r0, #14
 800122a:	f000 fe1a 	bl	8001e62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	200f      	movs	r0, #15
 8001234:	f000 fdf9 	bl	8001e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001238:	200f      	movs	r0, #15
 800123a:	f000 fe12 	bl	8001e62 <HAL_NVIC_EnableIRQ>

}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000

0800124c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <MX_GPIO_Init+0xc4>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	4a2a      	ldr	r2, [pc, #168]	; (8001310 <MX_GPIO_Init+0xc4>)
 8001268:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800126c:	6153      	str	r3, [r2, #20]
 800126e:	4b28      	ldr	r3, [pc, #160]	; (8001310 <MX_GPIO_Init+0xc4>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800127a:	4b25      	ldr	r3, [pc, #148]	; (8001310 <MX_GPIO_Init+0xc4>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	4a24      	ldr	r2, [pc, #144]	; (8001310 <MX_GPIO_Init+0xc4>)
 8001280:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001284:	6153      	str	r3, [r2, #20]
 8001286:	4b22      	ldr	r3, [pc, #136]	; (8001310 <MX_GPIO_Init+0xc4>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <MX_GPIO_Init+0xc4>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	4a1e      	ldr	r2, [pc, #120]	; (8001310 <MX_GPIO_Init+0xc4>)
 8001298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800129c:	6153      	str	r3, [r2, #20]
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_GPIO_Init+0xc4>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_GPIO_Init+0xc4>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	4a18      	ldr	r2, [pc, #96]	; (8001310 <MX_GPIO_Init+0xc4>)
 80012b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b4:	6153      	str	r3, [r2, #20]
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <MX_GPIO_Init+0xc4>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	f242 0130 	movw	r1, #8240	; 0x2030
 80012c8:	4812      	ldr	r0, [pc, #72]	; (8001314 <MX_GPIO_Init+0xc8>)
 80012ca:	f001 f971 	bl	80025b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <MX_GPIO_Init+0xcc>)
 80012e6:	f000 fff1 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|IN1_Pin|IN2_Pin;
 80012ea:	f242 0330 	movw	r3, #8240	; 0x2030
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_GPIO_Init+0xc8>)
 8001304:	f000 ffe2 	bl	80022cc <HAL_GPIO_Init>

}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	; 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000
 8001314:	48000400 	.word	0x48000400
 8001318:	48000800 	.word	0x48000800

0800131c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback( UART_HandleTypeDef *UartHandle )
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit (&huart1, "WHAT\r\n", 5, 100 );
	uartTxDone = 1; //signal that Transfer is cplt
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <HAL_UART_TxCpltCallback+0x1c>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]

}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	2000052d 	.word	0x2000052d

0800133c <Transmit_DMA>:

void Transmit_DMA(UART_HandleTypeDef *UartHandle, uint8_t* aTxBuffer, uint16_t TXBUFFERSIZE)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	4613      	mov	r3, r2
 8001348:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef sts;

	uartTxDone = 0;
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <Transmit_DMA+0x44>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
	sts = HAL_UART_Transmit_DMA(UartHandle, (uint8_t*)aTxBuffer, TXBUFFERSIZE);
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	461a      	mov	r2, r3
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f004 f8e0 	bl	800551c <HAL_UART_Transmit_DMA>
 800135c:	4603      	mov	r3, r0
 800135e:	75fb      	strb	r3, [r7, #23]

	if( sts != HAL_OK)
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <Transmit_DMA+0x30>
	{
		Error_Handler();
 8001366:	f000 f941 	bl	80015ec <Error_Handler>
		//wait for uart transfer to be complete
		while (uartTxDone == 0)
		{
		}
	}
}
 800136a:	e005      	b.n	8001378 <Transmit_DMA+0x3c>
		while (uartTxDone == 0)
 800136c:	bf00      	nop
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <Transmit_DMA+0x44>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0fa      	beq.n	800136e <Transmit_DMA+0x32>
}
 8001378:	bf00      	nop
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	2000052d 	.word	0x2000052d
 8001384:	00000000 	.word	0x00000000

08001388 <HAL_TIM_PeriodElapsedCallback>:

HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8001388:	b5b0      	push	{r4, r5, r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	if( htim -> Instance == TIM6 )
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a80      	ldr	r2, [pc, #512]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001396:	4293      	cmp	r3, r2
 8001398:	f040 80f4 	bne.w	8001584 <HAL_TIM_PeriodElapsedCallback+0x1fc>
		 add PID, target speed, and PWM to the motor later.

		 Keep the speed here in cts/0.005seconds
		 * */

		EncVal = TIM2->CNT;
 800139c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4b7d      	ldr	r3, [pc, #500]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x214>)
 80013a6:	801a      	strh	r2, [r3, #0]
		TIM2->CNT = 32767;
 80013a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24

		Speed_TIM6_Measured = (int32_t)( (EncVal - 32767) );
 80013b2:	4b7a      	ldr	r3, [pc, #488]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x214>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 80013ba:	3b7f      	subs	r3, #127	; 0x7f
 80013bc:	4a78      	ldr	r2, [pc, #480]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80013be:	6013      	str	r3, [r2, #0]
		Err = Speed_TIM6_Target - Speed_TIM6_Measured;
 80013c0:	4b78      	ldr	r3, [pc, #480]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b76      	ldr	r3, [pc, #472]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	4a77      	ldr	r2, [pc, #476]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80013cc:	6013      	str	r3, [r2, #0]
		start = 1;
 80013ce:	4b77      	ldr	r3, [pc, #476]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x224>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]

		dU = vKp * (Err - Err_1) + (vKi * Err) + ( vKd * ( Err - 2*Err_1 + Err_2 ) );
 80013d4:	4b74      	ldr	r3, [pc, #464]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b75      	ldr	r3, [pc, #468]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	ee07 3a90 	vmov	s15, r3
 80013e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e6:	4b73      	ldr	r3, [pc, #460]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013f0:	4b6d      	ldr	r3, [pc, #436]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	ee07 3a90 	vmov	s15, r3
 80013f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013fc:	4b6e      	ldr	r3, [pc, #440]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001406:	ee37 7a27 	vadd.f32	s14, s14, s15
 800140a:	4b67      	ldr	r3, [pc, #412]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	1ad2      	subs	r2, r2, r3
 8001416:	4b69      	ldr	r3, [pc, #420]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4413      	add	r3, r2
 800141c:	ee07 3a90 	vmov	s15, r3
 8001420:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001424:	4b66      	ldr	r3, [pc, #408]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001436:	ee17 2a90 	vmov	r2, s15
 800143a:	4b62      	ldr	r3, [pc, #392]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800143c:	601a      	str	r2, [r3, #0]
		Uk = Uk_1 + dU;
 800143e:	4b62      	ldr	r3, [pc, #392]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4b60      	ldr	r3, [pc, #384]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a60      	ldr	r2, [pc, #384]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x244>)
 800144a:	6013      	str	r3, [r2, #0]
		Uk_1 = Uk;
 800144c:	4b5f      	ldr	r3, [pc, #380]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x244>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a5d      	ldr	r2, [pc, #372]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001452:	6013      	str	r3, [r2, #0]
		Err_2 = Err_1;
 8001454:	4b56      	ldr	r3, [pc, #344]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a58      	ldr	r2, [pc, #352]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x234>)
 800145a:	6013      	str	r3, [r2, #0]
		Err_1 = Err;
 800145c:	4b52      	ldr	r3, [pc, #328]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a53      	ldr	r2, [pc, #332]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001462:	6013      	str	r3, [r2, #0]


		if( CCW )
 8001464:	4b5a      	ldr	r3, [pc, #360]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d029      	beq.n	80014c0 <HAL_TIM_PeriodElapsedCallback+0x138>
		{
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	2110      	movs	r1, #16
 8001470:	4858      	ldr	r0, [pc, #352]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001472:	f001 f89d 	bl	80025b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	2120      	movs	r1, #32
 800147a:	4856      	ldr	r0, [pc, #344]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800147c:	f001 f898 	bl	80025b0 <HAL_GPIO_WritePin>
			TIM15 -> CCR1 = (uint32_t) ( -1.0 * (Uk/204.0) * 3214.0 );
 8001480:	4b52      	ldr	r3, [pc, #328]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f84d 	bl	8000524 <__aeabi_i2d>
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b52      	ldr	r3, [pc, #328]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001490:	f7ff f9dc 	bl	800084c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4614      	mov	r4, r2
 800149a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800149e:	a33c      	add	r3, pc, #240	; (adr r3, 8001590 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	4620      	mov	r0, r4
 80014a6:	4629      	mov	r1, r5
 80014a8:	f7ff f8a6 	bl	80005f8 <__aeabi_dmul>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4c4a      	ldr	r4, [pc, #296]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x254>)
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f7ff fad9 	bl	8000a6c <__aeabi_d2uiz>
 80014ba:	4603      	mov	r3, r0
 80014bc:	6363      	str	r3, [r4, #52]	; 0x34
 80014be:	e025      	b.n	800150c <HAL_TIM_PeriodElapsedCallback+0x184>
		}
		else
		{
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2110      	movs	r1, #16
 80014c4:	4843      	ldr	r0, [pc, #268]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80014c6:	f001 f873 	bl	80025b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2120      	movs	r1, #32
 80014ce:	4841      	ldr	r0, [pc, #260]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80014d0:	f001 f86e 	bl	80025b0 <HAL_GPIO_WritePin>
			TIM15 -> CCR1 = (uint32_t) ( (Uk/204.0) * 3214.0 );
 80014d4:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x244>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f823 	bl	8000524 <__aeabi_i2d>
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80014e4:	f7ff f9b2 	bl	800084c <__aeabi_ddiv>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	a327      	add	r3, pc, #156	; (adr r3, 8001590 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f87f 	bl	80005f8 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4c37      	ldr	r4, [pc, #220]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff fab2 	bl	8000a6c <__aeabi_d2uiz>
 8001508:	4603      	mov	r3, r0
 800150a:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
			TIM15 -> CCR1 = (uint32_t) ( SINE_PWM[sin_i] );
		}*/

		Speed_TIM6_Target = SINE_RPM[sin_i];
 800150c:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800150e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001512:	461a      	mov	r2, r3
 8001514:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001516:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800151a:	461a      	mov	r2, r3
 800151c:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800151e:	601a      	str	r2, [r3, #0]
		if( Speed_TIM6_Target < 0 )
 8001520:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	da03      	bge.n	8001530 <HAL_TIM_PeriodElapsedCallback+0x1a8>
		{
			CCW = 1;
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	e002      	b.n	8001536 <HAL_TIM_PeriodElapsedCallback+0x1ae>
		}
		else
		{
			CCW = 0;
 8001530:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
		}

		if( sin_i >= 399 )
 8001536:	4b2a      	ldr	r3, [pc, #168]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153c:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 8001540:	dd02      	ble.n	8001548 <HAL_TIM_PeriodElapsedCallback+0x1c0>
			sin_i = 0;
 8001542:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001544:	2200      	movs	r2, #0
 8001546:	801a      	strh	r2, [r3, #0]
		if( delay < 10 )
 8001548:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800154a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154e:	2b09      	cmp	r3, #9
 8001550:	dc09      	bgt.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x1de>
		{
			delay++;
 8001552:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001558:	b29b      	uxth	r3, r3
 800155a:	3301      	adds	r3, #1
 800155c:	b29b      	uxth	r3, r3
 800155e:	b21a      	sxth	r2, r3
 8001560:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001562:	801a      	strh	r2, [r3, #0]
			sin_i++;
			delay = 0;
		}

	}
}
 8001564:	e00e      	b.n	8001584 <HAL_TIM_PeriodElapsedCallback+0x1fc>
			start = 1;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
			sin_i++;
 800156c:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800156e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001572:	b29b      	uxth	r3, r3
 8001574:	3301      	adds	r3, #1
 8001576:	b29b      	uxth	r3, r3
 8001578:	b21a      	sxth	r2, r3
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800157c:	801a      	strh	r2, [r3, #0]
			delay = 0;
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001580:	2200      	movs	r2, #0
 8001582:	801a      	strh	r2, [r3, #0]
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bdb0      	pop	{r4, r5, r7, pc}
 800158c:	f3af 8000 	nop.w
 8001590:	00000000 	.word	0x00000000
 8001594:	40a91c00 	.word	0x40a91c00
 8001598:	40001000 	.word	0x40001000
 800159c:	2000052e 	.word	0x2000052e
 80015a0:	20000530 	.word	0x20000530
 80015a4:	20000534 	.word	0x20000534
 80015a8:	20000538 	.word	0x20000538
 80015ac:	20000560 	.word	0x20000560
 80015b0:	2000053c 	.word	0x2000053c
 80015b4:	20000554 	.word	0x20000554
 80015b8:	20000558 	.word	0x20000558
 80015bc:	20000540 	.word	0x20000540
 80015c0:	2000055c 	.word	0x2000055c
 80015c4:	2000054c 	.word	0x2000054c
 80015c8:	20000548 	.word	0x20000548
 80015cc:	20000544 	.word	0x20000544
 80015d0:	20000578 	.word	0x20000578
 80015d4:	48000400 	.word	0x48000400
 80015d8:	40698000 	.word	0x40698000
 80015dc:	40014000 	.word	0x40014000
 80015e0:	2000089e 	.word	0x2000089e
 80015e4:	200008a4 	.word	0x200008a4
 80015e8:	200008a0 	.word	0x200008a0

080015ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f0:	b672      	cpsid	i
}
 80015f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <Error_Handler+0x8>
	...

080015f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_MspInit+0x44>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <HAL_MspInit+0x44>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6193      	str	r3, [r2, #24]
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_MspInit+0x44>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_MspInit+0x44>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_MspInit+0x44>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	61d3      	str	r3, [r2, #28]
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_MspInit+0x44>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800162e:	2007      	movs	r0, #7
 8001630:	f000 fbf0 	bl	8001e14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021000 	.word	0x40021000

08001640 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001660:	d128      	bne.n	80016b4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001662:	4b16      	ldr	r3, [pc, #88]	; (80016bc <HAL_TIM_Encoder_MspInit+0x7c>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	4a15      	ldr	r2, [pc, #84]	; (80016bc <HAL_TIM_Encoder_MspInit+0x7c>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	61d3      	str	r3, [r2, #28]
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <HAL_TIM_Encoder_MspInit+0x7c>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_TIM_Encoder_MspInit+0x7c>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <HAL_TIM_Encoder_MspInit+0x7c>)
 8001680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001684:	6153      	str	r3, [r2, #20]
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <HAL_TIM_Encoder_MspInit+0x7c>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001692:	2303      	movs	r3, #3
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016a2:	2301      	movs	r3, #1
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b0:	f000 fe0c 	bl	80022cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	; 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000

080016c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <HAL_TIM_Base_MspInit+0x44>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d113      	bne.n	80016fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HAL_TIM_Base_MspInit+0x48>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a0c      	ldr	r2, [pc, #48]	; (8001708 <HAL_TIM_Base_MspInit+0x48>)
 80016d8:	f043 0310 	orr.w	r3, r3, #16
 80016dc:	61d3      	str	r3, [r2, #28]
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_TIM_Base_MspInit+0x48>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	2036      	movs	r0, #54	; 0x36
 80016f0:	f000 fb9b 	bl	8001e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016f4:	2036      	movs	r0, #54	; 0x36
 80016f6:	f000 fbb4 	bl	8001e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40001000 	.word	0x40001000
 8001708:	40021000 	.word	0x40021000

0800170c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <HAL_TIM_PWM_MspInit+0x38>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d10b      	bne.n	8001736 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_TIM_PWM_MspInit+0x3c>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	4a09      	ldr	r2, [pc, #36]	; (8001748 <HAL_TIM_PWM_MspInit+0x3c>)
 8001724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001728:	6193      	str	r3, [r2, #24]
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <HAL_TIM_PWM_MspInit+0x3c>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40014000 	.word	0x40014000
 8001748:	40021000 	.word	0x40021000

0800174c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <HAL_TIM_MspPostInit+0x64>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d11c      	bne.n	80017a8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_TIM_MspPostInit+0x68>)
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <HAL_TIM_MspPostInit+0x68>)
 8001774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001778:	6153      	str	r3, [r2, #20]
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <HAL_TIM_MspPostInit+0x68>)
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001786:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800178a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001798:	2301      	movs	r3, #1
 800179a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	4619      	mov	r1, r3
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <HAL_TIM_MspPostInit+0x6c>)
 80017a4:	f000 fd92 	bl	80022cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80017a8:	bf00      	nop
 80017aa:	3720      	adds	r7, #32
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40014000 	.word	0x40014000
 80017b4:	40021000 	.word	0x40021000
 80017b8:	48000400 	.word	0x48000400

080017bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08c      	sub	sp, #48	; 0x30
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a58      	ldr	r2, [pc, #352]	; (800193c <HAL_UART_MspInit+0x180>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d17c      	bne.n	80018d8 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017de:	4b58      	ldr	r3, [pc, #352]	; (8001940 <HAL_UART_MspInit+0x184>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	4a57      	ldr	r2, [pc, #348]	; (8001940 <HAL_UART_MspInit+0x184>)
 80017e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e8:	6193      	str	r3, [r2, #24]
 80017ea:	4b55      	ldr	r3, [pc, #340]	; (8001940 <HAL_UART_MspInit+0x184>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f2:	61bb      	str	r3, [r7, #24]
 80017f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	4b52      	ldr	r3, [pc, #328]	; (8001940 <HAL_UART_MspInit+0x184>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	4a51      	ldr	r2, [pc, #324]	; (8001940 <HAL_UART_MspInit+0x184>)
 80017fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001800:	6153      	str	r3, [r2, #20]
 8001802:	4b4f      	ldr	r3, [pc, #316]	; (8001940 <HAL_UART_MspInit+0x184>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800180e:	2330      	movs	r3, #48	; 0x30
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800181e:	2307      	movs	r3, #7
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	4619      	mov	r1, r3
 8001828:	4846      	ldr	r0, [pc, #280]	; (8001944 <HAL_UART_MspInit+0x188>)
 800182a:	f000 fd4f 	bl	80022cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800182e:	4b46      	ldr	r3, [pc, #280]	; (8001948 <HAL_UART_MspInit+0x18c>)
 8001830:	4a46      	ldr	r2, [pc, #280]	; (800194c <HAL_UART_MspInit+0x190>)
 8001832:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001834:	4b44      	ldr	r3, [pc, #272]	; (8001948 <HAL_UART_MspInit+0x18c>)
 8001836:	2200      	movs	r2, #0
 8001838:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800183a:	4b43      	ldr	r3, [pc, #268]	; (8001948 <HAL_UART_MspInit+0x18c>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001840:	4b41      	ldr	r3, [pc, #260]	; (8001948 <HAL_UART_MspInit+0x18c>)
 8001842:	2280      	movs	r2, #128	; 0x80
 8001844:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001846:	4b40      	ldr	r3, [pc, #256]	; (8001948 <HAL_UART_MspInit+0x18c>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800184c:	4b3e      	ldr	r3, [pc, #248]	; (8001948 <HAL_UART_MspInit+0x18c>)
 800184e:	2200      	movs	r2, #0
 8001850:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001852:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <HAL_UART_MspInit+0x18c>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001858:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <HAL_UART_MspInit+0x18c>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800185e:	483a      	ldr	r0, [pc, #232]	; (8001948 <HAL_UART_MspInit+0x18c>)
 8001860:	f000 fb19 	bl	8001e96 <HAL_DMA_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 800186a:	f7ff febf 	bl	80015ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a35      	ldr	r2, [pc, #212]	; (8001948 <HAL_UART_MspInit+0x18c>)
 8001872:	675a      	str	r2, [r3, #116]	; 0x74
 8001874:	4a34      	ldr	r2, [pc, #208]	; (8001948 <HAL_UART_MspInit+0x18c>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800187a:	4b35      	ldr	r3, [pc, #212]	; (8001950 <HAL_UART_MspInit+0x194>)
 800187c:	4a35      	ldr	r2, [pc, #212]	; (8001954 <HAL_UART_MspInit+0x198>)
 800187e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001880:	4b33      	ldr	r3, [pc, #204]	; (8001950 <HAL_UART_MspInit+0x194>)
 8001882:	2210      	movs	r2, #16
 8001884:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001886:	4b32      	ldr	r3, [pc, #200]	; (8001950 <HAL_UART_MspInit+0x194>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800188c:	4b30      	ldr	r3, [pc, #192]	; (8001950 <HAL_UART_MspInit+0x194>)
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001892:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <HAL_UART_MspInit+0x194>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001898:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <HAL_UART_MspInit+0x194>)
 800189a:	2200      	movs	r2, #0
 800189c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800189e:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <HAL_UART_MspInit+0x194>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018a4:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <HAL_UART_MspInit+0x194>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80018aa:	4829      	ldr	r0, [pc, #164]	; (8001950 <HAL_UART_MspInit+0x194>)
 80018ac:	f000 faf3 	bl	8001e96 <HAL_DMA_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 80018b6:	f7ff fe99 	bl	80015ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a24      	ldr	r2, [pc, #144]	; (8001950 <HAL_UART_MspInit+0x194>)
 80018be:	671a      	str	r2, [r3, #112]	; 0x70
 80018c0:	4a23      	ldr	r2, [pc, #140]	; (8001950 <HAL_UART_MspInit+0x194>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2025      	movs	r0, #37	; 0x25
 80018cc:	f000 faad 	bl	8001e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018d0:	2025      	movs	r0, #37	; 0x25
 80018d2:	f000 fac6 	bl	8001e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018d6:	e02d      	b.n	8001934 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a1e      	ldr	r2, [pc, #120]	; (8001958 <HAL_UART_MspInit+0x19c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d128      	bne.n	8001934 <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018e2:	4b17      	ldr	r3, [pc, #92]	; (8001940 <HAL_UART_MspInit+0x184>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	4a16      	ldr	r2, [pc, #88]	; (8001940 <HAL_UART_MspInit+0x184>)
 80018e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ec:	61d3      	str	r3, [r2, #28]
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <HAL_UART_MspInit+0x184>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <HAL_UART_MspInit+0x184>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	4a10      	ldr	r2, [pc, #64]	; (8001940 <HAL_UART_MspInit+0x184>)
 8001900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001904:	6153      	str	r3, [r2, #20]
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_UART_MspInit+0x184>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001912:	230c      	movs	r3, #12
 8001914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001922:	2307      	movs	r3, #7
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	4619      	mov	r1, r3
 800192c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001930:	f000 fccc 	bl	80022cc <HAL_GPIO_Init>
}
 8001934:	bf00      	nop
 8001936:	3730      	adds	r7, #48	; 0x30
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40013800 	.word	0x40013800
 8001940:	40021000 	.word	0x40021000
 8001944:	48000800 	.word	0x48000800
 8001948:	200002a0 	.word	0x200002a0
 800194c:	40020058 	.word	0x40020058
 8001950:	200002e4 	.word	0x200002e4
 8001954:	40020044 	.word	0x40020044
 8001958:	40004400 	.word	0x40004400

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <NMI_Handler+0x4>

08001962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <HardFault_Handler+0x4>

08001968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <MemManage_Handler+0x4>

0800196e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <BusFault_Handler+0x4>

08001974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <UsageFault_Handler+0x4>

0800197a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a8:	f000 f944 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <DMA1_Channel4_IRQHandler+0x10>)
 80019b6:	f000 fb8b 	bl	80020d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200002e4 	.word	0x200002e4

080019c4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <DMA1_Channel5_IRQHandler+0x10>)
 80019ca:	f000 fb81 	bl	80020d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200002a0 	.word	0x200002a0

080019d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019dc:	4803      	ldr	r0, [pc, #12]	; (80019ec <USART1_IRQHandler+0x14>)
 80019de:	f003 fef3 	bl	80057c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 80019e2:	4802      	ldr	r0, [pc, #8]	; (80019ec <USART1_IRQHandler+0x14>)
 80019e4:	f000 f80e 	bl	8001a04 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000190 	.word	0x20000190

080019f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <TIM6_DAC_IRQHandler+0x10>)
 80019f6:	f002 fd63 	bl	80044c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200000f8 	.word	0x200000f8

08001a04 <USER_UART_IRQHandler>:

/* USER CODE BEGIN 1 */
void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <USER_UART_IRQHandler+0x38>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d10d      	bne.n	8001a32 <USER_UART_IRQHandler+0x2e>
	{
		if(__HAL_UART_GET_FLAG( &huart1, UART_FLAG_IDLE ) != RESET) //whenever the USART Rx idles
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <USER_UART_IRQHandler+0x3c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	f003 0310 	and.w	r3, r3, #16
 8001a20:	2b10      	cmp	r3, #16
 8001a22:	d106      	bne.n	8001a32 <USER_UART_IRQHandler+0x2e>
		{
			__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <USER_UART_IRQHandler+0x3c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2210      	movs	r2, #16
 8001a2a:	621a      	str	r2, [r3, #32]
			USER_UART_IDLECallback(&huart1);
 8001a2c:	4804      	ldr	r0, [pc, #16]	; (8001a40 <USER_UART_IRQHandler+0x3c>)
 8001a2e:	f000 f809 	bl	8001a44 <USER_UART_IDLECallback>
		}
	}
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40013800 	.word	0x40013800
 8001a40:	20000190 	.word	0x20000190

08001a44 <USER_UART_IDLECallback>:

void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(&huart1);
 8001a4c:	4816      	ldr	r0, [pc, #88]	; (8001aa8 <USER_UART_IDLECallback+0x64>)
 8001a4e:	f003 fe29 	bl	80056a4 <HAL_UART_DMAStop>
	//calculate the length of the received data(number of bytes/characters/numbers received)
	counter = __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <USER_UART_IDLECallback+0x68>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <USER_UART_IDLECallback+0x6c>)
 8001a5c:	801a      	strh	r2, [r3, #0]
	Rx_Counter = DMA_RX_BUFFER_SIZE - counter;
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <USER_UART_IDLECallback+0x6c>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <USER_UART_IDLECallback+0x70>)
 8001a6a:	801a      	strh	r2, [r3, #0]

	//transfer data from DMA buffer to data_buffer
	for( uint16_t i = 0; i < Rx_Counter; ++i )
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	81fb      	strh	r3, [r7, #14]
 8001a70:	e008      	b.n	8001a84 <USER_UART_IDLECallback+0x40>
	{
		Data_Buffer[i] = DMA_RX_Buffer[i];
 8001a72:	89fa      	ldrh	r2, [r7, #14]
 8001a74:	89fb      	ldrh	r3, [r7, #14]
 8001a76:	4910      	ldr	r1, [pc, #64]	; (8001ab8 <USER_UART_IDLECallback+0x74>)
 8001a78:	5c89      	ldrb	r1, [r1, r2]
 8001a7a:	4a10      	ldr	r2, [pc, #64]	; (8001abc <USER_UART_IDLECallback+0x78>)
 8001a7c:	54d1      	strb	r1, [r2, r3]
	for( uint16_t i = 0; i < Rx_Counter; ++i )
 8001a7e:	89fb      	ldrh	r3, [r7, #14]
 8001a80:	3301      	adds	r3, #1
 8001a82:	81fb      	strh	r3, [r7, #14]
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <USER_UART_IDLECallback+0x70>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	89fa      	ldrh	r2, [r7, #14]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d3f1      	bcc.n	8001a72 <USER_UART_IDLECallback+0x2e>
	}

	COM_Status = 1;
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <USER_UART_IDLECallback+0x7c>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
	//re-enable DMA interrupt and receiving
	HAL_UART_Receive_DMA( &huart1, DMA_RX_Buffer, DMA_RX_BUFFER_SIZE );
 8001a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a98:	4907      	ldr	r1, [pc, #28]	; (8001ab8 <USER_UART_IDLECallback+0x74>)
 8001a9a:	4803      	ldr	r0, [pc, #12]	; (8001aa8 <USER_UART_IDLECallback+0x64>)
 8001a9c:	f003 fdbe 	bl	800561c <HAL_UART_Receive_DMA>
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000190 	.word	0x20000190
 8001aac:	200002a0 	.word	0x200002a0
 8001ab0:	20000528 	.word	0x20000528
 8001ab4:	2000052a 	.word	0x2000052a
 8001ab8:	20000328 	.word	0x20000328
 8001abc:	20000428 	.word	0x20000428
 8001ac0:	2000052c 	.word	0x2000052c

08001ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <_sbrk+0x5c>)
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <_sbrk+0x60>)
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <_sbrk+0x64>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <_sbrk+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d207      	bcs.n	8001b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af4:	f004 ff28 	bl	8006948 <__errno>
 8001af8:	4603      	mov	r3, r0
 8001afa:	220c      	movs	r2, #12
 8001afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	e009      	b.n	8001b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <_sbrk+0x64>)
 8001b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20004000 	.word	0x20004000
 8001b24:	00000400 	.word	0x00000400
 8001b28:	20000bc4 	.word	0x20000bc4
 8001b2c:	20000be0 	.word	0x20000be0

08001b30 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <SystemInit+0x20>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <SystemInit+0x20>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b8c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b58:	f7ff ffea 	bl	8001b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b5c:	480c      	ldr	r0, [pc, #48]	; (8001b90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b5e:	490d      	ldr	r1, [pc, #52]	; (8001b94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b60:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <LoopForever+0xe>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b64:	e002      	b.n	8001b6c <LoopCopyDataInit>

08001b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6a:	3304      	adds	r3, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b70:	d3f9      	bcc.n	8001b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b74:	4c0a      	ldr	r4, [pc, #40]	; (8001ba0 <LoopForever+0x16>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b78:	e001      	b.n	8001b7e <LoopFillZerobss>

08001b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b7c:	3204      	adds	r2, #4

08001b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b80:	d3fb      	bcc.n	8001b7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b82:	f004 fee7 	bl	8006954 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b86:	f7fe ffe3 	bl	8000b50 <main>

08001b8a <LoopForever>:

LoopForever:
    b LoopForever
 8001b8a:	e7fe      	b.n	8001b8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b8c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001b98:	080082d8 	.word	0x080082d8
  ldr r2, =_sbss
 8001b9c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001ba0:	20000bdc 	.word	0x20000bdc

08001ba4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC1_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HAL_Init+0x28>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a07      	ldr	r2, [pc, #28]	; (8001bd0 <HAL_Init+0x28>)
 8001bb2:	f043 0310 	orr.w	r3, r3, #16
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb8:	2003      	movs	r0, #3
 8001bba:	f000 f92b 	bl	8001e14 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f000 f808 	bl	8001bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc4:	f7ff fd18 	bl	80015f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40022000 	.word	0x40022000

08001bd4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_InitTick+0x54>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_InitTick+0x58>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f943 	bl	8001e7e <HAL_SYSTICK_Config>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00e      	b.n	8001c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d80a      	bhi.n	8001c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	f000 f90b 	bl	8001e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c14:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <HAL_InitTick+0x5c>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000020 	.word	0x20000020
 8001c2c:	20000028 	.word	0x20000028
 8001c30:	20000024 	.word	0x20000024

08001c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <HAL_IncTick+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000028 	.word	0x20000028
 8001c58:	20000bc8 	.word	0x20000bc8

08001c5c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000bc8 	.word	0x20000bc8

08001c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c90:	4013      	ands	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca6:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	60d3      	str	r3, [r2, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	f003 0307 	and.w	r3, r3, #7
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	db0b      	blt.n	8001d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	f003 021f 	and.w	r2, r3, #31
 8001cf0:	4907      	ldr	r1, [pc, #28]	; (8001d10 <__NVIC_EnableIRQ+0x38>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000e100 	.word	0xe000e100

08001d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	db0a      	blt.n	8001d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	490c      	ldr	r1, [pc, #48]	; (8001d60 <__NVIC_SetPriority+0x4c>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	440b      	add	r3, r1
 8001d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d3c:	e00a      	b.n	8001d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4908      	ldr	r1, [pc, #32]	; (8001d64 <__NVIC_SetPriority+0x50>)
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	3b04      	subs	r3, #4
 8001d4c:	0112      	lsls	r2, r2, #4
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	440b      	add	r3, r1
 8001d52:	761a      	strb	r2, [r3, #24]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	; 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f1c3 0307 	rsb	r3, r3, #7
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	bf28      	it	cs
 8001d86:	2304      	movcs	r3, #4
 8001d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	2b06      	cmp	r3, #6
 8001d90:	d902      	bls.n	8001d98 <NVIC_EncodePriority+0x30>
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3b03      	subs	r3, #3
 8001d96:	e000      	b.n	8001d9a <NVIC_EncodePriority+0x32>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	401a      	ands	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43d9      	mvns	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	4313      	orrs	r3, r2
         );
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3724      	adds	r7, #36	; 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de0:	d301      	bcc.n	8001de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00f      	b.n	8001e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <SysTick_Config+0x40>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dee:	210f      	movs	r1, #15
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f7ff ff8e 	bl	8001d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <SysTick_Config+0x40>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <SysTick_Config+0x40>)
 8001e00:	2207      	movs	r2, #7
 8001e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	e000e010 	.word	0xe000e010

08001e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff29 	bl	8001c74 <__NVIC_SetPriorityGrouping>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3c:	f7ff ff3e 	bl	8001cbc <__NVIC_GetPriorityGrouping>
 8001e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	6978      	ldr	r0, [r7, #20]
 8001e48:	f7ff ff8e 	bl	8001d68 <NVIC_EncodePriority>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff5d 	bl	8001d14 <__NVIC_SetPriority>
}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff31 	bl	8001cd8 <__NVIC_EnableIRQ>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ffa2 	bl	8001dd0 <SysTick_Config>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e037      	b.n	8001f1c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ec2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001ec6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f9c4 	bl	800228c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}  
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_DMA_Start_IT+0x20>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e04a      	b.n	8001fda <HAL_DMA_Start_IT+0xb6>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d13a      	bne.n	8001fcc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f957 	bl	800222e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 020e 	orr.w	r2, r2, #14
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	e00f      	b.n	8001fba <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 020a 	orr.w	r2, r2, #10
 8001fa8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0204 	bic.w	r2, r2, #4
 8001fb8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	e005      	b.n	8001fd8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d008      	beq.n	8002006 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e020      	b.n	8002048 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 020e 	bic.w	r2, r2, #14
 8002014:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0201 	bic.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202e:	2101      	movs	r1, #1
 8002030:	fa01 f202 	lsl.w	r2, r1, r2
 8002034:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002066:	2b02      	cmp	r3, #2
 8002068:	d005      	beq.n	8002076 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2204      	movs	r2, #4
 800206e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
 8002074:	e027      	b.n	80020c6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 020e 	bic.w	r2, r2, #14
 8002084:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0201 	bic.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209e:	2101      	movs	r1, #1
 80020a0:	fa01 f202 	lsl.w	r2, r1, r2
 80020a4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	4798      	blx	r3
    } 
  }
  return status;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	2204      	movs	r2, #4
 80020ee:	409a      	lsls	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d024      	beq.n	8002142 <HAL_DMA_IRQHandler+0x72>
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d01f      	beq.n	8002142 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	2b00      	cmp	r3, #0
 800210e:	d107      	bne.n	8002120 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0204 	bic.w	r2, r2, #4
 800211e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002128:	2104      	movs	r1, #4
 800212a:	fa01 f202 	lsl.w	r2, r1, r2
 800212e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	2b00      	cmp	r3, #0
 8002136:	d06a      	beq.n	800220e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002140:	e065      	b.n	800220e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	2202      	movs	r2, #2
 8002148:	409a      	lsls	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d02c      	beq.n	80021ac <HAL_DMA_IRQHandler+0xdc>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d027      	beq.n	80021ac <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10b      	bne.n	8002182 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 020a 	bic.w	r2, r2, #10
 8002178:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218a:	2102      	movs	r1, #2
 800218c:	fa01 f202 	lsl.w	r2, r1, r2
 8002190:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d035      	beq.n	800220e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80021aa:	e030      	b.n	800220e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	2208      	movs	r2, #8
 80021b2:	409a      	lsls	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d028      	beq.n	800220e <HAL_DMA_IRQHandler+0x13e>
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d023      	beq.n	800220e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 020e 	bic.w	r2, r2, #14
 80021d4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f202 	lsl.w	r2, r1, r2
 80021e4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	2b00      	cmp	r3, #0
 8002202:	d004      	beq.n	800220e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
    }
  }
}  
 800220c:	e7ff      	b.n	800220e <HAL_DMA_IRQHandler+0x13e>
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800222e:	b480      	push	{r7}
 8002230:	b085      	sub	sp, #20
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002244:	2101      	movs	r1, #1
 8002246:	fa01 f202 	lsl.w	r2, r1, r2
 800224a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b10      	cmp	r3, #16
 800225a:	d108      	bne.n	800226e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800226c:	e007      	b.n	800227e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	60da      	str	r2, [r3, #12]
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <DMA_CalcBaseAndBitshift+0x34>)
 800229c:	4413      	add	r3, r2
 800229e:	4a09      	ldr	r2, [pc, #36]	; (80022c4 <DMA_CalcBaseAndBitshift+0x38>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	009a      	lsls	r2, r3, #2
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a06      	ldr	r2, [pc, #24]	; (80022c8 <DMA_CalcBaseAndBitshift+0x3c>)
 80022b0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	bffdfff8 	.word	0xbffdfff8
 80022c4:	cccccccd 	.word	0xcccccccd
 80022c8:	40020000 	.word	0x40020000

080022cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022da:	e14e      	b.n	800257a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	2101      	movs	r1, #1
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	4013      	ands	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8140 	beq.w	8002574 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d005      	beq.n	800230c <HAL_GPIO_Init+0x40>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d130      	bne.n	800236e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2203      	movs	r2, #3
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002342:	2201      	movs	r2, #1
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	f003 0201 	and.w	r2, r3, #1
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b03      	cmp	r3, #3
 8002378:	d017      	beq.n	80023aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	2203      	movs	r2, #3
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d123      	bne.n	80023fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	08da      	lsrs	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3208      	adds	r2, #8
 80023be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	220f      	movs	r2, #15
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4013      	ands	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	08da      	lsrs	r2, r3, #3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3208      	adds	r2, #8
 80023f8:	6939      	ldr	r1, [r7, #16]
 80023fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0203 	and.w	r2, r3, #3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 809a 	beq.w	8002574 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002440:	4b55      	ldr	r3, [pc, #340]	; (8002598 <HAL_GPIO_Init+0x2cc>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	4a54      	ldr	r2, [pc, #336]	; (8002598 <HAL_GPIO_Init+0x2cc>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6193      	str	r3, [r2, #24]
 800244c:	4b52      	ldr	r3, [pc, #328]	; (8002598 <HAL_GPIO_Init+0x2cc>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002458:	4a50      	ldr	r2, [pc, #320]	; (800259c <HAL_GPIO_Init+0x2d0>)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3302      	adds	r3, #2
 8002460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002464:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	220f      	movs	r2, #15
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002482:	d013      	beq.n	80024ac <HAL_GPIO_Init+0x1e0>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a46      	ldr	r2, [pc, #280]	; (80025a0 <HAL_GPIO_Init+0x2d4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00d      	beq.n	80024a8 <HAL_GPIO_Init+0x1dc>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a45      	ldr	r2, [pc, #276]	; (80025a4 <HAL_GPIO_Init+0x2d8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d007      	beq.n	80024a4 <HAL_GPIO_Init+0x1d8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a44      	ldr	r2, [pc, #272]	; (80025a8 <HAL_GPIO_Init+0x2dc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_GPIO_Init+0x1d4>
 800249c:	2303      	movs	r3, #3
 800249e:	e006      	b.n	80024ae <HAL_GPIO_Init+0x1e2>
 80024a0:	2305      	movs	r3, #5
 80024a2:	e004      	b.n	80024ae <HAL_GPIO_Init+0x1e2>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e002      	b.n	80024ae <HAL_GPIO_Init+0x1e2>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <HAL_GPIO_Init+0x1e2>
 80024ac:	2300      	movs	r3, #0
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	f002 0203 	and.w	r2, r2, #3
 80024b4:	0092      	lsls	r2, r2, #2
 80024b6:	4093      	lsls	r3, r2
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024be:	4937      	ldr	r1, [pc, #220]	; (800259c <HAL_GPIO_Init+0x2d0>)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	3302      	adds	r3, #2
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024cc:	4b37      	ldr	r3, [pc, #220]	; (80025ac <HAL_GPIO_Init+0x2e0>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024f0:	4a2e      	ldr	r2, [pc, #184]	; (80025ac <HAL_GPIO_Init+0x2e0>)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f6:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <HAL_GPIO_Init+0x2e0>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	43db      	mvns	r3, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800251a:	4a24      	ldr	r2, [pc, #144]	; (80025ac <HAL_GPIO_Init+0x2e0>)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002520:	4b22      	ldr	r3, [pc, #136]	; (80025ac <HAL_GPIO_Init+0x2e0>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	43db      	mvns	r3, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002544:	4a19      	ldr	r2, [pc, #100]	; (80025ac <HAL_GPIO_Init+0x2e0>)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800254a:	4b18      	ldr	r3, [pc, #96]	; (80025ac <HAL_GPIO_Init+0x2e0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800256e:	4a0f      	ldr	r2, [pc, #60]	; (80025ac <HAL_GPIO_Init+0x2e0>)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3301      	adds	r3, #1
 8002578:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	f47f aea9 	bne.w	80022dc <HAL_GPIO_Init+0x10>
  }
}
 800258a:	bf00      	nop
 800258c:	bf00      	nop
 800258e:	371c      	adds	r7, #28
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	40021000 	.word	0x40021000
 800259c:	40010000 	.word	0x40010000
 80025a0:	48000400 	.word	0x48000400
 80025a4:	48000800 	.word	0x48000800
 80025a8:	48000c00 	.word	0x48000c00
 80025ac:	40010400 	.word	0x40010400

080025b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	807b      	strh	r3, [r7, #2]
 80025bc:	4613      	mov	r3, r2
 80025be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025c0:	787b      	ldrb	r3, [r7, #1]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025c6:	887a      	ldrh	r2, [r7, #2]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025cc:	e002      	b.n	80025d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025f0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d102      	bne.n	8002606 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	f001 b823 	b.w	800364c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 817d 	beq.w	8002916 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800261c:	4bbc      	ldr	r3, [pc, #752]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b04      	cmp	r3, #4
 8002626:	d00c      	beq.n	8002642 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002628:	4bb9      	ldr	r3, [pc, #740]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	2b08      	cmp	r3, #8
 8002632:	d15c      	bne.n	80026ee <HAL_RCC_OscConfig+0x10e>
 8002634:	4bb6      	ldr	r3, [pc, #728]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002640:	d155      	bne.n	80026ee <HAL_RCC_OscConfig+0x10e>
 8002642:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002646:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002656:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b01      	cmp	r3, #1
 800266c:	d102      	bne.n	8002674 <HAL_RCC_OscConfig+0x94>
 800266e:	4ba8      	ldr	r3, [pc, #672]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	e015      	b.n	80026a0 <HAL_RCC_OscConfig+0xc0>
 8002674:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002678:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800268c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002690:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800269c:	4b9c      	ldr	r3, [pc, #624]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026a4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80026a8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80026ac:	fa92 f2a2 	rbit	r2, r2
 80026b0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80026b4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80026b8:	fab2 f282 	clz	r2, r2
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	f042 0220 	orr.w	r2, r2, #32
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	f002 021f 	and.w	r2, r2, #31
 80026c8:	2101      	movs	r1, #1
 80026ca:	fa01 f202 	lsl.w	r2, r1, r2
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 811f 	beq.w	8002914 <HAL_RCC_OscConfig+0x334>
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 8116 	bne.w	8002914 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	f000 bfaf 	b.w	800364c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026fe:	d106      	bne.n	800270e <HAL_RCC_OscConfig+0x12e>
 8002700:	4b83      	ldr	r3, [pc, #524]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a82      	ldr	r2, [pc, #520]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 8002706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	e036      	b.n	800277c <HAL_RCC_OscConfig+0x19c>
 800270e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002712:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0x158>
 800271e:	4b7c      	ldr	r3, [pc, #496]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a7b      	ldr	r2, [pc, #492]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 8002724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b79      	ldr	r3, [pc, #484]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a78      	ldr	r2, [pc, #480]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 8002730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e021      	b.n	800277c <HAL_RCC_OscConfig+0x19c>
 8002738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0x184>
 800274a:	4b71      	ldr	r3, [pc, #452]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a70      	ldr	r2, [pc, #448]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 8002750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	4b6e      	ldr	r3, [pc, #440]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a6d      	ldr	r2, [pc, #436]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 800275c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e00b      	b.n	800277c <HAL_RCC_OscConfig+0x19c>
 8002764:	4b6a      	ldr	r3, [pc, #424]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a69      	ldr	r2, [pc, #420]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 800276a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	4b67      	ldr	r3, [pc, #412]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a66      	ldr	r2, [pc, #408]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 8002776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800277a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800277c:	4b64      	ldr	r3, [pc, #400]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	f023 020f 	bic.w	r2, r3, #15
 8002784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002788:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	495f      	ldr	r1, [pc, #380]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 8002792:	4313      	orrs	r3, r2
 8002794:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d059      	beq.n	800285a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f7ff fa59 	bl	8001c5c <HAL_GetTick>
 80027aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b0:	f7ff fa54 	bl	8001c5c <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b64      	cmp	r3, #100	; 0x64
 80027be:	d902      	bls.n	80027c6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	f000 bf43 	b.w	800364c <HAL_RCC_OscConfig+0x106c>
 80027c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80027da:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d102      	bne.n	80027f8 <HAL_RCC_OscConfig+0x218>
 80027f2:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	e015      	b.n	8002824 <HAL_RCC_OscConfig+0x244>
 80027f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027fc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800280c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002810:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002814:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002820:	4b3b      	ldr	r3, [pc, #236]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002828:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800282c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002830:	fa92 f2a2 	rbit	r2, r2
 8002834:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002838:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800283c:	fab2 f282 	clz	r2, r2
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	f042 0220 	orr.w	r2, r2, #32
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	f002 021f 	and.w	r2, r2, #31
 800284c:	2101      	movs	r1, #1
 800284e:	fa01 f202 	lsl.w	r2, r1, r2
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0ab      	beq.n	80027b0 <HAL_RCC_OscConfig+0x1d0>
 8002858:	e05d      	b.n	8002916 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285a:	f7ff f9ff 	bl	8001c5c <HAL_GetTick>
 800285e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002862:	e00a      	b.n	800287a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002864:	f7ff f9fa 	bl	8001c5c <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b64      	cmp	r3, #100	; 0x64
 8002872:	d902      	bls.n	800287a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	f000 bee9 	b.w	800364c <HAL_RCC_OscConfig+0x106c>
 800287a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800287e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800288e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	b2db      	uxtb	r3, r3
 8002898:	095b      	lsrs	r3, r3, #5
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d102      	bne.n	80028ac <HAL_RCC_OscConfig+0x2cc>
 80028a6:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	e015      	b.n	80028d8 <HAL_RCC_OscConfig+0x2f8>
 80028ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028b0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80028c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028c4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80028c8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <HAL_RCC_OscConfig+0x330>)
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028dc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80028e0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80028e4:	fa92 f2a2 	rbit	r2, r2
 80028e8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80028ec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80028f0:	fab2 f282 	clz	r2, r2
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	f042 0220 	orr.w	r2, r2, #32
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	f002 021f 	and.w	r2, r2, #31
 8002900:	2101      	movs	r1, #1
 8002902:	fa01 f202 	lsl.w	r2, r1, r2
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1ab      	bne.n	8002864 <HAL_RCC_OscConfig+0x284>
 800290c:	e003      	b.n	8002916 <HAL_RCC_OscConfig+0x336>
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 817d 	beq.w	8002c26 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800292c:	4ba6      	ldr	r3, [pc, #664]	; (8002bc8 <HAL_RCC_OscConfig+0x5e8>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00b      	beq.n	8002950 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002938:	4ba3      	ldr	r3, [pc, #652]	; (8002bc8 <HAL_RCC_OscConfig+0x5e8>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 030c 	and.w	r3, r3, #12
 8002940:	2b08      	cmp	r3, #8
 8002942:	d172      	bne.n	8002a2a <HAL_RCC_OscConfig+0x44a>
 8002944:	4ba0      	ldr	r3, [pc, #640]	; (8002bc8 <HAL_RCC_OscConfig+0x5e8>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d16c      	bne.n	8002a2a <HAL_RCC_OscConfig+0x44a>
 8002950:	2302      	movs	r3, #2
 8002952:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002962:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b01      	cmp	r3, #1
 8002978:	d102      	bne.n	8002980 <HAL_RCC_OscConfig+0x3a0>
 800297a:	4b93      	ldr	r3, [pc, #588]	; (8002bc8 <HAL_RCC_OscConfig+0x5e8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	e013      	b.n	80029a8 <HAL_RCC_OscConfig+0x3c8>
 8002980:	2302      	movs	r3, #2
 8002982:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002992:	2302      	movs	r3, #2
 8002994:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002998:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80029a4:	4b88      	ldr	r3, [pc, #544]	; (8002bc8 <HAL_RCC_OscConfig+0x5e8>)
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	2202      	movs	r2, #2
 80029aa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80029ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80029b2:	fa92 f2a2 	rbit	r2, r2
 80029b6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80029ba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80029be:	fab2 f282 	clz	r2, r2
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	f042 0220 	orr.w	r2, r2, #32
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	f002 021f 	and.w	r2, r2, #31
 80029ce:	2101      	movs	r1, #1
 80029d0:	fa01 f202 	lsl.w	r2, r1, r2
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HAL_RCC_OscConfig+0x410>
 80029da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d002      	beq.n	80029f0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	f000 be2e 	b.w	800364c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f0:	4b75      	ldr	r3, [pc, #468]	; (8002bc8 <HAL_RCC_OscConfig+0x5e8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	21f8      	movs	r1, #248	; 0xf8
 8002a06:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002a0e:	fa91 f1a1 	rbit	r1, r1
 8002a12:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002a16:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002a1a:	fab1 f181 	clz	r1, r1
 8002a1e:	b2c9      	uxtb	r1, r1
 8002a20:	408b      	lsls	r3, r1
 8002a22:	4969      	ldr	r1, [pc, #420]	; (8002bc8 <HAL_RCC_OscConfig+0x5e8>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a28:	e0fd      	b.n	8002c26 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8088 	beq.w	8002b4c <HAL_RCC_OscConfig+0x56c>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002a4e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	461a      	mov	r2, r3
 8002a64:	2301      	movs	r3, #1
 8002a66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7ff f8f8 	bl	8001c5c <HAL_GetTick>
 8002a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a70:	e00a      	b.n	8002a88 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a72:	f7ff f8f3 	bl	8001c5c <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d902      	bls.n	8002a88 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	f000 bde2 	b.w	800364c <HAL_RCC_OscConfig+0x106c>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002a9a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d102      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x4d8>
 8002ab2:	4b45      	ldr	r3, [pc, #276]	; (8002bc8 <HAL_RCC_OscConfig+0x5e8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	e013      	b.n	8002ae0 <HAL_RCC_OscConfig+0x500>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002aca:	2302      	movs	r3, #2
 8002acc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ad0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002adc:	4b3a      	ldr	r3, [pc, #232]	; (8002bc8 <HAL_RCC_OscConfig+0x5e8>)
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002ae6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002aea:	fa92 f2a2 	rbit	r2, r2
 8002aee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002af2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002af6:	fab2 f282 	clz	r2, r2
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	f042 0220 	orr.w	r2, r2, #32
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	f002 021f 	and.w	r2, r2, #31
 8002b06:	2101      	movs	r1, #1
 8002b08:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0af      	beq.n	8002a72 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b12:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <HAL_RCC_OscConfig+0x5e8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	21f8      	movs	r1, #248	; 0xf8
 8002b28:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b30:	fa91 f1a1 	rbit	r1, r1
 8002b34:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002b38:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b3c:	fab1 f181 	clz	r1, r1
 8002b40:	b2c9      	uxtb	r1, r1
 8002b42:	408b      	lsls	r3, r1
 8002b44:	4920      	ldr	r1, [pc, #128]	; (8002bc8 <HAL_RCC_OscConfig+0x5e8>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]
 8002b4a:	e06c      	b.n	8002c26 <HAL_RCC_OscConfig+0x646>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002b5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b62:	fab3 f383 	clz	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	461a      	mov	r2, r3
 8002b74:	2300      	movs	r3, #0
 8002b76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7ff f870 	bl	8001c5c <HAL_GetTick>
 8002b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b80:	e00a      	b.n	8002b98 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b82:	f7ff f86b 	bl	8001c5c <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d902      	bls.n	8002b98 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	f000 bd5a 	b.w	800364c <HAL_RCC_OscConfig+0x106c>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bae:	fab3 f383 	clz	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	095b      	lsrs	r3, r3, #5
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d104      	bne.n	8002bcc <HAL_RCC_OscConfig+0x5ec>
 8002bc2:	4b01      	ldr	r3, [pc, #4]	; (8002bc8 <HAL_RCC_OscConfig+0x5e8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	e015      	b.n	8002bf4 <HAL_RCC_OscConfig+0x614>
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	2302      	movs	r3, #2
 8002bce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002bde:	2302      	movs	r3, #2
 8002be0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002be4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002bf0:	4bc8      	ldr	r3, [pc, #800]	; (8002f14 <HAL_RCC_OscConfig+0x934>)
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002bfa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002bfe:	fa92 f2a2 	rbit	r2, r2
 8002c02:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002c06:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002c0a:	fab2 f282 	clz	r2, r2
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	f042 0220 	orr.w	r2, r2, #32
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	f002 021f 	and.w	r2, r2, #31
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1ad      	bne.n	8002b82 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8110 	beq.w	8002e5c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d079      	beq.n	8002d40 <HAL_RCC_OscConfig+0x760>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4bab      	ldr	r3, [pc, #684]	; (8002f18 <HAL_RCC_OscConfig+0x938>)
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	461a      	mov	r2, r3
 8002c72:	2301      	movs	r3, #1
 8002c74:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c76:	f7fe fff1 	bl	8001c5c <HAL_GetTick>
 8002c7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c80:	f7fe ffec 	bl	8001c5c <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d902      	bls.n	8002c96 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	f000 bcdb 	b.w	800364c <HAL_RCC_OscConfig+0x106c>
 8002c96:	2302      	movs	r3, #2
 8002c98:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ca0:	fa93 f3a3 	rbit	r3, r3
 8002ca4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	fa93 f2a3 	rbit	r2, r3
 8002cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	fa93 f2a3 	rbit	r2, r3
 8002ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002cee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf0:	4b88      	ldr	r3, [pc, #544]	; (8002f14 <HAL_RCC_OscConfig+0x934>)
 8002cf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002cfc:	2102      	movs	r1, #2
 8002cfe:	6019      	str	r1, [r3, #0]
 8002d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d04:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	fa93 f1a3 	rbit	r1, r3
 8002d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d12:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d16:	6019      	str	r1, [r3, #0]
  return result;
 8002d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	2101      	movs	r1, #1
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0a0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x6a0>
 8002d3e:	e08d      	b.n	8002e5c <HAL_RCC_OscConfig+0x87c>
 8002d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d44:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d50:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	fa93 f2a3 	rbit	r2, r3
 8002d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d62:	601a      	str	r2, [r3, #0]
  return result;
 8002d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d68:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d6c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	461a      	mov	r2, r3
 8002d76:	4b68      	ldr	r3, [pc, #416]	; (8002f18 <HAL_RCC_OscConfig+0x938>)
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	2300      	movs	r3, #0
 8002d80:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d82:	f7fe ff6b 	bl	8001c5c <HAL_GetTick>
 8002d86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d8c:	f7fe ff66 	bl	8001c5c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d902      	bls.n	8002da2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	f000 bc55 	b.w	800364c <HAL_RCC_OscConfig+0x106c>
 8002da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002daa:	2202      	movs	r2, #2
 8002dac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	fa93 f2a3 	rbit	r2, r3
 8002dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002dce:	2202      	movs	r2, #2
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	fa93 f2a3 	rbit	r2, r3
 8002de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002df2:	2202      	movs	r2, #2
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	fa93 f2a3 	rbit	r2, r3
 8002e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e08:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e0c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0e:	4b41      	ldr	r3, [pc, #260]	; (8002f14 <HAL_RCC_OscConfig+0x934>)
 8002e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e16:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002e1a:	2102      	movs	r1, #2
 8002e1c:	6019      	str	r1, [r3, #0]
 8002e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e22:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	fa93 f1a3 	rbit	r1, r3
 8002e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e30:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e34:	6019      	str	r1, [r3, #0]
  return result;
 8002e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	fab3 f383 	clz	r3, r3
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	2101      	movs	r1, #1
 8002e52:	fa01 f303 	lsl.w	r3, r1, r3
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d197      	bne.n	8002d8c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 81a1 	beq.w	80031b4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e78:	4b26      	ldr	r3, [pc, #152]	; (8002f14 <HAL_RCC_OscConfig+0x934>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d116      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e84:	4b23      	ldr	r3, [pc, #140]	; (8002f14 <HAL_RCC_OscConfig+0x934>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	4a22      	ldr	r2, [pc, #136]	; (8002f14 <HAL_RCC_OscConfig+0x934>)
 8002e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	61d3      	str	r3, [r2, #28]
 8002e90:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <HAL_RCC_OscConfig+0x934>)
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002eaa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002eac:	2301      	movs	r3, #1
 8002eae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb2:	4b1a      	ldr	r3, [pc, #104]	; (8002f1c <HAL_RCC_OscConfig+0x93c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d11a      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ebe:	4b17      	ldr	r3, [pc, #92]	; (8002f1c <HAL_RCC_OscConfig+0x93c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a16      	ldr	r2, [pc, #88]	; (8002f1c <HAL_RCC_OscConfig+0x93c>)
 8002ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eca:	f7fe fec7 	bl	8001c5c <HAL_GetTick>
 8002ece:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed2:	e009      	b.n	8002ee8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed4:	f7fe fec2 	bl	8001c5c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b64      	cmp	r3, #100	; 0x64
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e3b1      	b.n	800364c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <HAL_RCC_OscConfig+0x93c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0ef      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d10d      	bne.n	8002f20 <HAL_RCC_OscConfig+0x940>
 8002f04:	4b03      	ldr	r3, [pc, #12]	; (8002f14 <HAL_RCC_OscConfig+0x934>)
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	4a02      	ldr	r2, [pc, #8]	; (8002f14 <HAL_RCC_OscConfig+0x934>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	6213      	str	r3, [r2, #32]
 8002f10:	e03c      	b.n	8002f8c <HAL_RCC_OscConfig+0x9ac>
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000
 8002f18:	10908120 	.word	0x10908120
 8002f1c:	40007000 	.word	0x40007000
 8002f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10c      	bne.n	8002f4a <HAL_RCC_OscConfig+0x96a>
 8002f30:	4bc1      	ldr	r3, [pc, #772]	; (8003238 <HAL_RCC_OscConfig+0xc58>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4ac0      	ldr	r2, [pc, #768]	; (8003238 <HAL_RCC_OscConfig+0xc58>)
 8002f36:	f023 0301 	bic.w	r3, r3, #1
 8002f3a:	6213      	str	r3, [r2, #32]
 8002f3c:	4bbe      	ldr	r3, [pc, #760]	; (8003238 <HAL_RCC_OscConfig+0xc58>)
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	4abd      	ldr	r2, [pc, #756]	; (8003238 <HAL_RCC_OscConfig+0xc58>)
 8002f42:	f023 0304 	bic.w	r3, r3, #4
 8002f46:	6213      	str	r3, [r2, #32]
 8002f48:	e020      	b.n	8002f8c <HAL_RCC_OscConfig+0x9ac>
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2b05      	cmp	r3, #5
 8002f58:	d10c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x994>
 8002f5a:	4bb7      	ldr	r3, [pc, #732]	; (8003238 <HAL_RCC_OscConfig+0xc58>)
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	4ab6      	ldr	r2, [pc, #728]	; (8003238 <HAL_RCC_OscConfig+0xc58>)
 8002f60:	f043 0304 	orr.w	r3, r3, #4
 8002f64:	6213      	str	r3, [r2, #32]
 8002f66:	4bb4      	ldr	r3, [pc, #720]	; (8003238 <HAL_RCC_OscConfig+0xc58>)
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	4ab3      	ldr	r2, [pc, #716]	; (8003238 <HAL_RCC_OscConfig+0xc58>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6213      	str	r3, [r2, #32]
 8002f72:	e00b      	b.n	8002f8c <HAL_RCC_OscConfig+0x9ac>
 8002f74:	4bb0      	ldr	r3, [pc, #704]	; (8003238 <HAL_RCC_OscConfig+0xc58>)
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	4aaf      	ldr	r2, [pc, #700]	; (8003238 <HAL_RCC_OscConfig+0xc58>)
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	6213      	str	r3, [r2, #32]
 8002f80:	4bad      	ldr	r3, [pc, #692]	; (8003238 <HAL_RCC_OscConfig+0xc58>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4aac      	ldr	r2, [pc, #688]	; (8003238 <HAL_RCC_OscConfig+0xc58>)
 8002f86:	f023 0304 	bic.w	r3, r3, #4
 8002f8a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8081 	beq.w	80030a0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9e:	f7fe fe5d 	bl	8001c5c <HAL_GetTick>
 8002fa2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa6:	e00b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa8:	f7fe fe58 	bl	8001c5c <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e345      	b.n	800364c <HAL_RCC_OscConfig+0x106c>
 8002fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002fc8:	2202      	movs	r2, #2
 8002fca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	fa93 f2a3 	rbit	r2, r3
 8002fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fde:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002fec:	2202      	movs	r2, #2
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	fa93 f2a3 	rbit	r2, r3
 8002ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003002:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003006:	601a      	str	r2, [r3, #0]
  return result;
 8003008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003010:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	095b      	lsrs	r3, r3, #5
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d102      	bne.n	800302c <HAL_RCC_OscConfig+0xa4c>
 8003026:	4b84      	ldr	r3, [pc, #528]	; (8003238 <HAL_RCC_OscConfig+0xc58>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	e013      	b.n	8003054 <HAL_RCC_OscConfig+0xa74>
 800302c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003030:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003034:	2202      	movs	r2, #2
 8003036:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	fa93 f2a3 	rbit	r2, r3
 8003046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	4b79      	ldr	r3, [pc, #484]	; (8003238 <HAL_RCC_OscConfig+0xc58>)
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003058:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800305c:	2102      	movs	r1, #2
 800305e:	6011      	str	r1, [r2, #0]
 8003060:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003064:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	fa92 f1a2 	rbit	r1, r2
 800306e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003072:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003076:	6011      	str	r1, [r2, #0]
  return result;
 8003078:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800307c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	fab2 f282 	clz	r2, r2
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	f002 021f 	and.w	r2, r2, #31
 8003092:	2101      	movs	r1, #1
 8003094:	fa01 f202 	lsl.w	r2, r1, r2
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d084      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x9c8>
 800309e:	e07f      	b.n	80031a0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a0:	f7fe fddc 	bl	8001c5c <HAL_GetTick>
 80030a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a8:	e00b      	b.n	80030c2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f7fe fdd7 	bl	8001c5c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e2c4      	b.n	800364c <HAL_RCC_OscConfig+0x106c>
 80030c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80030ca:	2202      	movs	r2, #2
 80030cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	fa93 f2a3 	rbit	r2, r3
 80030dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80030ee:	2202      	movs	r2, #2
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	fa93 f2a3 	rbit	r2, r3
 8003100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003104:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003108:	601a      	str	r2, [r3, #0]
  return result;
 800310a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003112:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003114:	fab3 f383 	clz	r3, r3
 8003118:	b2db      	uxtb	r3, r3
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f043 0302 	orr.w	r3, r3, #2
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d102      	bne.n	800312e <HAL_RCC_OscConfig+0xb4e>
 8003128:	4b43      	ldr	r3, [pc, #268]	; (8003238 <HAL_RCC_OscConfig+0xc58>)
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	e013      	b.n	8003156 <HAL_RCC_OscConfig+0xb76>
 800312e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003132:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003136:	2202      	movs	r2, #2
 8003138:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	fa93 f2a3 	rbit	r2, r3
 8003148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	4b39      	ldr	r3, [pc, #228]	; (8003238 <HAL_RCC_OscConfig+0xc58>)
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800315a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800315e:	2102      	movs	r1, #2
 8003160:	6011      	str	r1, [r2, #0]
 8003162:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003166:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	fa92 f1a2 	rbit	r1, r2
 8003170:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003174:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003178:	6011      	str	r1, [r2, #0]
  return result;
 800317a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800317e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	fab2 f282 	clz	r2, r2
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	f002 021f 	and.w	r2, r2, #31
 8003194:	2101      	movs	r1, #1
 8003196:	fa01 f202 	lsl.w	r2, r1, r2
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d184      	bne.n	80030aa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d105      	bne.n	80031b4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a8:	4b23      	ldr	r3, [pc, #140]	; (8003238 <HAL_RCC_OscConfig+0xc58>)
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	4a22      	ldr	r2, [pc, #136]	; (8003238 <HAL_RCC_OscConfig+0xc58>)
 80031ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8242 	beq.w	800364a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031c6:	4b1c      	ldr	r3, [pc, #112]	; (8003238 <HAL_RCC_OscConfig+0xc58>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	f000 8213 	beq.w	80035fa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	f040 8162 	bne.w	80034aa <HAL_RCC_OscConfig+0xeca>
 80031e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ea:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80031ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	fa93 f2a3 	rbit	r2, r3
 8003202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003206:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800320a:	601a      	str	r2, [r3, #0]
  return result;
 800320c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003210:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003214:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003220:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	461a      	mov	r2, r3
 8003228:	2300      	movs	r3, #0
 800322a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322c:	f7fe fd16 	bl	8001c5c <HAL_GetTick>
 8003230:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003234:	e00c      	b.n	8003250 <HAL_RCC_OscConfig+0xc70>
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323c:	f7fe fd0e 	bl	8001c5c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e1fd      	b.n	800364c <HAL_RCC_OscConfig+0x106c>
 8003250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003254:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003258:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800325c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003262:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	fa93 f2a3 	rbit	r2, r3
 800326c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003270:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003274:	601a      	str	r2, [r3, #0]
  return result;
 8003276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800327e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003280:	fab3 f383 	clz	r3, r3
 8003284:	b2db      	uxtb	r3, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d102      	bne.n	800329a <HAL_RCC_OscConfig+0xcba>
 8003294:	4bb0      	ldr	r3, [pc, #704]	; (8003558 <HAL_RCC_OscConfig+0xf78>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	e027      	b.n	80032ea <HAL_RCC_OscConfig+0xd0a>
 800329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80032a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	fa93 f2a3 	rbit	r2, r3
 80032b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80032c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	fa93 f2a3 	rbit	r2, r3
 80032dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	4b9c      	ldr	r3, [pc, #624]	; (8003558 <HAL_RCC_OscConfig+0xf78>)
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ee:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80032f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032f6:	6011      	str	r1, [r2, #0]
 80032f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032fc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	fa92 f1a2 	rbit	r1, r2
 8003306:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800330a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800330e:	6011      	str	r1, [r2, #0]
  return result;
 8003310:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003314:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	fab2 f282 	clz	r2, r2
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	f042 0220 	orr.w	r2, r2, #32
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	f002 021f 	and.w	r2, r2, #31
 800332a:	2101      	movs	r1, #1
 800332c:	fa01 f202 	lsl.w	r2, r1, r2
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d182      	bne.n	800323c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003336:	4b88      	ldr	r3, [pc, #544]	; (8003558 <HAL_RCC_OscConfig+0xf78>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800333e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003342:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800334a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	430b      	orrs	r3, r1
 8003358:	497f      	ldr	r1, [pc, #508]	; (8003558 <HAL_RCC_OscConfig+0xf78>)
 800335a:	4313      	orrs	r3, r2
 800335c:	604b      	str	r3, [r1, #4]
 800335e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003362:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003366:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800336a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003370:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	fa93 f2a3 	rbit	r2, r3
 800337a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003382:	601a      	str	r2, [r3, #0]
  return result;
 8003384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003388:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800338c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003398:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	461a      	mov	r2, r3
 80033a0:	2301      	movs	r3, #1
 80033a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fe fc5a 	bl	8001c5c <HAL_GetTick>
 80033a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033ac:	e009      	b.n	80033c2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ae:	f7fe fc55 	bl	8001c5c <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e144      	b.n	800364c <HAL_RCC_OscConfig+0x106c>
 80033c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80033ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	fa93 f2a3 	rbit	r2, r3
 80033de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80033e6:	601a      	str	r2, [r3, #0]
  return result;
 80033e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80033f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033f2:	fab3 f383 	clz	r3, r3
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	f043 0301 	orr.w	r3, r3, #1
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d102      	bne.n	800340c <HAL_RCC_OscConfig+0xe2c>
 8003406:	4b54      	ldr	r3, [pc, #336]	; (8003558 <HAL_RCC_OscConfig+0xf78>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	e027      	b.n	800345c <HAL_RCC_OscConfig+0xe7c>
 800340c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003410:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003414:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	fa93 f2a3 	rbit	r2, r3
 8003428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003436:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800343a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003444:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	fa93 f2a3 	rbit	r2, r3
 800344e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003452:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	4b3f      	ldr	r3, [pc, #252]	; (8003558 <HAL_RCC_OscConfig+0xf78>)
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003460:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003464:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003468:	6011      	str	r1, [r2, #0]
 800346a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800346e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	fa92 f1a2 	rbit	r1, r2
 8003478:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800347c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003480:	6011      	str	r1, [r2, #0]
  return result;
 8003482:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003486:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	fab2 f282 	clz	r2, r2
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	f042 0220 	orr.w	r2, r2, #32
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	f002 021f 	and.w	r2, r2, #31
 800349c:	2101      	movs	r1, #1
 800349e:	fa01 f202 	lsl.w	r2, r1, r2
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d082      	beq.n	80033ae <HAL_RCC_OscConfig+0xdce>
 80034a8:	e0cf      	b.n	800364a <HAL_RCC_OscConfig+0x106a>
 80034aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ae:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80034b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034bc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	fa93 f2a3 	rbit	r2, r3
 80034c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80034ce:	601a      	str	r2, [r3, #0]
  return result;
 80034d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80034d8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	461a      	mov	r2, r3
 80034ec:	2300      	movs	r3, #0
 80034ee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fe fbb4 	bl	8001c5c <HAL_GetTick>
 80034f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f8:	e009      	b.n	800350e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fa:	f7fe fbaf 	bl	8001c5c <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e09e      	b.n	800364c <HAL_RCC_OscConfig+0x106c>
 800350e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003512:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003516:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800351a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003520:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	fa93 f2a3 	rbit	r2, r3
 800352a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003532:	601a      	str	r2, [r3, #0]
  return result;
 8003534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003538:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800353c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d104      	bne.n	800355c <HAL_RCC_OscConfig+0xf7c>
 8003552:	4b01      	ldr	r3, [pc, #4]	; (8003558 <HAL_RCC_OscConfig+0xf78>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	e029      	b.n	80035ac <HAL_RCC_OscConfig+0xfcc>
 8003558:	40021000 	.word	0x40021000
 800355c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003560:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003564:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003568:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	fa93 f2a3 	rbit	r2, r3
 8003578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003586:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800358a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003594:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	fa93 f2a3 	rbit	r2, r3
 800359e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	4b2b      	ldr	r3, [pc, #172]	; (8003658 <HAL_RCC_OscConfig+0x1078>)
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035b0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80035b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035b8:	6011      	str	r1, [r2, #0]
 80035ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035be:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	fa92 f1a2 	rbit	r1, r2
 80035c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035cc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80035d0:	6011      	str	r1, [r2, #0]
  return result;
 80035d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035d6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	fab2 f282 	clz	r2, r2
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	f042 0220 	orr.w	r2, r2, #32
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	f002 021f 	and.w	r2, r2, #31
 80035ec:	2101      	movs	r1, #1
 80035ee:	fa01 f202 	lsl.w	r2, r1, r2
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d180      	bne.n	80034fa <HAL_RCC_OscConfig+0xf1a>
 80035f8:	e027      	b.n	800364a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e01e      	b.n	800364c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800360e:	4b12      	ldr	r3, [pc, #72]	; (8003658 <HAL_RCC_OscConfig+0x1078>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003616:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800361a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800361e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003622:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	429a      	cmp	r2, r3
 800362c:	d10b      	bne.n	8003646 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800362e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003632:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003642:	429a      	cmp	r2, r3
 8003644:	d001      	beq.n	800364a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40021000 	.word	0x40021000

0800365c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b09e      	sub	sp, #120	; 0x78
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003666:	2300      	movs	r3, #0
 8003668:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e162      	b.n	800393a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003674:	4b90      	ldr	r3, [pc, #576]	; (80038b8 <HAL_RCC_ClockConfig+0x25c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d910      	bls.n	80036a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003682:	4b8d      	ldr	r3, [pc, #564]	; (80038b8 <HAL_RCC_ClockConfig+0x25c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f023 0207 	bic.w	r2, r3, #7
 800368a:	498b      	ldr	r1, [pc, #556]	; (80038b8 <HAL_RCC_ClockConfig+0x25c>)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	4313      	orrs	r3, r2
 8003690:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003692:	4b89      	ldr	r3, [pc, #548]	; (80038b8 <HAL_RCC_ClockConfig+0x25c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e14a      	b.n	800393a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b0:	4b82      	ldr	r3, [pc, #520]	; (80038bc <HAL_RCC_ClockConfig+0x260>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	497f      	ldr	r1, [pc, #508]	; (80038bc <HAL_RCC_ClockConfig+0x260>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80dc 	beq.w	8003888 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d13c      	bne.n	8003752 <HAL_RCC_ClockConfig+0xf6>
 80036d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036e0:	fa93 f3a3 	rbit	r3, r3
 80036e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80036e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e8:	fab3 f383 	clz	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d102      	bne.n	8003702 <HAL_RCC_ClockConfig+0xa6>
 80036fc:	4b6f      	ldr	r3, [pc, #444]	; (80038bc <HAL_RCC_ClockConfig+0x260>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	e00f      	b.n	8003722 <HAL_RCC_ClockConfig+0xc6>
 8003702:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003706:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800370a:	fa93 f3a3 	rbit	r3, r3
 800370e:	667b      	str	r3, [r7, #100]	; 0x64
 8003710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003714:	663b      	str	r3, [r7, #96]	; 0x60
 8003716:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003718:	fa93 f3a3 	rbit	r3, r3
 800371c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800371e:	4b67      	ldr	r3, [pc, #412]	; (80038bc <HAL_RCC_ClockConfig+0x260>)
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003726:	65ba      	str	r2, [r7, #88]	; 0x58
 8003728:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800372a:	fa92 f2a2 	rbit	r2, r2
 800372e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003730:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003732:	fab2 f282 	clz	r2, r2
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	f042 0220 	orr.w	r2, r2, #32
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	f002 021f 	and.w	r2, r2, #31
 8003742:	2101      	movs	r1, #1
 8003744:	fa01 f202 	lsl.w	r2, r1, r2
 8003748:	4013      	ands	r3, r2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d17b      	bne.n	8003846 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e0f3      	b.n	800393a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d13c      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x178>
 800375a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800375e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003762:	fa93 f3a3 	rbit	r3, r3
 8003766:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376a:	fab3 f383 	clz	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b01      	cmp	r3, #1
 800377c:	d102      	bne.n	8003784 <HAL_RCC_ClockConfig+0x128>
 800377e:	4b4f      	ldr	r3, [pc, #316]	; (80038bc <HAL_RCC_ClockConfig+0x260>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	e00f      	b.n	80037a4 <HAL_RCC_ClockConfig+0x148>
 8003784:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003788:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800378c:	fa93 f3a3 	rbit	r3, r3
 8003790:	647b      	str	r3, [r7, #68]	; 0x44
 8003792:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003796:	643b      	str	r3, [r7, #64]	; 0x40
 8003798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800379a:	fa93 f3a3 	rbit	r3, r3
 800379e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037a0:	4b46      	ldr	r3, [pc, #280]	; (80038bc <HAL_RCC_ClockConfig+0x260>)
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037a8:	63ba      	str	r2, [r7, #56]	; 0x38
 80037aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037ac:	fa92 f2a2 	rbit	r2, r2
 80037b0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80037b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037b4:	fab2 f282 	clz	r2, r2
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	f042 0220 	orr.w	r2, r2, #32
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	f002 021f 	and.w	r2, r2, #31
 80037c4:	2101      	movs	r1, #1
 80037c6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d13a      	bne.n	8003846 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0b2      	b.n	800393a <HAL_RCC_ClockConfig+0x2de>
 80037d4:	2302      	movs	r3, #2
 80037d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80037e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e2:	fab3 f383 	clz	r3, r3
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d102      	bne.n	80037fc <HAL_RCC_ClockConfig+0x1a0>
 80037f6:	4b31      	ldr	r3, [pc, #196]	; (80038bc <HAL_RCC_ClockConfig+0x260>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	e00d      	b.n	8003818 <HAL_RCC_ClockConfig+0x1bc>
 80037fc:	2302      	movs	r3, #2
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
 8003808:	2302      	movs	r3, #2
 800380a:	623b      	str	r3, [r7, #32]
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	61fb      	str	r3, [r7, #28]
 8003814:	4b29      	ldr	r3, [pc, #164]	; (80038bc <HAL_RCC_ClockConfig+0x260>)
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	2202      	movs	r2, #2
 800381a:	61ba      	str	r2, [r7, #24]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	fa92 f2a2 	rbit	r2, r2
 8003822:	617a      	str	r2, [r7, #20]
  return result;
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	fab2 f282 	clz	r2, r2
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	f042 0220 	orr.w	r2, r2, #32
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	f002 021f 	and.w	r2, r2, #31
 8003836:	2101      	movs	r1, #1
 8003838:	fa01 f202 	lsl.w	r2, r1, r2
 800383c:	4013      	ands	r3, r2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e079      	b.n	800393a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003846:	4b1d      	ldr	r3, [pc, #116]	; (80038bc <HAL_RCC_ClockConfig+0x260>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f023 0203 	bic.w	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	491a      	ldr	r1, [pc, #104]	; (80038bc <HAL_RCC_ClockConfig+0x260>)
 8003854:	4313      	orrs	r3, r2
 8003856:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003858:	f7fe fa00 	bl	8001c5c <HAL_GetTick>
 800385c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385e:	e00a      	b.n	8003876 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003860:	f7fe f9fc 	bl	8001c5c <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	; 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e061      	b.n	800393a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003876:	4b11      	ldr	r3, [pc, #68]	; (80038bc <HAL_RCC_ClockConfig+0x260>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 020c 	and.w	r2, r3, #12
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	429a      	cmp	r2, r3
 8003886:	d1eb      	bne.n	8003860 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <HAL_RCC_ClockConfig+0x25c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d214      	bcs.n	80038c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <HAL_RCC_ClockConfig+0x25c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 0207 	bic.w	r2, r3, #7
 800389e:	4906      	ldr	r1, [pc, #24]	; (80038b8 <HAL_RCC_ClockConfig+0x25c>)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <HAL_RCC_ClockConfig+0x25c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e040      	b.n	800393a <HAL_RCC_ClockConfig+0x2de>
 80038b8:	40022000 	.word	0x40022000
 80038bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038cc:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <HAL_RCC_ClockConfig+0x2e8>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	491a      	ldr	r1, [pc, #104]	; (8003944 <HAL_RCC_ClockConfig+0x2e8>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ea:	4b16      	ldr	r3, [pc, #88]	; (8003944 <HAL_RCC_ClockConfig+0x2e8>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4912      	ldr	r1, [pc, #72]	; (8003944 <HAL_RCC_ClockConfig+0x2e8>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80038fe:	f000 f829 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 8003902:	4601      	mov	r1, r0
 8003904:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <HAL_RCC_ClockConfig+0x2e8>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800390c:	22f0      	movs	r2, #240	; 0xf0
 800390e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	fa92 f2a2 	rbit	r2, r2
 8003916:	60fa      	str	r2, [r7, #12]
  return result;
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	fab2 f282 	clz	r2, r2
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	40d3      	lsrs	r3, r2
 8003922:	4a09      	ldr	r2, [pc, #36]	; (8003948 <HAL_RCC_ClockConfig+0x2ec>)
 8003924:	5cd3      	ldrb	r3, [r2, r3]
 8003926:	fa21 f303 	lsr.w	r3, r1, r3
 800392a:	4a08      	ldr	r2, [pc, #32]	; (800394c <HAL_RCC_ClockConfig+0x2f0>)
 800392c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800392e:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_RCC_ClockConfig+0x2f4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe f94e 	bl	8001bd4 <HAL_InitTick>
  
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3778      	adds	r7, #120	; 0x78
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000
 8003948:	08007e80 	.word	0x08007e80
 800394c:	20000020 	.word	0x20000020
 8003950:	20000024 	.word	0x20000024

08003954 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003954:	b480      	push	{r7}
 8003956:	b08b      	sub	sp, #44	; 0x2c
 8003958:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	2300      	movs	r3, #0
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	2300      	movs	r3, #0
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800396e:	4b29      	ldr	r3, [pc, #164]	; (8003a14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b04      	cmp	r3, #4
 800397c:	d002      	beq.n	8003984 <HAL_RCC_GetSysClockFreq+0x30>
 800397e:	2b08      	cmp	r3, #8
 8003980:	d003      	beq.n	800398a <HAL_RCC_GetSysClockFreq+0x36>
 8003982:	e03c      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003984:	4b24      	ldr	r3, [pc, #144]	; (8003a18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003986:	623b      	str	r3, [r7, #32]
      break;
 8003988:	e03c      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003990:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003994:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	fa92 f2a2 	rbit	r2, r2
 800399c:	607a      	str	r2, [r7, #4]
  return result;
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	fab2 f282 	clz	r2, r2
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	40d3      	lsrs	r3, r2
 80039a8:	4a1c      	ldr	r2, [pc, #112]	; (8003a1c <HAL_RCC_GetSysClockFreq+0xc8>)
 80039aa:	5cd3      	ldrb	r3, [r2, r3]
 80039ac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80039ae:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	220f      	movs	r2, #15
 80039b8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	fa92 f2a2 	rbit	r2, r2
 80039c0:	60fa      	str	r2, [r7, #12]
  return result;
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	fab2 f282 	clz	r2, r2
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	40d3      	lsrs	r3, r2
 80039cc:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039ce:	5cd3      	ldrb	r3, [r2, r3]
 80039d0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d008      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039dc:	4a0e      	ldr	r2, [pc, #56]	; (8003a18 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	fb02 f303 	mul.w	r3, r2, r3
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
 80039ec:	e004      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	4a0c      	ldr	r2, [pc, #48]	; (8003a24 <HAL_RCC_GetSysClockFreq+0xd0>)
 80039f2:	fb02 f303 	mul.w	r3, r2, r3
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	623b      	str	r3, [r7, #32]
      break;
 80039fc:	e002      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039fe:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a00:	623b      	str	r3, [r7, #32]
      break;
 8003a02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a04:	6a3b      	ldr	r3, [r7, #32]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	372c      	adds	r7, #44	; 0x2c
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000
 8003a18:	007a1200 	.word	0x007a1200
 8003a1c:	08007e98 	.word	0x08007e98
 8003a20:	08007ea8 	.word	0x08007ea8
 8003a24:	003d0900 	.word	0x003d0900

08003a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a2c:	4b03      	ldr	r3, [pc, #12]	; (8003a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	20000020 	.word	0x20000020

08003a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a46:	f7ff ffef 	bl	8003a28 <HAL_RCC_GetHCLKFreq>
 8003a4a:	4601      	mov	r1, r0
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a54:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	fa92 f2a2 	rbit	r2, r2
 8003a60:	603a      	str	r2, [r7, #0]
  return result;
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	fab2 f282 	clz	r2, r2
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	40d3      	lsrs	r3, r2
 8003a6c:	4a04      	ldr	r2, [pc, #16]	; (8003a80 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a6e:	5cd3      	ldrb	r3, [r2, r3]
 8003a70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	08007e90 	.word	0x08007e90

08003a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a8a:	f7ff ffcd 	bl	8003a28 <HAL_RCC_GetHCLKFreq>
 8003a8e:	4601      	mov	r1, r0
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003a98:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003a9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	fa92 f2a2 	rbit	r2, r2
 8003aa4:	603a      	str	r2, [r7, #0]
  return result;
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	fab2 f282 	clz	r2, r2
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	40d3      	lsrs	r3, r2
 8003ab0:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003ab2:	5cd3      	ldrb	r3, [r2, r3]
 8003ab4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	08007e90 	.word	0x08007e90

08003ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b092      	sub	sp, #72	; 0x48
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 80d4 	beq.w	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aec:	4b4e      	ldr	r3, [pc, #312]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10e      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af8:	4b4b      	ldr	r3, [pc, #300]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	4a4a      	ldr	r2, [pc, #296]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b02:	61d3      	str	r3, [r2, #28]
 8003b04:	4b48      	ldr	r3, [pc, #288]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b16:	4b45      	ldr	r3, [pc, #276]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d118      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b22:	4b42      	ldr	r3, [pc, #264]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a41      	ldr	r2, [pc, #260]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b2e:	f7fe f895 	bl	8001c5c <HAL_GetTick>
 8003b32:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b34:	e008      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b36:	f7fe f891 	bl	8001c5c <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b64      	cmp	r3, #100	; 0x64
 8003b42:	d901      	bls.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e14b      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b48:	4b38      	ldr	r3, [pc, #224]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b54:	4b34      	ldr	r3, [pc, #208]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8084 	beq.w	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d07c      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b74:	4b2c      	ldr	r3, [pc, #176]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	fa93 f3a3 	rbit	r3, r3
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b8e:	fab3 f383 	clz	r3, r3
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	461a      	mov	r2, r3
 8003b96:	4b26      	ldr	r3, [pc, #152]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ba6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003baa:	fa93 f3a3 	rbit	r3, r3
 8003bae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bb2:	fab3 f383 	clz	r3, r3
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4b1d      	ldr	r3, [pc, #116]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bc6:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d04b      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd6:	f7fe f841 	bl	8001c5c <HAL_GetTick>
 8003bda:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bdc:	e00a      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bde:	f7fe f83d 	bl	8001c5c <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e0f5      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	fa93 f3a3 	rbit	r3, r3
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003c00:	2302      	movs	r3, #2
 8003c02:	623b      	str	r3, [r7, #32]
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	61fb      	str	r3, [r7, #28]
  return result;
 8003c0c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0e:	fab3 f383 	clz	r3, r3
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	f043 0302 	orr.w	r3, r3, #2
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d108      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c22:	4b01      	ldr	r3, [pc, #4]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	e00d      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40007000 	.word	0x40007000
 8003c30:	10908100 	.word	0x10908100
 8003c34:	2302      	movs	r3, #2
 8003c36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	4b69      	ldr	r3, [pc, #420]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	2202      	movs	r2, #2
 8003c46:	613a      	str	r2, [r7, #16]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	fa92 f2a2 	rbit	r2, r2
 8003c4e:	60fa      	str	r2, [r7, #12]
  return result;
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	fab2 f282 	clz	r2, r2
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	f002 021f 	and.w	r2, r2, #31
 8003c62:	2101      	movs	r1, #1
 8003c64:	fa01 f202 	lsl.w	r2, r1, r2
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0b7      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c6e:	4b5e      	ldr	r3, [pc, #376]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	495b      	ldr	r1, [pc, #364]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c88:	4b57      	ldr	r3, [pc, #348]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	4a56      	ldr	r2, [pc, #344]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ca0:	4b51      	ldr	r3, [pc, #324]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	f023 0203 	bic.w	r2, r3, #3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	494e      	ldr	r1, [pc, #312]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cbe:	4b4a      	ldr	r3, [pc, #296]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f023 0210 	bic.w	r2, r3, #16
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	4947      	ldr	r1, [pc, #284]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003cdc:	4b42      	ldr	r3, [pc, #264]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	493f      	ldr	r1, [pc, #252]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d008      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cfa:	4b3b      	ldr	r3, [pc, #236]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	f023 0220 	bic.w	r2, r3, #32
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	4938      	ldr	r1, [pc, #224]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d18:	4b33      	ldr	r3, [pc, #204]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	4930      	ldr	r1, [pc, #192]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d36:	4b2c      	ldr	r3, [pc, #176]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	4929      	ldr	r1, [pc, #164]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003d54:	4b24      	ldr	r3, [pc, #144]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	4921      	ldr	r1, [pc, #132]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d72:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	491a      	ldr	r1, [pc, #104]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d90:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	4912      	ldr	r1, [pc, #72]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003dae:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	490b      	ldr	r1, [pc, #44]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	4903      	ldr	r1, [pc, #12]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3748      	adds	r7, #72	; 0x48
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40021000 	.word	0x40021000

08003dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e049      	b.n	8003e92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fd fc54 	bl	80016c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3304      	adds	r3, #4
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	f000 fda4 	bl	8004978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d001      	beq.n	8003eb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e033      	b.n	8003f1c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a19      	ldr	r2, [pc, #100]	; (8003f28 <HAL_TIM_Base_Start+0x8c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d009      	beq.n	8003eda <HAL_TIM_Base_Start+0x3e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ece:	d004      	beq.n	8003eda <HAL_TIM_Base_Start+0x3e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a15      	ldr	r2, [pc, #84]	; (8003f2c <HAL_TIM_Base_Start+0x90>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d115      	bne.n	8003f06 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <HAL_TIM_Base_Start+0x94>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b06      	cmp	r3, #6
 8003eea:	d015      	beq.n	8003f18 <HAL_TIM_Base_Start+0x7c>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef2:	d011      	beq.n	8003f18 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f04:	e008      	b.n	8003f18 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	e000      	b.n	8003f1a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	40012c00 	.word	0x40012c00
 8003f2c:	40014000 	.word	0x40014000
 8003f30:	00010007 	.word	0x00010007

08003f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d001      	beq.n	8003f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e03b      	b.n	8003fc4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a19      	ldr	r2, [pc, #100]	; (8003fd0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d009      	beq.n	8003f82 <HAL_TIM_Base_Start_IT+0x4e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f76:	d004      	beq.n	8003f82 <HAL_TIM_Base_Start_IT+0x4e>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a15      	ldr	r2, [pc, #84]	; (8003fd4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d115      	bne.n	8003fae <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <HAL_TIM_Base_Start_IT+0xa4>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b06      	cmp	r3, #6
 8003f92:	d015      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0x8c>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f9a:	d011      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fac:	e008      	b.n	8003fc0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0201 	orr.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	e000      	b.n	8003fc2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	40012c00 	.word	0x40012c00
 8003fd4:	40014000 	.word	0x40014000
 8003fd8:	00010007 	.word	0x00010007

08003fdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e049      	b.n	8004082 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fd fb82 	bl	800170c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3304      	adds	r3, #4
 8004018:	4619      	mov	r1, r3
 800401a:	4610      	mov	r0, r2
 800401c:	f000 fcac 	bl	8004978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d109      	bne.n	80040b0 <HAL_TIM_PWM_Start+0x24>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	bf14      	ite	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	2300      	moveq	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	e03c      	b.n	800412a <HAL_TIM_PWM_Start+0x9e>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d109      	bne.n	80040ca <HAL_TIM_PWM_Start+0x3e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	bf14      	ite	ne
 80040c2:	2301      	movne	r3, #1
 80040c4:	2300      	moveq	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	e02f      	b.n	800412a <HAL_TIM_PWM_Start+0x9e>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d109      	bne.n	80040e4 <HAL_TIM_PWM_Start+0x58>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e022      	b.n	800412a <HAL_TIM_PWM_Start+0x9e>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b0c      	cmp	r3, #12
 80040e8:	d109      	bne.n	80040fe <HAL_TIM_PWM_Start+0x72>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	bf14      	ite	ne
 80040f6:	2301      	movne	r3, #1
 80040f8:	2300      	moveq	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	e015      	b.n	800412a <HAL_TIM_PWM_Start+0x9e>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b10      	cmp	r3, #16
 8004102:	d109      	bne.n	8004118 <HAL_TIM_PWM_Start+0x8c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	bf14      	ite	ne
 8004110:	2301      	movne	r3, #1
 8004112:	2300      	moveq	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	e008      	b.n	800412a <HAL_TIM_PWM_Start+0x9e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	bf14      	ite	ne
 8004124:	2301      	movne	r3, #1
 8004126:	2300      	moveq	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e083      	b.n	800423a <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <HAL_TIM_PWM_Start+0xb6>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004140:	e023      	b.n	800418a <HAL_TIM_PWM_Start+0xfe>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b04      	cmp	r3, #4
 8004146:	d104      	bne.n	8004152 <HAL_TIM_PWM_Start+0xc6>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004150:	e01b      	b.n	800418a <HAL_TIM_PWM_Start+0xfe>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d104      	bne.n	8004162 <HAL_TIM_PWM_Start+0xd6>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004160:	e013      	b.n	800418a <HAL_TIM_PWM_Start+0xfe>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b0c      	cmp	r3, #12
 8004166:	d104      	bne.n	8004172 <HAL_TIM_PWM_Start+0xe6>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004170:	e00b      	b.n	800418a <HAL_TIM_PWM_Start+0xfe>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b10      	cmp	r3, #16
 8004176:	d104      	bne.n	8004182 <HAL_TIM_PWM_Start+0xf6>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004180:	e003      	b.n	800418a <HAL_TIM_PWM_Start+0xfe>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2202      	movs	r2, #2
 8004186:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2201      	movs	r2, #1
 8004190:	6839      	ldr	r1, [r7, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f000 ff04 	bl	8004fa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a29      	ldr	r2, [pc, #164]	; (8004244 <HAL_TIM_PWM_Start+0x1b8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00e      	beq.n	80041c0 <HAL_TIM_PWM_Start+0x134>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a28      	ldr	r2, [pc, #160]	; (8004248 <HAL_TIM_PWM_Start+0x1bc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d009      	beq.n	80041c0 <HAL_TIM_PWM_Start+0x134>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a26      	ldr	r2, [pc, #152]	; (800424c <HAL_TIM_PWM_Start+0x1c0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d004      	beq.n	80041c0 <HAL_TIM_PWM_Start+0x134>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a25      	ldr	r2, [pc, #148]	; (8004250 <HAL_TIM_PWM_Start+0x1c4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d101      	bne.n	80041c4 <HAL_TIM_PWM_Start+0x138>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <HAL_TIM_PWM_Start+0x13a>
 80041c4:	2300      	movs	r3, #0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d007      	beq.n	80041da <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a19      	ldr	r2, [pc, #100]	; (8004244 <HAL_TIM_PWM_Start+0x1b8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d009      	beq.n	80041f8 <HAL_TIM_PWM_Start+0x16c>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ec:	d004      	beq.n	80041f8 <HAL_TIM_PWM_Start+0x16c>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a15      	ldr	r2, [pc, #84]	; (8004248 <HAL_TIM_PWM_Start+0x1bc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d115      	bne.n	8004224 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	4b15      	ldr	r3, [pc, #84]	; (8004254 <HAL_TIM_PWM_Start+0x1c8>)
 8004200:	4013      	ands	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b06      	cmp	r3, #6
 8004208:	d015      	beq.n	8004236 <HAL_TIM_PWM_Start+0x1aa>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004210:	d011      	beq.n	8004236 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0201 	orr.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004222:	e008      	b.n	8004236 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	e000      	b.n	8004238 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004236:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40012c00 	.word	0x40012c00
 8004248:	40014000 	.word	0x40014000
 800424c:	40014400 	.word	0x40014400
 8004250:	40014800 	.word	0x40014800
 8004254:	00010007 	.word	0x00010007

08004258 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e097      	b.n	800439c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d106      	bne.n	8004286 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7fd f9dd 	bl	8001640 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2202      	movs	r2, #2
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800429c:	f023 0307 	bic.w	r3, r3, #7
 80042a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3304      	adds	r3, #4
 80042aa:	4619      	mov	r1, r3
 80042ac:	4610      	mov	r0, r2
 80042ae:	f000 fb63 	bl	8004978 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042da:	f023 0303 	bic.w	r3, r3, #3
 80042de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	4313      	orrs	r3, r2
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80042f8:	f023 030c 	bic.w	r3, r3, #12
 80042fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004304:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004308:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	4313      	orrs	r3, r2
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	011a      	lsls	r2, r3, #4
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	031b      	lsls	r3, r3, #12
 8004328:	4313      	orrs	r3, r2
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004336:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800433e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	4313      	orrs	r3, r2
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d110      	bne.n	80043f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d102      	bne.n	80043e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80043da:	7b7b      	ldrb	r3, [r7, #13]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d001      	beq.n	80043e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e069      	b.n	80044b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043f4:	e031      	b.n	800445a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d110      	bne.n	800441e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043fc:	7bbb      	ldrb	r3, [r7, #14]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d102      	bne.n	8004408 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004402:	7b3b      	ldrb	r3, [r7, #12]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d001      	beq.n	800440c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e055      	b.n	80044b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800441c:	e01d      	b.n	800445a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d108      	bne.n	8004436 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004424:	7bbb      	ldrb	r3, [r7, #14]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d105      	bne.n	8004436 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800442a:	7b7b      	ldrb	r3, [r7, #13]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d102      	bne.n	8004436 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004430:	7b3b      	ldrb	r3, [r7, #12]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d001      	beq.n	800443a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e03e      	b.n	80044b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2202      	movs	r2, #2
 800443e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2202      	movs	r2, #2
 8004446:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2202      	movs	r2, #2
 800444e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2202      	movs	r2, #2
 8004456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <HAL_TIM_Encoder_Start+0xc4>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b04      	cmp	r3, #4
 8004464:	d008      	beq.n	8004478 <HAL_TIM_Encoder_Start+0xd4>
 8004466:	e00f      	b.n	8004488 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2201      	movs	r2, #1
 800446e:	2100      	movs	r1, #0
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fd95 	bl	8004fa0 <TIM_CCxChannelCmd>
      break;
 8004476:	e016      	b.n	80044a6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2201      	movs	r2, #1
 800447e:	2104      	movs	r1, #4
 8004480:	4618      	mov	r0, r3
 8004482:	f000 fd8d 	bl	8004fa0 <TIM_CCxChannelCmd>
      break;
 8004486:	e00e      	b.n	80044a6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2201      	movs	r2, #1
 800448e:	2100      	movs	r1, #0
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fd85 	bl	8004fa0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2201      	movs	r2, #1
 800449c:	2104      	movs	r1, #4
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fd7e 	bl	8004fa0 <TIM_CCxChannelCmd>
      break;
 80044a4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 0201 	orr.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d122      	bne.n	800451c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d11b      	bne.n	800451c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0202 	mvn.w	r2, #2
 80044ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fa1a 	bl	800493c <HAL_TIM_IC_CaptureCallback>
 8004508:	e005      	b.n	8004516 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fa0c 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fa1d 	bl	8004950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b04      	cmp	r3, #4
 8004528:	d122      	bne.n	8004570 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b04      	cmp	r3, #4
 8004536:	d11b      	bne.n	8004570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0204 	mvn.w	r2, #4
 8004540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f9f0 	bl	800493c <HAL_TIM_IC_CaptureCallback>
 800455c:	e005      	b.n	800456a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f9e2 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f9f3 	bl	8004950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b08      	cmp	r3, #8
 800457c:	d122      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b08      	cmp	r3, #8
 800458a:	d11b      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0208 	mvn.w	r2, #8
 8004594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2204      	movs	r2, #4
 800459a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f9c6 	bl	800493c <HAL_TIM_IC_CaptureCallback>
 80045b0:	e005      	b.n	80045be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f9b8 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f9c9 	bl	8004950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b10      	cmp	r3, #16
 80045d0:	d122      	bne.n	8004618 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b10      	cmp	r3, #16
 80045de:	d11b      	bne.n	8004618 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0210 	mvn.w	r2, #16
 80045e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2208      	movs	r2, #8
 80045ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f99c 	bl	800493c <HAL_TIM_IC_CaptureCallback>
 8004604:	e005      	b.n	8004612 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f98e 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f99f 	bl	8004950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b01      	cmp	r3, #1
 8004624:	d10e      	bne.n	8004644 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b01      	cmp	r3, #1
 8004632:	d107      	bne.n	8004644 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0201 	mvn.w	r2, #1
 800463c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fc fea2 	bl	8001388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464e:	2b80      	cmp	r3, #128	; 0x80
 8004650:	d10e      	bne.n	8004670 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465c:	2b80      	cmp	r3, #128	; 0x80
 800465e:	d107      	bne.n	8004670 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fe44 	bl	80052f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800467e:	d10e      	bne.n	800469e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468a:	2b80      	cmp	r3, #128	; 0x80
 800468c:	d107      	bne.n	800469e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fe37 	bl	800530c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d10e      	bne.n	80046ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b6:	2b40      	cmp	r3, #64	; 0x40
 80046b8:	d107      	bne.n	80046ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f94d 	bl	8004964 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d10e      	bne.n	80046f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b20      	cmp	r3, #32
 80046e4:	d107      	bne.n	80046f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f06f 0220 	mvn.w	r2, #32
 80046ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fdf7 	bl	80052e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046f6:	bf00      	nop
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800471a:	2302      	movs	r3, #2
 800471c:	e0ff      	b.n	800491e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b14      	cmp	r3, #20
 800472a:	f200 80f0 	bhi.w	800490e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800472e:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004734:	08004789 	.word	0x08004789
 8004738:	0800490f 	.word	0x0800490f
 800473c:	0800490f 	.word	0x0800490f
 8004740:	0800490f 	.word	0x0800490f
 8004744:	080047c9 	.word	0x080047c9
 8004748:	0800490f 	.word	0x0800490f
 800474c:	0800490f 	.word	0x0800490f
 8004750:	0800490f 	.word	0x0800490f
 8004754:	0800480b 	.word	0x0800480b
 8004758:	0800490f 	.word	0x0800490f
 800475c:	0800490f 	.word	0x0800490f
 8004760:	0800490f 	.word	0x0800490f
 8004764:	0800484b 	.word	0x0800484b
 8004768:	0800490f 	.word	0x0800490f
 800476c:	0800490f 	.word	0x0800490f
 8004770:	0800490f 	.word	0x0800490f
 8004774:	0800488d 	.word	0x0800488d
 8004778:	0800490f 	.word	0x0800490f
 800477c:	0800490f 	.word	0x0800490f
 8004780:	0800490f 	.word	0x0800490f
 8004784:	080048cd 	.word	0x080048cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68b9      	ldr	r1, [r7, #8]
 800478e:	4618      	mov	r0, r3
 8004790:	f000 f960 	bl	8004a54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0208 	orr.w	r2, r2, #8
 80047a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699a      	ldr	r2, [r3, #24]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0204 	bic.w	r2, r2, #4
 80047b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6999      	ldr	r1, [r3, #24]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	619a      	str	r2, [r3, #24]
      break;
 80047c6:	e0a5      	b.n	8004914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68b9      	ldr	r1, [r7, #8]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 f9c6 	bl	8004b60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699a      	ldr	r2, [r3, #24]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699a      	ldr	r2, [r3, #24]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6999      	ldr	r1, [r3, #24]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	021a      	lsls	r2, r3, #8
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	619a      	str	r2, [r3, #24]
      break;
 8004808:	e084      	b.n	8004914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68b9      	ldr	r1, [r7, #8]
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fa25 	bl	8004c60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69da      	ldr	r2, [r3, #28]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0208 	orr.w	r2, r2, #8
 8004824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69da      	ldr	r2, [r3, #28]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0204 	bic.w	r2, r2, #4
 8004834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69d9      	ldr	r1, [r3, #28]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	61da      	str	r2, [r3, #28]
      break;
 8004848:	e064      	b.n	8004914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68b9      	ldr	r1, [r7, #8]
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fa83 	bl	8004d5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69da      	ldr	r2, [r3, #28]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69da      	ldr	r2, [r3, #28]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69d9      	ldr	r1, [r3, #28]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	021a      	lsls	r2, r3, #8
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	61da      	str	r2, [r3, #28]
      break;
 800488a:	e043      	b.n	8004914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fac6 	bl	8004e24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0208 	orr.w	r2, r2, #8
 80048a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0204 	bic.w	r2, r2, #4
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048ca:	e023      	b.n	8004914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68b9      	ldr	r1, [r7, #8]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fb04 	bl	8004ee0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	021a      	lsls	r2, r3, #8
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800490c:	e002      	b.n	8004914 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	75fb      	strb	r3, [r7, #23]
      break;
 8004912:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800491c:	7dfb      	ldrb	r3, [r7, #23]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop

08004928 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a2e      	ldr	r2, [pc, #184]	; (8004a44 <TIM_Base_SetConfig+0xcc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <TIM_Base_SetConfig+0x20>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004996:	d108      	bne.n	80049aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a25      	ldr	r2, [pc, #148]	; (8004a44 <TIM_Base_SetConfig+0xcc>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00f      	beq.n	80049d2 <TIM_Base_SetConfig+0x5a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b8:	d00b      	beq.n	80049d2 <TIM_Base_SetConfig+0x5a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a22      	ldr	r2, [pc, #136]	; (8004a48 <TIM_Base_SetConfig+0xd0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d007      	beq.n	80049d2 <TIM_Base_SetConfig+0x5a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a21      	ldr	r2, [pc, #132]	; (8004a4c <TIM_Base_SetConfig+0xd4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d003      	beq.n	80049d2 <TIM_Base_SetConfig+0x5a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a20      	ldr	r2, [pc, #128]	; (8004a50 <TIM_Base_SetConfig+0xd8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d108      	bne.n	80049e4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a0e      	ldr	r2, [pc, #56]	; (8004a44 <TIM_Base_SetConfig+0xcc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00b      	beq.n	8004a28 <TIM_Base_SetConfig+0xb0>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a0d      	ldr	r2, [pc, #52]	; (8004a48 <TIM_Base_SetConfig+0xd0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d007      	beq.n	8004a28 <TIM_Base_SetConfig+0xb0>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a0c      	ldr	r2, [pc, #48]	; (8004a4c <TIM_Base_SetConfig+0xd4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_Base_SetConfig+0xb0>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a0b      	ldr	r2, [pc, #44]	; (8004a50 <TIM_Base_SetConfig+0xd8>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d103      	bne.n	8004a30 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	691a      	ldr	r2, [r3, #16]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	615a      	str	r2, [r3, #20]
}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40012c00 	.word	0x40012c00
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	40014400 	.word	0x40014400
 8004a50:	40014800 	.word	0x40014800

08004a54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	f023 0201 	bic.w	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0303 	bic.w	r3, r3, #3
 8004a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f023 0302 	bic.w	r3, r3, #2
 8004aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a28      	ldr	r2, [pc, #160]	; (8004b50 <TIM_OC1_SetConfig+0xfc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00b      	beq.n	8004acc <TIM_OC1_SetConfig+0x78>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a27      	ldr	r2, [pc, #156]	; (8004b54 <TIM_OC1_SetConfig+0x100>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d007      	beq.n	8004acc <TIM_OC1_SetConfig+0x78>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a26      	ldr	r2, [pc, #152]	; (8004b58 <TIM_OC1_SetConfig+0x104>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d003      	beq.n	8004acc <TIM_OC1_SetConfig+0x78>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a25      	ldr	r2, [pc, #148]	; (8004b5c <TIM_OC1_SetConfig+0x108>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d10c      	bne.n	8004ae6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f023 0308 	bic.w	r3, r3, #8
 8004ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f023 0304 	bic.w	r3, r3, #4
 8004ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a19      	ldr	r2, [pc, #100]	; (8004b50 <TIM_OC1_SetConfig+0xfc>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00b      	beq.n	8004b06 <TIM_OC1_SetConfig+0xb2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a18      	ldr	r2, [pc, #96]	; (8004b54 <TIM_OC1_SetConfig+0x100>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d007      	beq.n	8004b06 <TIM_OC1_SetConfig+0xb2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a17      	ldr	r2, [pc, #92]	; (8004b58 <TIM_OC1_SetConfig+0x104>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d003      	beq.n	8004b06 <TIM_OC1_SetConfig+0xb2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a16      	ldr	r2, [pc, #88]	; (8004b5c <TIM_OC1_SetConfig+0x108>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d111      	bne.n	8004b2a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	621a      	str	r2, [r3, #32]
}
 8004b44:	bf00      	nop
 8004b46:	371c      	adds	r7, #28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	40012c00 	.word	0x40012c00
 8004b54:	40014000 	.word	0x40014000
 8004b58:	40014400 	.word	0x40014400
 8004b5c:	40014800 	.word	0x40014800

08004b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	f023 0210 	bic.w	r2, r3, #16
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	021b      	lsls	r3, r3, #8
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f023 0320 	bic.w	r3, r3, #32
 8004bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a24      	ldr	r2, [pc, #144]	; (8004c50 <TIM_OC2_SetConfig+0xf0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d10d      	bne.n	8004be0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <TIM_OC2_SetConfig+0xf0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00b      	beq.n	8004c00 <TIM_OC2_SetConfig+0xa0>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a1a      	ldr	r2, [pc, #104]	; (8004c54 <TIM_OC2_SetConfig+0xf4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d007      	beq.n	8004c00 <TIM_OC2_SetConfig+0xa0>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a19      	ldr	r2, [pc, #100]	; (8004c58 <TIM_OC2_SetConfig+0xf8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d003      	beq.n	8004c00 <TIM_OC2_SetConfig+0xa0>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a18      	ldr	r2, [pc, #96]	; (8004c5c <TIM_OC2_SetConfig+0xfc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d113      	bne.n	8004c28 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c06:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c0e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	621a      	str	r2, [r3, #32]
}
 8004c42:	bf00      	nop
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40012c00 	.word	0x40012c00
 8004c54:	40014000 	.word	0x40014000
 8004c58:	40014400 	.word	0x40014400
 8004c5c:	40014800 	.word	0x40014800

08004c60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0303 	bic.w	r3, r3, #3
 8004c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	021b      	lsls	r3, r3, #8
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a23      	ldr	r2, [pc, #140]	; (8004d4c <TIM_OC3_SetConfig+0xec>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d10d      	bne.n	8004cde <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	021b      	lsls	r3, r3, #8
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cdc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a1a      	ldr	r2, [pc, #104]	; (8004d4c <TIM_OC3_SetConfig+0xec>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00b      	beq.n	8004cfe <TIM_OC3_SetConfig+0x9e>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a19      	ldr	r2, [pc, #100]	; (8004d50 <TIM_OC3_SetConfig+0xf0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d007      	beq.n	8004cfe <TIM_OC3_SetConfig+0x9e>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a18      	ldr	r2, [pc, #96]	; (8004d54 <TIM_OC3_SetConfig+0xf4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d003      	beq.n	8004cfe <TIM_OC3_SetConfig+0x9e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a17      	ldr	r2, [pc, #92]	; (8004d58 <TIM_OC3_SetConfig+0xf8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d113      	bne.n	8004d26 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	621a      	str	r2, [r3, #32]
}
 8004d40:	bf00      	nop
 8004d42:	371c      	adds	r7, #28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	40012c00 	.word	0x40012c00
 8004d50:	40014000 	.word	0x40014000
 8004d54:	40014400 	.word	0x40014400
 8004d58:	40014800 	.word	0x40014800

08004d5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	031b      	lsls	r3, r3, #12
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a16      	ldr	r2, [pc, #88]	; (8004e14 <TIM_OC4_SetConfig+0xb8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00b      	beq.n	8004dd8 <TIM_OC4_SetConfig+0x7c>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a15      	ldr	r2, [pc, #84]	; (8004e18 <TIM_OC4_SetConfig+0xbc>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d007      	beq.n	8004dd8 <TIM_OC4_SetConfig+0x7c>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a14      	ldr	r2, [pc, #80]	; (8004e1c <TIM_OC4_SetConfig+0xc0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_OC4_SetConfig+0x7c>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a13      	ldr	r2, [pc, #76]	; (8004e20 <TIM_OC4_SetConfig+0xc4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d109      	bne.n	8004dec <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	019b      	lsls	r3, r3, #6
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	621a      	str	r2, [r3, #32]
}
 8004e06:	bf00      	nop
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40012c00 	.word	0x40012c00
 8004e18:	40014000 	.word	0x40014000
 8004e1c:	40014400 	.word	0x40014400
 8004e20:	40014800 	.word	0x40014800

08004e24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	041b      	lsls	r3, r3, #16
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a15      	ldr	r2, [pc, #84]	; (8004ed0 <TIM_OC5_SetConfig+0xac>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00b      	beq.n	8004e96 <TIM_OC5_SetConfig+0x72>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a14      	ldr	r2, [pc, #80]	; (8004ed4 <TIM_OC5_SetConfig+0xb0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d007      	beq.n	8004e96 <TIM_OC5_SetConfig+0x72>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a13      	ldr	r2, [pc, #76]	; (8004ed8 <TIM_OC5_SetConfig+0xb4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d003      	beq.n	8004e96 <TIM_OC5_SetConfig+0x72>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a12      	ldr	r2, [pc, #72]	; (8004edc <TIM_OC5_SetConfig+0xb8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d109      	bne.n	8004eaa <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	621a      	str	r2, [r3, #32]
}
 8004ec4:	bf00      	nop
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	40012c00 	.word	0x40012c00
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40014400 	.word	0x40014400
 8004edc:	40014800 	.word	0x40014800

08004ee0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	021b      	lsls	r3, r3, #8
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	051b      	lsls	r3, r3, #20
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a16      	ldr	r2, [pc, #88]	; (8004f90 <TIM_OC6_SetConfig+0xb0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00b      	beq.n	8004f54 <TIM_OC6_SetConfig+0x74>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a15      	ldr	r2, [pc, #84]	; (8004f94 <TIM_OC6_SetConfig+0xb4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d007      	beq.n	8004f54 <TIM_OC6_SetConfig+0x74>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a14      	ldr	r2, [pc, #80]	; (8004f98 <TIM_OC6_SetConfig+0xb8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_OC6_SetConfig+0x74>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a13      	ldr	r2, [pc, #76]	; (8004f9c <TIM_OC6_SetConfig+0xbc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d109      	bne.n	8004f68 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	029b      	lsls	r3, r3, #10
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40014000 	.word	0x40014000
 8004f98:	40014400 	.word	0x40014400
 8004f9c:	40014800 	.word	0x40014800

08004fa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a1a      	ldr	r2, [r3, #32]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	401a      	ands	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a1a      	ldr	r2, [r3, #32]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	621a      	str	r2, [r3, #32]
}
 8004fde:	bf00      	nop
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
	...

08004fec <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d109      	bne.n	8005010 <HAL_TIMEx_PWMN_Start+0x24>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b01      	cmp	r3, #1
 8005006:	bf14      	ite	ne
 8005008:	2301      	movne	r3, #1
 800500a:	2300      	moveq	r3, #0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	e022      	b.n	8005056 <HAL_TIMEx_PWMN_Start+0x6a>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b04      	cmp	r3, #4
 8005014:	d109      	bne.n	800502a <HAL_TIMEx_PWMN_Start+0x3e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b01      	cmp	r3, #1
 8005020:	bf14      	ite	ne
 8005022:	2301      	movne	r3, #1
 8005024:	2300      	moveq	r3, #0
 8005026:	b2db      	uxtb	r3, r3
 8005028:	e015      	b.n	8005056 <HAL_TIMEx_PWMN_Start+0x6a>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b08      	cmp	r3, #8
 800502e:	d109      	bne.n	8005044 <HAL_TIMEx_PWMN_Start+0x58>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b01      	cmp	r3, #1
 800503a:	bf14      	ite	ne
 800503c:	2301      	movne	r3, #1
 800503e:	2300      	moveq	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	e008      	b.n	8005056 <HAL_TIMEx_PWMN_Start+0x6a>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	bf14      	ite	ne
 8005050:	2301      	movne	r3, #1
 8005052:	2300      	moveq	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e05a      	b.n	8005114 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d104      	bne.n	800506e <HAL_TIMEx_PWMN_Start+0x82>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800506c:	e013      	b.n	8005096 <HAL_TIMEx_PWMN_Start+0xaa>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b04      	cmp	r3, #4
 8005072:	d104      	bne.n	800507e <HAL_TIMEx_PWMN_Start+0x92>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800507c:	e00b      	b.n	8005096 <HAL_TIMEx_PWMN_Start+0xaa>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b08      	cmp	r3, #8
 8005082:	d104      	bne.n	800508e <HAL_TIMEx_PWMN_Start+0xa2>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800508c:	e003      	b.n	8005096 <HAL_TIMEx_PWMN_Start+0xaa>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2202      	movs	r2, #2
 8005092:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2204      	movs	r2, #4
 800509c:	6839      	ldr	r1, [r7, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 f93e 	bl	8005320 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a18      	ldr	r2, [pc, #96]	; (800511c <HAL_TIMEx_PWMN_Start+0x130>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d009      	beq.n	80050d2 <HAL_TIMEx_PWMN_Start+0xe6>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c6:	d004      	beq.n	80050d2 <HAL_TIMEx_PWMN_Start+0xe6>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a14      	ldr	r2, [pc, #80]	; (8005120 <HAL_TIMEx_PWMN_Start+0x134>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d115      	bne.n	80050fe <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	4b12      	ldr	r3, [pc, #72]	; (8005124 <HAL_TIMEx_PWMN_Start+0x138>)
 80050da:	4013      	ands	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b06      	cmp	r3, #6
 80050e2:	d015      	beq.n	8005110 <HAL_TIMEx_PWMN_Start+0x124>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ea:	d011      	beq.n	8005110 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fc:	e008      	b.n	8005110 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0201 	orr.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	e000      	b.n	8005112 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005110:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40012c00 	.word	0x40012c00
 8005120:	40014000 	.word	0x40014000
 8005124:	00010007 	.word	0x00010007

08005128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005138:	2b01      	cmp	r3, #1
 800513a:	d101      	bne.n	8005140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800513c:	2302      	movs	r3, #2
 800513e:	e04f      	b.n	80051e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a21      	ldr	r2, [pc, #132]	; (80051ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d108      	bne.n	800517c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005170:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005182:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a14      	ldr	r2, [pc, #80]	; (80051ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d009      	beq.n	80051b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a8:	d004      	beq.n	80051b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a10      	ldr	r2, [pc, #64]	; (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d10c      	bne.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40012c00 	.word	0x40012c00
 80051f0:	40014000 	.word	0x40014000

080051f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800520c:	2302      	movs	r3, #2
 800520e:	e060      	b.n	80052d2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	041b      	lsls	r3, r3, #16
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a14      	ldr	r2, [pc, #80]	; (80052e0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d115      	bne.n	80052c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	051b      	lsls	r3, r3, #20
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40012c00 	.word	0x40012c00

080052e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	2204      	movs	r2, #4
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1a      	ldr	r2, [r3, #32]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	43db      	mvns	r3, r3
 8005342:	401a      	ands	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	fa01 f303 	lsl.w	r3, r1, r3
 8005358:	431a      	orrs	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b082      	sub	sp, #8
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e040      	b.n	80053fe <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005380:	2b00      	cmp	r3, #0
 8005382:	d106      	bne.n	8005392 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7fc fa15 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2224      	movs	r2, #36	; 0x24
 8005396:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0201 	bic.w	r2, r2, #1
 80053a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 fd27 	bl	8005dfc <UART_SetConfig>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e022      	b.n	80053fe <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fe51 	bl	8006068 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0201 	orr.w	r2, r2, #1
 80053f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fed8 	bl	80061ac <UART_CheckIdleState>
 80053fc:	4603      	mov	r3, r0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b08a      	sub	sp, #40	; 0x28
 800540a:	af02      	add	r7, sp, #8
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	603b      	str	r3, [r7, #0]
 8005412:	4613      	mov	r3, r2
 8005414:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800541a:	2b20      	cmp	r3, #32
 800541c:	d178      	bne.n	8005510 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <HAL_UART_Transmit+0x24>
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e071      	b.n	8005512 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2221      	movs	r2, #33	; 0x21
 800543a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800543c:	f7fc fc0e 	bl	8001c5c <HAL_GetTick>
 8005440:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	88fa      	ldrh	r2, [r7, #6]
 8005446:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	88fa      	ldrh	r2, [r7, #6]
 800544e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545a:	d108      	bne.n	800546e <HAL_UART_Transmit+0x68>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d104      	bne.n	800546e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005464:	2300      	movs	r3, #0
 8005466:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	e003      	b.n	8005476 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005476:	e030      	b.n	80054da <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	2200      	movs	r2, #0
 8005480:	2180      	movs	r1, #128	; 0x80
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 ff3a 	bl	80062fc <UART_WaitOnFlagUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d004      	beq.n	8005498 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2220      	movs	r2, #32
 8005492:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e03c      	b.n	8005512 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10b      	bne.n	80054b6 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	881a      	ldrh	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054aa:	b292      	uxth	r2, r2
 80054ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	3302      	adds	r3, #2
 80054b2:	61bb      	str	r3, [r7, #24]
 80054b4:	e008      	b.n	80054c8 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	781a      	ldrb	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	b292      	uxth	r2, r2
 80054c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	3301      	adds	r3, #1
 80054c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1c8      	bne.n	8005478 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2200      	movs	r2, #0
 80054ee:	2140      	movs	r1, #64	; 0x40
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 ff03 	bl	80062fc <UART_WaitOnFlagUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d004      	beq.n	8005506 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e005      	b.n	8005512 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2220      	movs	r2, #32
 800550a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	e000      	b.n	8005512 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005510:	2302      	movs	r3, #2
  }
}
 8005512:	4618      	mov	r0, r3
 8005514:	3720      	adds	r7, #32
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08a      	sub	sp, #40	; 0x28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	4613      	mov	r3, r2
 8005528:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800552e:	2b20      	cmp	r3, #32
 8005530:	d168      	bne.n	8005604 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <HAL_UART_Transmit_DMA+0x22>
 8005538:	88fb      	ldrh	r3, [r7, #6]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e061      	b.n	8005606 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	88fa      	ldrh	r2, [r7, #6]
 800554c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2221      	movs	r2, #33	; 0x21
 8005564:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556a:	2b00      	cmp	r3, #0
 800556c:	d027      	beq.n	80055be <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005572:	4a27      	ldr	r2, [pc, #156]	; (8005610 <HAL_UART_Transmit_DMA+0xf4>)
 8005574:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557a:	4a26      	ldr	r2, [pc, #152]	; (8005614 <HAL_UART_Transmit_DMA+0xf8>)
 800557c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005582:	4a25      	ldr	r2, [pc, #148]	; (8005618 <HAL_UART_Transmit_DMA+0xfc>)
 8005584:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558a:	2200      	movs	r2, #0
 800558c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005596:	4619      	mov	r1, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3328      	adds	r3, #40	; 0x28
 800559e:	461a      	mov	r2, r3
 80055a0:	88fb      	ldrh	r3, [r7, #6]
 80055a2:	f7fc fcbf 	bl	8001f24 <HAL_DMA_Start_IT>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d008      	beq.n	80055be <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2210      	movs	r2, #16
 80055b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e023      	b.n	8005606 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    huart->gState = HAL_UART_STATE_READY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2220      	movs	r2, #32
 80055c2:	67da      	str	r2, [r3, #124]	; 0x7c
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2240      	movs	r2, #64	; 0x40
 80055ca:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3308      	adds	r3, #8
 80055d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	613b      	str	r3, [r7, #16]
   return(result);
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3308      	adds	r3, #8
 80055ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ec:	623a      	str	r2, [r7, #32]
 80055ee:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	69f9      	ldr	r1, [r7, #28]
 80055f2:	6a3a      	ldr	r2, [r7, #32]
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e5      	bne.n	80055cc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	e000      	b.n	8005606 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005604:	2302      	movs	r3, #2
  }
}
 8005606:	4618      	mov	r0, r3
 8005608:	3728      	adds	r7, #40	; 0x28
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	08006621 	.word	0x08006621
 8005614:	080066b5 	.word	0x080066b5
 8005618:	08006835 	.word	0x08006835

0800561c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08a      	sub	sp, #40	; 0x28
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	4613      	mov	r3, r2
 8005628:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005630:	2b20      	cmp	r3, #32
 8005632:	d132      	bne.n	800569a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <HAL_UART_Receive_DMA+0x24>
 800563a:	88fb      	ldrh	r3, [r7, #6]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e02b      	b.n	800569c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d018      	beq.n	800568a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	613b      	str	r3, [r7, #16]
   return(result);
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	623b      	str	r3, [r7, #32]
 8005678:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	69f9      	ldr	r1, [r7, #28]
 800567c:	6a3a      	ldr	r2, [r7, #32]
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	61bb      	str	r3, [r7, #24]
   return(result);
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e6      	bne.n	8005658 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800568a:	88fb      	ldrh	r3, [r7, #6]
 800568c:	461a      	mov	r2, r3
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 fe9b 	bl	80063cc <UART_Start_Receive_DMA>
 8005696:	4603      	mov	r3, r0
 8005698:	e000      	b.n	800569c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800569a:	2302      	movs	r3, #2
  }
}
 800569c:	4618      	mov	r0, r3
 800569e:	3728      	adds	r7, #40	; 0x28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b090      	sub	sp, #64	; 0x40
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056b8:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c4:	2b80      	cmp	r3, #128	; 0x80
 80056c6:	d139      	bne.n	800573c <HAL_UART_DMAStop+0x98>
 80056c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ca:	2b21      	cmp	r3, #33	; 0x21
 80056cc:	d136      	bne.n	800573c <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3308      	adds	r3, #8
 80056d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056e4:	637b      	str	r3, [r7, #52]	; 0x34
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3308      	adds	r3, #8
 80056ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056f6:	e841 2300 	strex	r3, r2, [r1]
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1e5      	bne.n	80056ce <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005706:	2b00      	cmp	r3, #0
 8005708:	d015      	beq.n	8005736 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570e:	4618      	mov	r0, r3
 8005710:	f7fc fc67 	bl	8001fe2 <HAL_DMA_Abort>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00d      	beq.n	8005736 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571e:	4618      	mov	r0, r3
 8005720:	f7fc fd79 	bl	8002216 <HAL_DMA_GetError>
 8005724:	4603      	mov	r3, r0
 8005726:	2b20      	cmp	r3, #32
 8005728:	d105      	bne.n	8005736 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2210      	movs	r2, #16
 800572e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e044      	b.n	80057c0 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fee8 	bl	800650c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	d139      	bne.n	80057be <HAL_UART_DMAStop+0x11a>
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	2b22      	cmp	r3, #34	; 0x22
 800574e:	d136      	bne.n	80057be <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3308      	adds	r3, #8
 8005756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	e853 3f00 	ldrex	r3, [r3]
 800575e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005766:	633b      	str	r3, [r7, #48]	; 0x30
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3308      	adds	r3, #8
 800576e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005770:	61ba      	str	r2, [r7, #24]
 8005772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	6979      	ldr	r1, [r7, #20]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	e841 2300 	strex	r3, r2, [r1]
 800577c:	613b      	str	r3, [r7, #16]
   return(result);
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e5      	bne.n	8005750 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005788:	2b00      	cmp	r3, #0
 800578a:	d015      	beq.n	80057b8 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005790:	4618      	mov	r0, r3
 8005792:	f7fc fc26 	bl	8001fe2 <HAL_DMA_Abort>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00d      	beq.n	80057b8 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7fc fd38 	bl	8002216 <HAL_DMA_GetError>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	d105      	bne.n	80057b8 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2210      	movs	r2, #16
 80057b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e003      	b.n	80057c0 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fecd 	bl	8006558 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3740      	adds	r7, #64	; 0x40
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b0ba      	sub	sp, #232	; 0xe8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80057f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80057f6:	4013      	ands	r3, r2
 80057f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80057fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005800:	2b00      	cmp	r3, #0
 8005802:	d115      	bne.n	8005830 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00f      	beq.n	8005830 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b00      	cmp	r3, #0
 800581a:	d009      	beq.n	8005830 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 82ab 	beq.w	8005d7c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	4798      	blx	r3
      }
      return;
 800582e:	e2a5      	b.n	8005d7c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005830:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8117 	beq.w	8005a68 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800583a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005846:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800584a:	4b85      	ldr	r3, [pc, #532]	; (8005a60 <HAL_UART_IRQHandler+0x298>)
 800584c:	4013      	ands	r3, r2
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 810a 	beq.w	8005a68 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d011      	beq.n	8005884 <HAL_UART_IRQHandler+0xbc>
 8005860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00b      	beq.n	8005884 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2201      	movs	r2, #1
 8005872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800587a:	f043 0201 	orr.w	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d011      	beq.n	80058b4 <HAL_UART_IRQHandler+0xec>
 8005890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00b      	beq.n	80058b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2202      	movs	r2, #2
 80058a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058aa:	f043 0204 	orr.w	r2, r3, #4
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d011      	beq.n	80058e4 <HAL_UART_IRQHandler+0x11c>
 80058c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00b      	beq.n	80058e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2204      	movs	r2, #4
 80058d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058da:	f043 0202 	orr.w	r2, r3, #2
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d017      	beq.n	8005920 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d105      	bne.n	8005908 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80058fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005900:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00b      	beq.n	8005920 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2208      	movs	r2, #8
 800590e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005916:	f043 0208 	orr.w	r2, r3, #8
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005928:	2b00      	cmp	r3, #0
 800592a:	d012      	beq.n	8005952 <HAL_UART_IRQHandler+0x18a>
 800592c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005930:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00c      	beq.n	8005952 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005940:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005948:	f043 0220 	orr.w	r2, r3, #32
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8211 	beq.w	8005d80 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800595e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00d      	beq.n	8005986 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800596a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d007      	beq.n	8005986 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800598c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	d005      	beq.n	80059aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800599e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d04f      	beq.n	8005a4a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fdd4 	bl	8006558 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ba:	2b40      	cmp	r3, #64	; 0x40
 80059bc:	d141      	bne.n	8005a42 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3308      	adds	r3, #8
 80059c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3308      	adds	r3, #8
 80059e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1d9      	bne.n	80059be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d013      	beq.n	8005a3a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a16:	4a13      	ldr	r2, [pc, #76]	; (8005a64 <HAL_UART_IRQHandler+0x29c>)
 8005a18:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fc fb18 	bl	8002054 <HAL_DMA_Abort_IT>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d017      	beq.n	8005a5a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a34:	4610      	mov	r0, r2
 8005a36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a38:	e00f      	b.n	8005a5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f9c8 	bl	8005dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a40:	e00b      	b.n	8005a5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f9c4 	bl	8005dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a48:	e007      	b.n	8005a5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f9c0 	bl	8005dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005a58:	e192      	b.n	8005d80 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a5a:	bf00      	nop
    return;
 8005a5c:	e190      	b.n	8005d80 <HAL_UART_IRQHandler+0x5b8>
 8005a5e:	bf00      	nop
 8005a60:	04000120 	.word	0x04000120
 8005a64:	080068b3 	.word	0x080068b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	f040 814b 	bne.w	8005d08 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a76:	f003 0310 	and.w	r3, r3, #16
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 8144 	beq.w	8005d08 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a84:	f003 0310 	and.w	r3, r3, #16
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 813d 	beq.w	8005d08 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2210      	movs	r2, #16
 8005a94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa0:	2b40      	cmp	r3, #64	; 0x40
 8005aa2:	f040 80b5 	bne.w	8005c10 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ab2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 8164 	beq.w	8005d84 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	f080 815c 	bcs.w	8005d84 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ad2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	f000 8086 	beq.w	8005bee <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005aee:	e853 3f00 	ldrex	r3, [r3]
 8005af2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005af6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005afa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005afe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	461a      	mov	r2, r3
 8005b08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b10:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b1c:	e841 2300 	strex	r3, r2, [r1]
 8005b20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1da      	bne.n	8005ae2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3308      	adds	r3, #8
 8005b32:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b36:	e853 3f00 	ldrex	r3, [r3]
 8005b3a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b3e:	f023 0301 	bic.w	r3, r3, #1
 8005b42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b50:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b54:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b5c:	e841 2300 	strex	r3, r2, [r1]
 8005b60:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e1      	bne.n	8005b2c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3308      	adds	r3, #8
 8005b88:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b8c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e3      	bne.n	8005b68 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bbe:	f023 0310 	bic.w	r3, r3, #16
 8005bc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bd2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bd8:	e841 2300 	strex	r3, r2, [r1]
 8005bdc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e4      	bne.n	8005bae <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fc f9fa 	bl	8001fe2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	4619      	mov	r1, r3
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f8eb 	bl	8005de4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c0e:	e0b9      	b.n	8005d84 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 80ab 	beq.w	8005d88 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005c32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 80a6 	beq.w	8005d88 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	e853 3f00 	ldrex	r3, [r3]
 8005c48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c60:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e4      	bne.n	8005c3c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3308      	adds	r3, #8
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	623b      	str	r3, [r7, #32]
   return(result);
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	f023 0301 	bic.w	r3, r3, #1
 8005c88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3308      	adds	r3, #8
 8005c92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c96:	633a      	str	r2, [r7, #48]	; 0x30
 8005c98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e3      	bne.n	8005c72 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	e853 3f00 	ldrex	r3, [r3]
 8005cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0310 	bic.w	r3, r3, #16
 8005cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ce0:	61fb      	str	r3, [r7, #28]
 8005ce2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	69b9      	ldr	r1, [r7, #24]
 8005ce6:	69fa      	ldr	r2, [r7, #28]
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	617b      	str	r3, [r7, #20]
   return(result);
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e4      	bne.n	8005cbe <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f86f 	bl	8005de4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d06:	e03f      	b.n	8005d88 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00e      	beq.n	8005d32 <HAL_UART_IRQHandler+0x56a>
 8005d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d008      	beq.n	8005d32 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fe01 	bl	8006932 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d30:	e02d      	b.n	8005d8e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00e      	beq.n	8005d5c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d008      	beq.n	8005d5c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d01c      	beq.n	8005d8c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	4798      	blx	r3
    }
    return;
 8005d5a:	e017      	b.n	8005d8c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d012      	beq.n	8005d8e <HAL_UART_IRQHandler+0x5c6>
 8005d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00c      	beq.n	8005d8e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fdb2 	bl	80068de <UART_EndTransmit_IT>
    return;
 8005d7a:	e008      	b.n	8005d8e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005d7c:	bf00      	nop
 8005d7e:	e006      	b.n	8005d8e <HAL_UART_IRQHandler+0x5c6>
    return;
 8005d80:	bf00      	nop
 8005d82:	e004      	b.n	8005d8e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005d84:	bf00      	nop
 8005d86:	e002      	b.n	8005d8e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005d88:	bf00      	nop
 8005d8a:	e000      	b.n	8005d8e <HAL_UART_IRQHandler+0x5c6>
    return;
 8005d8c:	bf00      	nop
  }

}
 8005d8e:	37e8      	adds	r7, #232	; 0xe8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	431a      	orrs	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	4b8a      	ldr	r3, [pc, #552]	; (8006050 <UART_SetConfig+0x254>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6812      	ldr	r2, [r2, #0]
 8005e2e:	6979      	ldr	r1, [r7, #20]
 8005e30:	430b      	orrs	r3, r1
 8005e32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a78      	ldr	r2, [pc, #480]	; (8006054 <UART_SetConfig+0x258>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d120      	bne.n	8005eba <UART_SetConfig+0xbe>
 8005e78:	4b77      	ldr	r3, [pc, #476]	; (8006058 <UART_SetConfig+0x25c>)
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7c:	f003 0303 	and.w	r3, r3, #3
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d817      	bhi.n	8005eb4 <UART_SetConfig+0xb8>
 8005e84:	a201      	add	r2, pc, #4	; (adr r2, 8005e8c <UART_SetConfig+0x90>)
 8005e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8a:	bf00      	nop
 8005e8c:	08005e9d 	.word	0x08005e9d
 8005e90:	08005ea9 	.word	0x08005ea9
 8005e94:	08005eaf 	.word	0x08005eaf
 8005e98:	08005ea3 	.word	0x08005ea3
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	77fb      	strb	r3, [r7, #31]
 8005ea0:	e01d      	b.n	8005ede <UART_SetConfig+0xe2>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	77fb      	strb	r3, [r7, #31]
 8005ea6:	e01a      	b.n	8005ede <UART_SetConfig+0xe2>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	77fb      	strb	r3, [r7, #31]
 8005eac:	e017      	b.n	8005ede <UART_SetConfig+0xe2>
 8005eae:	2308      	movs	r3, #8
 8005eb0:	77fb      	strb	r3, [r7, #31]
 8005eb2:	e014      	b.n	8005ede <UART_SetConfig+0xe2>
 8005eb4:	2310      	movs	r3, #16
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e011      	b.n	8005ede <UART_SetConfig+0xe2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a67      	ldr	r2, [pc, #412]	; (800605c <UART_SetConfig+0x260>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d102      	bne.n	8005eca <UART_SetConfig+0xce>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	77fb      	strb	r3, [r7, #31]
 8005ec8:	e009      	b.n	8005ede <UART_SetConfig+0xe2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a64      	ldr	r2, [pc, #400]	; (8006060 <UART_SetConfig+0x264>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d102      	bne.n	8005eda <UART_SetConfig+0xde>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	77fb      	strb	r3, [r7, #31]
 8005ed8:	e001      	b.n	8005ede <UART_SetConfig+0xe2>
 8005eda:	2310      	movs	r3, #16
 8005edc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee6:	d15a      	bne.n	8005f9e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005ee8:	7ffb      	ldrb	r3, [r7, #31]
 8005eea:	2b08      	cmp	r3, #8
 8005eec:	d827      	bhi.n	8005f3e <UART_SetConfig+0x142>
 8005eee:	a201      	add	r2, pc, #4	; (adr r2, 8005ef4 <UART_SetConfig+0xf8>)
 8005ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	08005f21 	.word	0x08005f21
 8005efc:	08005f29 	.word	0x08005f29
 8005f00:	08005f3f 	.word	0x08005f3f
 8005f04:	08005f2f 	.word	0x08005f2f
 8005f08:	08005f3f 	.word	0x08005f3f
 8005f0c:	08005f3f 	.word	0x08005f3f
 8005f10:	08005f3f 	.word	0x08005f3f
 8005f14:	08005f37 	.word	0x08005f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f18:	f7fd fd92 	bl	8003a40 <HAL_RCC_GetPCLK1Freq>
 8005f1c:	61b8      	str	r0, [r7, #24]
        break;
 8005f1e:	e013      	b.n	8005f48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f20:	f7fd fdb0 	bl	8003a84 <HAL_RCC_GetPCLK2Freq>
 8005f24:	61b8      	str	r0, [r7, #24]
        break;
 8005f26:	e00f      	b.n	8005f48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f28:	4b4e      	ldr	r3, [pc, #312]	; (8006064 <UART_SetConfig+0x268>)
 8005f2a:	61bb      	str	r3, [r7, #24]
        break;
 8005f2c:	e00c      	b.n	8005f48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f2e:	f7fd fd11 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 8005f32:	61b8      	str	r0, [r7, #24]
        break;
 8005f34:	e008      	b.n	8005f48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f3a:	61bb      	str	r3, [r7, #24]
        break;
 8005f3c:	e004      	b.n	8005f48 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	77bb      	strb	r3, [r7, #30]
        break;
 8005f46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d074      	beq.n	8006038 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	005a      	lsls	r2, r3, #1
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	085b      	lsrs	r3, r3, #1
 8005f58:	441a      	add	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	2b0f      	cmp	r3, #15
 8005f68:	d916      	bls.n	8005f98 <UART_SetConfig+0x19c>
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f70:	d212      	bcs.n	8005f98 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	f023 030f 	bic.w	r3, r3, #15
 8005f7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	085b      	lsrs	r3, r3, #1
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	89fb      	ldrh	r3, [r7, #14]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	89fa      	ldrh	r2, [r7, #14]
 8005f94:	60da      	str	r2, [r3, #12]
 8005f96:	e04f      	b.n	8006038 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	77bb      	strb	r3, [r7, #30]
 8005f9c:	e04c      	b.n	8006038 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f9e:	7ffb      	ldrb	r3, [r7, #31]
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d828      	bhi.n	8005ff6 <UART_SetConfig+0x1fa>
 8005fa4:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <UART_SetConfig+0x1b0>)
 8005fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005faa:	bf00      	nop
 8005fac:	08005fd1 	.word	0x08005fd1
 8005fb0:	08005fd9 	.word	0x08005fd9
 8005fb4:	08005fe1 	.word	0x08005fe1
 8005fb8:	08005ff7 	.word	0x08005ff7
 8005fbc:	08005fe7 	.word	0x08005fe7
 8005fc0:	08005ff7 	.word	0x08005ff7
 8005fc4:	08005ff7 	.word	0x08005ff7
 8005fc8:	08005ff7 	.word	0x08005ff7
 8005fcc:	08005fef 	.word	0x08005fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fd0:	f7fd fd36 	bl	8003a40 <HAL_RCC_GetPCLK1Freq>
 8005fd4:	61b8      	str	r0, [r7, #24]
        break;
 8005fd6:	e013      	b.n	8006000 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd8:	f7fd fd54 	bl	8003a84 <HAL_RCC_GetPCLK2Freq>
 8005fdc:	61b8      	str	r0, [r7, #24]
        break;
 8005fde:	e00f      	b.n	8006000 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fe0:	4b20      	ldr	r3, [pc, #128]	; (8006064 <UART_SetConfig+0x268>)
 8005fe2:	61bb      	str	r3, [r7, #24]
        break;
 8005fe4:	e00c      	b.n	8006000 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fe6:	f7fd fcb5 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 8005fea:	61b8      	str	r0, [r7, #24]
        break;
 8005fec:	e008      	b.n	8006000 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ff2:	61bb      	str	r3, [r7, #24]
        break;
 8005ff4:	e004      	b.n	8006000 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	77bb      	strb	r3, [r7, #30]
        break;
 8005ffe:	bf00      	nop
    }

    if (pclk != 0U)
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d018      	beq.n	8006038 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	085a      	lsrs	r2, r3, #1
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	441a      	add	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	fbb2 f3f3 	udiv	r3, r2, r3
 8006018:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	2b0f      	cmp	r3, #15
 800601e:	d909      	bls.n	8006034 <UART_SetConfig+0x238>
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006026:	d205      	bcs.n	8006034 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	b29a      	uxth	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	60da      	str	r2, [r3, #12]
 8006032:	e001      	b.n	8006038 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006044:	7fbb      	ldrb	r3, [r7, #30]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3720      	adds	r7, #32
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	efff69f3 	.word	0xefff69f3
 8006054:	40013800 	.word	0x40013800
 8006058:	40021000 	.word	0x40021000
 800605c:	40004400 	.word	0x40004400
 8006060:	40004800 	.word	0x40004800
 8006064:	007a1200 	.word	0x007a1200

08006068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	f003 0308 	and.w	r3, r3, #8
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	f003 0310 	and.w	r3, r3, #16
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	f003 0320 	and.w	r3, r3, #32
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006144:	2b00      	cmp	r3, #0
 8006146:	d01a      	beq.n	800617e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006166:	d10a      	bne.n	800617e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00a      	beq.n	80061a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	605a      	str	r2, [r3, #4]
  }
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b098      	sub	sp, #96	; 0x60
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061bc:	f7fb fd4e 	bl	8001c5c <HAL_GetTick>
 80061c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0308 	and.w	r3, r3, #8
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d12e      	bne.n	800622e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061d8:	2200      	movs	r2, #0
 80061da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f88c 	bl	80062fc <UART_WaitOnFlagUntilTimeout>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d021      	beq.n	800622e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061fe:	653b      	str	r3, [r7, #80]	; 0x50
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006208:	647b      	str	r3, [r7, #68]	; 0x44
 800620a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800620e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006210:	e841 2300 	strex	r3, r2, [r1]
 8006214:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1e6      	bne.n	80061ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2220      	movs	r2, #32
 8006220:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e062      	b.n	80062f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b04      	cmp	r3, #4
 800623a:	d149      	bne.n	80062d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800623c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006244:	2200      	movs	r2, #0
 8006246:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f856 	bl	80062fc <UART_WaitOnFlagUntilTimeout>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d03c      	beq.n	80062d0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	623b      	str	r3, [r7, #32]
   return(result);
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800626a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	461a      	mov	r2, r3
 8006272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006274:	633b      	str	r3, [r7, #48]	; 0x30
 8006276:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800627a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e6      	bne.n	8006256 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3308      	adds	r3, #8
 800628e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	e853 3f00 	ldrex	r3, [r3]
 8006296:	60fb      	str	r3, [r7, #12]
   return(result);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0301 	bic.w	r3, r3, #1
 800629e:	64bb      	str	r3, [r7, #72]	; 0x48
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3308      	adds	r3, #8
 80062a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062a8:	61fa      	str	r2, [r7, #28]
 80062aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	69b9      	ldr	r1, [r7, #24]
 80062ae:	69fa      	ldr	r2, [r7, #28]
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	617b      	str	r3, [r7, #20]
   return(result);
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e5      	bne.n	8006288 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e011      	b.n	80062f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3758      	adds	r7, #88	; 0x58
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	4613      	mov	r3, r2
 800630a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800630c:	e049      	b.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006314:	d045      	beq.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006316:	f7fb fca1 	bl	8001c5c <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	429a      	cmp	r2, r3
 8006324:	d302      	bcc.n	800632c <UART_WaitOnFlagUntilTimeout+0x30>
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e048      	b.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0304 	and.w	r3, r3, #4
 800633a:	2b00      	cmp	r3, #0
 800633c:	d031      	beq.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	f003 0308 	and.w	r3, r3, #8
 8006348:	2b08      	cmp	r3, #8
 800634a:	d110      	bne.n	800636e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2208      	movs	r2, #8
 8006352:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 f8ff 	bl	8006558 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2208      	movs	r2, #8
 800635e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e029      	b.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800637c:	d111      	bne.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006386:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f8e5 	bl	8006558 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2220      	movs	r2, #32
 8006392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e00f      	b.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69da      	ldr	r2, [r3, #28]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4013      	ands	r3, r2
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	bf0c      	ite	eq
 80063b2:	2301      	moveq	r3, #1
 80063b4:	2300      	movne	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d0a6      	beq.n	800630e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b096      	sub	sp, #88	; 0x58
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	4613      	mov	r3, r2
 80063d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	88fa      	ldrh	r2, [r7, #6]
 80063e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2222      	movs	r2, #34	; 0x22
 80063f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d028      	beq.n	8006452 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006404:	4a3e      	ldr	r2, [pc, #248]	; (8006500 <UART_Start_Receive_DMA+0x134>)
 8006406:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800640c:	4a3d      	ldr	r2, [pc, #244]	; (8006504 <UART_Start_Receive_DMA+0x138>)
 800640e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006414:	4a3c      	ldr	r2, [pc, #240]	; (8006508 <UART_Start_Receive_DMA+0x13c>)
 8006416:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800641c:	2200      	movs	r2, #0
 800641e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3324      	adds	r3, #36	; 0x24
 800642a:	4619      	mov	r1, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006430:	461a      	mov	r2, r3
 8006432:	88fb      	ldrh	r3, [r7, #6]
 8006434:	f7fb fd76 	bl	8001f24 <HAL_DMA_Start_IT>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d009      	beq.n	8006452 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2210      	movs	r2, #16
 8006442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2220      	movs	r2, #32
 800644a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e051      	b.n	80064f6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d018      	beq.n	800648c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006462:	e853 3f00 	ldrex	r3, [r3]
 8006466:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800646e:	657b      	str	r3, [r7, #84]	; 0x54
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	461a      	mov	r2, r3
 8006476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006478:	64bb      	str	r3, [r7, #72]	; 0x48
 800647a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800647e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006480:	e841 2300 	strex	r3, r2, [r1]
 8006484:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e6      	bne.n	800645a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3308      	adds	r3, #8
 8006492:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006496:	e853 3f00 	ldrex	r3, [r3]
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	f043 0301 	orr.w	r3, r3, #1
 80064a2:	653b      	str	r3, [r7, #80]	; 0x50
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3308      	adds	r3, #8
 80064aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064ac:	637a      	str	r2, [r7, #52]	; 0x34
 80064ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064b4:	e841 2300 	strex	r3, r2, [r1]
 80064b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e5      	bne.n	800648c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3308      	adds	r3, #8
 80064c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	e853 3f00 	ldrex	r3, [r3]
 80064ce:	613b      	str	r3, [r7, #16]
   return(result);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3308      	adds	r3, #8
 80064de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064e0:	623a      	str	r2, [r7, #32]
 80064e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e4:	69f9      	ldr	r1, [r7, #28]
 80064e6:	6a3a      	ldr	r2, [r7, #32]
 80064e8:	e841 2300 	strex	r3, r2, [r1]
 80064ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1e5      	bne.n	80064c0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3758      	adds	r7, #88	; 0x58
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	080066d1 	.word	0x080066d1
 8006504:	080067f7 	.word	0x080067f7
 8006508:	08006835 	.word	0x08006835

0800650c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800650c:	b480      	push	{r7}
 800650e:	b089      	sub	sp, #36	; 0x24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	e853 3f00 	ldrex	r3, [r3]
 8006520:	60bb      	str	r3, [r7, #8]
   return(result);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006528:	61fb      	str	r3, [r7, #28]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	6979      	ldr	r1, [r7, #20]
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	613b      	str	r3, [r7, #16]
   return(result);
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e6      	bne.n	8006514 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2220      	movs	r2, #32
 800654a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800654c:	bf00      	nop
 800654e:	3724      	adds	r7, #36	; 0x24
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006558:	b480      	push	{r7}
 800655a:	b095      	sub	sp, #84	; 0x54
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006568:	e853 3f00 	ldrex	r3, [r3]
 800656c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006574:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800657e:	643b      	str	r3, [r7, #64]	; 0x40
 8006580:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006584:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006586:	e841 2300 	strex	r3, r2, [r1]
 800658a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e6      	bne.n	8006560 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3308      	adds	r3, #8
 8006598:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	f023 0301 	bic.w	r3, r3, #1
 80065a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3308      	adds	r3, #8
 80065b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e5      	bne.n	8006592 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d118      	bne.n	8006600 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	e853 3f00 	ldrex	r3, [r3]
 80065da:	60bb      	str	r3, [r7, #8]
   return(result);
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f023 0310 	bic.w	r3, r3, #16
 80065e2:	647b      	str	r3, [r7, #68]	; 0x44
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	461a      	mov	r2, r3
 80065ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ec:	61bb      	str	r3, [r7, #24]
 80065ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f0:	6979      	ldr	r1, [r7, #20]
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	e841 2300 	strex	r3, r2, [r1]
 80065f8:	613b      	str	r3, [r7, #16]
   return(result);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1e6      	bne.n	80065ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2220      	movs	r2, #32
 8006604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006614:	bf00      	nop
 8006616:	3754      	adds	r7, #84	; 0x54
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b090      	sub	sp, #64	; 0x40
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	2b20      	cmp	r3, #32
 8006634:	d037      	beq.n	80066a6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8006636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006638:	2200      	movs	r2, #0
 800663a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800663e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3308      	adds	r3, #8
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	623b      	str	r3, [r7, #32]
   return(result);
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006654:	63bb      	str	r3, [r7, #56]	; 0x38
 8006656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3308      	adds	r3, #8
 800665c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800665e:	633a      	str	r2, [r7, #48]	; 0x30
 8006660:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e5      	bne.n	800663e <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006686:	637b      	str	r3, [r7, #52]	; 0x34
 8006688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006690:	61fb      	str	r3, [r7, #28]
 8006692:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	69b9      	ldr	r1, [r7, #24]
 8006696:	69fa      	ldr	r2, [r7, #28]
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	617b      	str	r3, [r7, #20]
   return(result);
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e6      	bne.n	8006672 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066a4:	e002      	b.n	80066ac <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 80066a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80066a8:	f7fa fe38 	bl	800131c <HAL_UART_TxCpltCallback>
}
 80066ac:	bf00      	nop
 80066ae:	3740      	adds	r7, #64	; 0x40
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f7ff fb66 	bl	8005d94 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066c8:	bf00      	nop
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b09c      	sub	sp, #112	; 0x70
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	2b20      	cmp	r3, #32
 80066e4:	d071      	beq.n	80067ca <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80066e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e8:	2200      	movs	r2, #0
 80066ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006702:	66bb      	str	r3, [r7, #104]	; 0x68
 8006704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800670c:	65bb      	str	r3, [r7, #88]	; 0x58
 800670e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006712:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800671a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e6      	bne.n	80066ee <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3308      	adds	r3, #8
 8006726:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	e853 3f00 	ldrex	r3, [r3]
 800672e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006732:	f023 0301 	bic.w	r3, r3, #1
 8006736:	667b      	str	r3, [r7, #100]	; 0x64
 8006738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3308      	adds	r3, #8
 800673e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006740:	647a      	str	r2, [r7, #68]	; 0x44
 8006742:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006744:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006746:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006748:	e841 2300 	strex	r3, r2, [r1]
 800674c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800674e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e5      	bne.n	8006720 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3308      	adds	r3, #8
 800675a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	e853 3f00 	ldrex	r3, [r3]
 8006762:	623b      	str	r3, [r7, #32]
   return(result);
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676a:	663b      	str	r3, [r7, #96]	; 0x60
 800676c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3308      	adds	r3, #8
 8006772:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006774:	633a      	str	r2, [r7, #48]	; 0x30
 8006776:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006778:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800677a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677c:	e841 2300 	strex	r3, r2, [r1]
 8006780:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1e5      	bne.n	8006754 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800678a:	2220      	movs	r2, #32
 800678c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006794:	2b01      	cmp	r3, #1
 8006796:	d118      	bne.n	80067ca <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	e853 3f00 	ldrex	r3, [r3]
 80067a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f023 0310 	bic.w	r3, r3, #16
 80067ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067b6:	61fb      	str	r3, [r7, #28]
 80067b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ba:	69b9      	ldr	r1, [r7, #24]
 80067bc:	69fa      	ldr	r2, [r7, #28]
 80067be:	e841 2300 	strex	r3, r2, [r1]
 80067c2:	617b      	str	r3, [r7, #20]
   return(result);
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1e6      	bne.n	8006798 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067cc:	2200      	movs	r2, #0
 80067ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d107      	bne.n	80067e8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80067de:	4619      	mov	r1, r3
 80067e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80067e2:	f7ff faff 	bl	8005de4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067e6:	e002      	b.n	80067ee <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80067e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80067ea:	f7ff fadd 	bl	8005da8 <HAL_UART_RxCpltCallback>
}
 80067ee:	bf00      	nop
 80067f0:	3770      	adds	r7, #112	; 0x70
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2201      	movs	r2, #1
 8006808:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800680e:	2b01      	cmp	r3, #1
 8006810:	d109      	bne.n	8006826 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006818:	085b      	lsrs	r3, r3, #1
 800681a:	b29b      	uxth	r3, r3
 800681c:	4619      	mov	r1, r3
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f7ff fae0 	bl	8005de4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006824:	e002      	b.n	800682c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f7ff fac8 	bl	8005dbc <HAL_UART_RxHalfCpltCallback>
}
 800682c:	bf00      	nop
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006846:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800684e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685a:	2b80      	cmp	r3, #128	; 0x80
 800685c:	d109      	bne.n	8006872 <UART_DMAError+0x3e>
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	2b21      	cmp	r3, #33	; 0x21
 8006862:	d106      	bne.n	8006872 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2200      	movs	r2, #0
 8006868:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800686c:	6978      	ldr	r0, [r7, #20]
 800686e:	f7ff fe4d 	bl	800650c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687c:	2b40      	cmp	r3, #64	; 0x40
 800687e:	d109      	bne.n	8006894 <UART_DMAError+0x60>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b22      	cmp	r3, #34	; 0x22
 8006884:	d106      	bne.n	8006894 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	2200      	movs	r2, #0
 800688a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800688e:	6978      	ldr	r0, [r7, #20]
 8006890:	f7ff fe62 	bl	8006558 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800689a:	f043 0210 	orr.w	r2, r3, #16
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068a4:	6978      	ldr	r0, [r7, #20]
 80068a6:	f7ff fa93 	bl	8005dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068aa:	bf00      	nop
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f7ff fa7d 	bl	8005dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068d6:	bf00      	nop
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b088      	sub	sp, #32
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	e853 3f00 	ldrex	r3, [r3]
 80068f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068fa:	61fb      	str	r3, [r7, #28]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	461a      	mov	r2, r3
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006908:	6979      	ldr	r1, [r7, #20]
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	e841 2300 	strex	r3, r2, [r1]
 8006910:	613b      	str	r3, [r7, #16]
   return(result);
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1e6      	bne.n	80068e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2220      	movs	r2, #32
 800691c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7fa fcf9 	bl	800131c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800692a:	bf00      	nop
 800692c:	3720      	adds	r7, #32
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
	...

08006948 <__errno>:
 8006948:	4b01      	ldr	r3, [pc, #4]	; (8006950 <__errno+0x8>)
 800694a:	6818      	ldr	r0, [r3, #0]
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	2000002c 	.word	0x2000002c

08006954 <__libc_init_array>:
 8006954:	b570      	push	{r4, r5, r6, lr}
 8006956:	4d0d      	ldr	r5, [pc, #52]	; (800698c <__libc_init_array+0x38>)
 8006958:	4c0d      	ldr	r4, [pc, #52]	; (8006990 <__libc_init_array+0x3c>)
 800695a:	1b64      	subs	r4, r4, r5
 800695c:	10a4      	asrs	r4, r4, #2
 800695e:	2600      	movs	r6, #0
 8006960:	42a6      	cmp	r6, r4
 8006962:	d109      	bne.n	8006978 <__libc_init_array+0x24>
 8006964:	4d0b      	ldr	r5, [pc, #44]	; (8006994 <__libc_init_array+0x40>)
 8006966:	4c0c      	ldr	r4, [pc, #48]	; (8006998 <__libc_init_array+0x44>)
 8006968:	f001 fa78 	bl	8007e5c <_init>
 800696c:	1b64      	subs	r4, r4, r5
 800696e:	10a4      	asrs	r4, r4, #2
 8006970:	2600      	movs	r6, #0
 8006972:	42a6      	cmp	r6, r4
 8006974:	d105      	bne.n	8006982 <__libc_init_array+0x2e>
 8006976:	bd70      	pop	{r4, r5, r6, pc}
 8006978:	f855 3b04 	ldr.w	r3, [r5], #4
 800697c:	4798      	blx	r3
 800697e:	3601      	adds	r6, #1
 8006980:	e7ee      	b.n	8006960 <__libc_init_array+0xc>
 8006982:	f855 3b04 	ldr.w	r3, [r5], #4
 8006986:	4798      	blx	r3
 8006988:	3601      	adds	r6, #1
 800698a:	e7f2      	b.n	8006972 <__libc_init_array+0x1e>
 800698c:	080082d0 	.word	0x080082d0
 8006990:	080082d0 	.word	0x080082d0
 8006994:	080082d0 	.word	0x080082d0
 8006998:	080082d4 	.word	0x080082d4

0800699c <memset>:
 800699c:	4402      	add	r2, r0
 800699e:	4603      	mov	r3, r0
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d100      	bne.n	80069a6 <memset+0xa>
 80069a4:	4770      	bx	lr
 80069a6:	f803 1b01 	strb.w	r1, [r3], #1
 80069aa:	e7f9      	b.n	80069a0 <memset+0x4>

080069ac <siprintf>:
 80069ac:	b40e      	push	{r1, r2, r3}
 80069ae:	b500      	push	{lr}
 80069b0:	b09c      	sub	sp, #112	; 0x70
 80069b2:	ab1d      	add	r3, sp, #116	; 0x74
 80069b4:	9002      	str	r0, [sp, #8]
 80069b6:	9006      	str	r0, [sp, #24]
 80069b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069bc:	4809      	ldr	r0, [pc, #36]	; (80069e4 <siprintf+0x38>)
 80069be:	9107      	str	r1, [sp, #28]
 80069c0:	9104      	str	r1, [sp, #16]
 80069c2:	4909      	ldr	r1, [pc, #36]	; (80069e8 <siprintf+0x3c>)
 80069c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069c8:	9105      	str	r1, [sp, #20]
 80069ca:	6800      	ldr	r0, [r0, #0]
 80069cc:	9301      	str	r3, [sp, #4]
 80069ce:	a902      	add	r1, sp, #8
 80069d0:	f000 f868 	bl	8006aa4 <_svfiprintf_r>
 80069d4:	9b02      	ldr	r3, [sp, #8]
 80069d6:	2200      	movs	r2, #0
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	b01c      	add	sp, #112	; 0x70
 80069dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80069e0:	b003      	add	sp, #12
 80069e2:	4770      	bx	lr
 80069e4:	2000002c 	.word	0x2000002c
 80069e8:	ffff0208 	.word	0xffff0208

080069ec <__ssputs_r>:
 80069ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f0:	688e      	ldr	r6, [r1, #8]
 80069f2:	429e      	cmp	r6, r3
 80069f4:	4682      	mov	sl, r0
 80069f6:	460c      	mov	r4, r1
 80069f8:	4690      	mov	r8, r2
 80069fa:	461f      	mov	r7, r3
 80069fc:	d838      	bhi.n	8006a70 <__ssputs_r+0x84>
 80069fe:	898a      	ldrh	r2, [r1, #12]
 8006a00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a04:	d032      	beq.n	8006a6c <__ssputs_r+0x80>
 8006a06:	6825      	ldr	r5, [r4, #0]
 8006a08:	6909      	ldr	r1, [r1, #16]
 8006a0a:	eba5 0901 	sub.w	r9, r5, r1
 8006a0e:	6965      	ldr	r5, [r4, #20]
 8006a10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a18:	3301      	adds	r3, #1
 8006a1a:	444b      	add	r3, r9
 8006a1c:	106d      	asrs	r5, r5, #1
 8006a1e:	429d      	cmp	r5, r3
 8006a20:	bf38      	it	cc
 8006a22:	461d      	movcc	r5, r3
 8006a24:	0553      	lsls	r3, r2, #21
 8006a26:	d531      	bpl.n	8006a8c <__ssputs_r+0xa0>
 8006a28:	4629      	mov	r1, r5
 8006a2a:	f000 fb63 	bl	80070f4 <_malloc_r>
 8006a2e:	4606      	mov	r6, r0
 8006a30:	b950      	cbnz	r0, 8006a48 <__ssputs_r+0x5c>
 8006a32:	230c      	movs	r3, #12
 8006a34:	f8ca 3000 	str.w	r3, [sl]
 8006a38:	89a3      	ldrh	r3, [r4, #12]
 8006a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3e:	81a3      	strh	r3, [r4, #12]
 8006a40:	f04f 30ff 	mov.w	r0, #4294967295
 8006a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a48:	6921      	ldr	r1, [r4, #16]
 8006a4a:	464a      	mov	r2, r9
 8006a4c:	f000 fabe 	bl	8006fcc <memcpy>
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5a:	81a3      	strh	r3, [r4, #12]
 8006a5c:	6126      	str	r6, [r4, #16]
 8006a5e:	6165      	str	r5, [r4, #20]
 8006a60:	444e      	add	r6, r9
 8006a62:	eba5 0509 	sub.w	r5, r5, r9
 8006a66:	6026      	str	r6, [r4, #0]
 8006a68:	60a5      	str	r5, [r4, #8]
 8006a6a:	463e      	mov	r6, r7
 8006a6c:	42be      	cmp	r6, r7
 8006a6e:	d900      	bls.n	8006a72 <__ssputs_r+0x86>
 8006a70:	463e      	mov	r6, r7
 8006a72:	6820      	ldr	r0, [r4, #0]
 8006a74:	4632      	mov	r2, r6
 8006a76:	4641      	mov	r1, r8
 8006a78:	f000 fab6 	bl	8006fe8 <memmove>
 8006a7c:	68a3      	ldr	r3, [r4, #8]
 8006a7e:	1b9b      	subs	r3, r3, r6
 8006a80:	60a3      	str	r3, [r4, #8]
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	4433      	add	r3, r6
 8006a86:	6023      	str	r3, [r4, #0]
 8006a88:	2000      	movs	r0, #0
 8006a8a:	e7db      	b.n	8006a44 <__ssputs_r+0x58>
 8006a8c:	462a      	mov	r2, r5
 8006a8e:	f000 fba5 	bl	80071dc <_realloc_r>
 8006a92:	4606      	mov	r6, r0
 8006a94:	2800      	cmp	r0, #0
 8006a96:	d1e1      	bne.n	8006a5c <__ssputs_r+0x70>
 8006a98:	6921      	ldr	r1, [r4, #16]
 8006a9a:	4650      	mov	r0, sl
 8006a9c:	f000 fabe 	bl	800701c <_free_r>
 8006aa0:	e7c7      	b.n	8006a32 <__ssputs_r+0x46>
	...

08006aa4 <_svfiprintf_r>:
 8006aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa8:	4698      	mov	r8, r3
 8006aaa:	898b      	ldrh	r3, [r1, #12]
 8006aac:	061b      	lsls	r3, r3, #24
 8006aae:	b09d      	sub	sp, #116	; 0x74
 8006ab0:	4607      	mov	r7, r0
 8006ab2:	460d      	mov	r5, r1
 8006ab4:	4614      	mov	r4, r2
 8006ab6:	d50e      	bpl.n	8006ad6 <_svfiprintf_r+0x32>
 8006ab8:	690b      	ldr	r3, [r1, #16]
 8006aba:	b963      	cbnz	r3, 8006ad6 <_svfiprintf_r+0x32>
 8006abc:	2140      	movs	r1, #64	; 0x40
 8006abe:	f000 fb19 	bl	80070f4 <_malloc_r>
 8006ac2:	6028      	str	r0, [r5, #0]
 8006ac4:	6128      	str	r0, [r5, #16]
 8006ac6:	b920      	cbnz	r0, 8006ad2 <_svfiprintf_r+0x2e>
 8006ac8:	230c      	movs	r3, #12
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad0:	e0d1      	b.n	8006c76 <_svfiprintf_r+0x1d2>
 8006ad2:	2340      	movs	r3, #64	; 0x40
 8006ad4:	616b      	str	r3, [r5, #20]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8006ada:	2320      	movs	r3, #32
 8006adc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ae0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ae4:	2330      	movs	r3, #48	; 0x30
 8006ae6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c90 <_svfiprintf_r+0x1ec>
 8006aea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006aee:	f04f 0901 	mov.w	r9, #1
 8006af2:	4623      	mov	r3, r4
 8006af4:	469a      	mov	sl, r3
 8006af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006afa:	b10a      	cbz	r2, 8006b00 <_svfiprintf_r+0x5c>
 8006afc:	2a25      	cmp	r2, #37	; 0x25
 8006afe:	d1f9      	bne.n	8006af4 <_svfiprintf_r+0x50>
 8006b00:	ebba 0b04 	subs.w	fp, sl, r4
 8006b04:	d00b      	beq.n	8006b1e <_svfiprintf_r+0x7a>
 8006b06:	465b      	mov	r3, fp
 8006b08:	4622      	mov	r2, r4
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	4638      	mov	r0, r7
 8006b0e:	f7ff ff6d 	bl	80069ec <__ssputs_r>
 8006b12:	3001      	adds	r0, #1
 8006b14:	f000 80aa 	beq.w	8006c6c <_svfiprintf_r+0x1c8>
 8006b18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b1a:	445a      	add	r2, fp
 8006b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 80a2 	beq.w	8006c6c <_svfiprintf_r+0x1c8>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b32:	f10a 0a01 	add.w	sl, sl, #1
 8006b36:	9304      	str	r3, [sp, #16]
 8006b38:	9307      	str	r3, [sp, #28]
 8006b3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b3e:	931a      	str	r3, [sp, #104]	; 0x68
 8006b40:	4654      	mov	r4, sl
 8006b42:	2205      	movs	r2, #5
 8006b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b48:	4851      	ldr	r0, [pc, #324]	; (8006c90 <_svfiprintf_r+0x1ec>)
 8006b4a:	f7f9 fb49 	bl	80001e0 <memchr>
 8006b4e:	9a04      	ldr	r2, [sp, #16]
 8006b50:	b9d8      	cbnz	r0, 8006b8a <_svfiprintf_r+0xe6>
 8006b52:	06d0      	lsls	r0, r2, #27
 8006b54:	bf44      	itt	mi
 8006b56:	2320      	movmi	r3, #32
 8006b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b5c:	0711      	lsls	r1, r2, #28
 8006b5e:	bf44      	itt	mi
 8006b60:	232b      	movmi	r3, #43	; 0x2b
 8006b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b66:	f89a 3000 	ldrb.w	r3, [sl]
 8006b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b6c:	d015      	beq.n	8006b9a <_svfiprintf_r+0xf6>
 8006b6e:	9a07      	ldr	r2, [sp, #28]
 8006b70:	4654      	mov	r4, sl
 8006b72:	2000      	movs	r0, #0
 8006b74:	f04f 0c0a 	mov.w	ip, #10
 8006b78:	4621      	mov	r1, r4
 8006b7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b7e:	3b30      	subs	r3, #48	; 0x30
 8006b80:	2b09      	cmp	r3, #9
 8006b82:	d94e      	bls.n	8006c22 <_svfiprintf_r+0x17e>
 8006b84:	b1b0      	cbz	r0, 8006bb4 <_svfiprintf_r+0x110>
 8006b86:	9207      	str	r2, [sp, #28]
 8006b88:	e014      	b.n	8006bb4 <_svfiprintf_r+0x110>
 8006b8a:	eba0 0308 	sub.w	r3, r0, r8
 8006b8e:	fa09 f303 	lsl.w	r3, r9, r3
 8006b92:	4313      	orrs	r3, r2
 8006b94:	9304      	str	r3, [sp, #16]
 8006b96:	46a2      	mov	sl, r4
 8006b98:	e7d2      	b.n	8006b40 <_svfiprintf_r+0x9c>
 8006b9a:	9b03      	ldr	r3, [sp, #12]
 8006b9c:	1d19      	adds	r1, r3, #4
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	9103      	str	r1, [sp, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	bfbb      	ittet	lt
 8006ba6:	425b      	neglt	r3, r3
 8006ba8:	f042 0202 	orrlt.w	r2, r2, #2
 8006bac:	9307      	strge	r3, [sp, #28]
 8006bae:	9307      	strlt	r3, [sp, #28]
 8006bb0:	bfb8      	it	lt
 8006bb2:	9204      	strlt	r2, [sp, #16]
 8006bb4:	7823      	ldrb	r3, [r4, #0]
 8006bb6:	2b2e      	cmp	r3, #46	; 0x2e
 8006bb8:	d10c      	bne.n	8006bd4 <_svfiprintf_r+0x130>
 8006bba:	7863      	ldrb	r3, [r4, #1]
 8006bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8006bbe:	d135      	bne.n	8006c2c <_svfiprintf_r+0x188>
 8006bc0:	9b03      	ldr	r3, [sp, #12]
 8006bc2:	1d1a      	adds	r2, r3, #4
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	9203      	str	r2, [sp, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	bfb8      	it	lt
 8006bcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bd0:	3402      	adds	r4, #2
 8006bd2:	9305      	str	r3, [sp, #20]
 8006bd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ca0 <_svfiprintf_r+0x1fc>
 8006bd8:	7821      	ldrb	r1, [r4, #0]
 8006bda:	2203      	movs	r2, #3
 8006bdc:	4650      	mov	r0, sl
 8006bde:	f7f9 faff 	bl	80001e0 <memchr>
 8006be2:	b140      	cbz	r0, 8006bf6 <_svfiprintf_r+0x152>
 8006be4:	2340      	movs	r3, #64	; 0x40
 8006be6:	eba0 000a 	sub.w	r0, r0, sl
 8006bea:	fa03 f000 	lsl.w	r0, r3, r0
 8006bee:	9b04      	ldr	r3, [sp, #16]
 8006bf0:	4303      	orrs	r3, r0
 8006bf2:	3401      	adds	r4, #1
 8006bf4:	9304      	str	r3, [sp, #16]
 8006bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bfa:	4826      	ldr	r0, [pc, #152]	; (8006c94 <_svfiprintf_r+0x1f0>)
 8006bfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c00:	2206      	movs	r2, #6
 8006c02:	f7f9 faed 	bl	80001e0 <memchr>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d038      	beq.n	8006c7c <_svfiprintf_r+0x1d8>
 8006c0a:	4b23      	ldr	r3, [pc, #140]	; (8006c98 <_svfiprintf_r+0x1f4>)
 8006c0c:	bb1b      	cbnz	r3, 8006c56 <_svfiprintf_r+0x1b2>
 8006c0e:	9b03      	ldr	r3, [sp, #12]
 8006c10:	3307      	adds	r3, #7
 8006c12:	f023 0307 	bic.w	r3, r3, #7
 8006c16:	3308      	adds	r3, #8
 8006c18:	9303      	str	r3, [sp, #12]
 8006c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c1c:	4433      	add	r3, r6
 8006c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c20:	e767      	b.n	8006af2 <_svfiprintf_r+0x4e>
 8006c22:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c26:	460c      	mov	r4, r1
 8006c28:	2001      	movs	r0, #1
 8006c2a:	e7a5      	b.n	8006b78 <_svfiprintf_r+0xd4>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	3401      	adds	r4, #1
 8006c30:	9305      	str	r3, [sp, #20]
 8006c32:	4619      	mov	r1, r3
 8006c34:	f04f 0c0a 	mov.w	ip, #10
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c3e:	3a30      	subs	r2, #48	; 0x30
 8006c40:	2a09      	cmp	r2, #9
 8006c42:	d903      	bls.n	8006c4c <_svfiprintf_r+0x1a8>
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0c5      	beq.n	8006bd4 <_svfiprintf_r+0x130>
 8006c48:	9105      	str	r1, [sp, #20]
 8006c4a:	e7c3      	b.n	8006bd4 <_svfiprintf_r+0x130>
 8006c4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c50:	4604      	mov	r4, r0
 8006c52:	2301      	movs	r3, #1
 8006c54:	e7f0      	b.n	8006c38 <_svfiprintf_r+0x194>
 8006c56:	ab03      	add	r3, sp, #12
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	462a      	mov	r2, r5
 8006c5c:	4b0f      	ldr	r3, [pc, #60]	; (8006c9c <_svfiprintf_r+0x1f8>)
 8006c5e:	a904      	add	r1, sp, #16
 8006c60:	4638      	mov	r0, r7
 8006c62:	f3af 8000 	nop.w
 8006c66:	1c42      	adds	r2, r0, #1
 8006c68:	4606      	mov	r6, r0
 8006c6a:	d1d6      	bne.n	8006c1a <_svfiprintf_r+0x176>
 8006c6c:	89ab      	ldrh	r3, [r5, #12]
 8006c6e:	065b      	lsls	r3, r3, #25
 8006c70:	f53f af2c 	bmi.w	8006acc <_svfiprintf_r+0x28>
 8006c74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c76:	b01d      	add	sp, #116	; 0x74
 8006c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7c:	ab03      	add	r3, sp, #12
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	462a      	mov	r2, r5
 8006c82:	4b06      	ldr	r3, [pc, #24]	; (8006c9c <_svfiprintf_r+0x1f8>)
 8006c84:	a904      	add	r1, sp, #16
 8006c86:	4638      	mov	r0, r7
 8006c88:	f000 f87a 	bl	8006d80 <_printf_i>
 8006c8c:	e7eb      	b.n	8006c66 <_svfiprintf_r+0x1c2>
 8006c8e:	bf00      	nop
 8006c90:	08007eb8 	.word	0x08007eb8
 8006c94:	08007ec2 	.word	0x08007ec2
 8006c98:	00000000 	.word	0x00000000
 8006c9c:	080069ed 	.word	0x080069ed
 8006ca0:	08007ebe 	.word	0x08007ebe

08006ca4 <_printf_common>:
 8006ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca8:	4616      	mov	r6, r2
 8006caa:	4699      	mov	r9, r3
 8006cac:	688a      	ldr	r2, [r1, #8]
 8006cae:	690b      	ldr	r3, [r1, #16]
 8006cb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	bfb8      	it	lt
 8006cb8:	4613      	movlt	r3, r2
 8006cba:	6033      	str	r3, [r6, #0]
 8006cbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cc0:	4607      	mov	r7, r0
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	b10a      	cbz	r2, 8006cca <_printf_common+0x26>
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	6033      	str	r3, [r6, #0]
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	0699      	lsls	r1, r3, #26
 8006cce:	bf42      	ittt	mi
 8006cd0:	6833      	ldrmi	r3, [r6, #0]
 8006cd2:	3302      	addmi	r3, #2
 8006cd4:	6033      	strmi	r3, [r6, #0]
 8006cd6:	6825      	ldr	r5, [r4, #0]
 8006cd8:	f015 0506 	ands.w	r5, r5, #6
 8006cdc:	d106      	bne.n	8006cec <_printf_common+0x48>
 8006cde:	f104 0a19 	add.w	sl, r4, #25
 8006ce2:	68e3      	ldr	r3, [r4, #12]
 8006ce4:	6832      	ldr	r2, [r6, #0]
 8006ce6:	1a9b      	subs	r3, r3, r2
 8006ce8:	42ab      	cmp	r3, r5
 8006cea:	dc26      	bgt.n	8006d3a <_printf_common+0x96>
 8006cec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cf0:	1e13      	subs	r3, r2, #0
 8006cf2:	6822      	ldr	r2, [r4, #0]
 8006cf4:	bf18      	it	ne
 8006cf6:	2301      	movne	r3, #1
 8006cf8:	0692      	lsls	r2, r2, #26
 8006cfa:	d42b      	bmi.n	8006d54 <_printf_common+0xb0>
 8006cfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d00:	4649      	mov	r1, r9
 8006d02:	4638      	mov	r0, r7
 8006d04:	47c0      	blx	r8
 8006d06:	3001      	adds	r0, #1
 8006d08:	d01e      	beq.n	8006d48 <_printf_common+0xa4>
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	68e5      	ldr	r5, [r4, #12]
 8006d0e:	6832      	ldr	r2, [r6, #0]
 8006d10:	f003 0306 	and.w	r3, r3, #6
 8006d14:	2b04      	cmp	r3, #4
 8006d16:	bf08      	it	eq
 8006d18:	1aad      	subeq	r5, r5, r2
 8006d1a:	68a3      	ldr	r3, [r4, #8]
 8006d1c:	6922      	ldr	r2, [r4, #16]
 8006d1e:	bf0c      	ite	eq
 8006d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d24:	2500      	movne	r5, #0
 8006d26:	4293      	cmp	r3, r2
 8006d28:	bfc4      	itt	gt
 8006d2a:	1a9b      	subgt	r3, r3, r2
 8006d2c:	18ed      	addgt	r5, r5, r3
 8006d2e:	2600      	movs	r6, #0
 8006d30:	341a      	adds	r4, #26
 8006d32:	42b5      	cmp	r5, r6
 8006d34:	d11a      	bne.n	8006d6c <_printf_common+0xc8>
 8006d36:	2000      	movs	r0, #0
 8006d38:	e008      	b.n	8006d4c <_printf_common+0xa8>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4652      	mov	r2, sl
 8006d3e:	4649      	mov	r1, r9
 8006d40:	4638      	mov	r0, r7
 8006d42:	47c0      	blx	r8
 8006d44:	3001      	adds	r0, #1
 8006d46:	d103      	bne.n	8006d50 <_printf_common+0xac>
 8006d48:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d50:	3501      	adds	r5, #1
 8006d52:	e7c6      	b.n	8006ce2 <_printf_common+0x3e>
 8006d54:	18e1      	adds	r1, r4, r3
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	2030      	movs	r0, #48	; 0x30
 8006d5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d5e:	4422      	add	r2, r4
 8006d60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d68:	3302      	adds	r3, #2
 8006d6a:	e7c7      	b.n	8006cfc <_printf_common+0x58>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	4622      	mov	r2, r4
 8006d70:	4649      	mov	r1, r9
 8006d72:	4638      	mov	r0, r7
 8006d74:	47c0      	blx	r8
 8006d76:	3001      	adds	r0, #1
 8006d78:	d0e6      	beq.n	8006d48 <_printf_common+0xa4>
 8006d7a:	3601      	adds	r6, #1
 8006d7c:	e7d9      	b.n	8006d32 <_printf_common+0x8e>
	...

08006d80 <_printf_i>:
 8006d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d84:	7e0f      	ldrb	r7, [r1, #24]
 8006d86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d88:	2f78      	cmp	r7, #120	; 0x78
 8006d8a:	4691      	mov	r9, r2
 8006d8c:	4680      	mov	r8, r0
 8006d8e:	460c      	mov	r4, r1
 8006d90:	469a      	mov	sl, r3
 8006d92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d96:	d807      	bhi.n	8006da8 <_printf_i+0x28>
 8006d98:	2f62      	cmp	r7, #98	; 0x62
 8006d9a:	d80a      	bhi.n	8006db2 <_printf_i+0x32>
 8006d9c:	2f00      	cmp	r7, #0
 8006d9e:	f000 80d8 	beq.w	8006f52 <_printf_i+0x1d2>
 8006da2:	2f58      	cmp	r7, #88	; 0x58
 8006da4:	f000 80a3 	beq.w	8006eee <_printf_i+0x16e>
 8006da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006db0:	e03a      	b.n	8006e28 <_printf_i+0xa8>
 8006db2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006db6:	2b15      	cmp	r3, #21
 8006db8:	d8f6      	bhi.n	8006da8 <_printf_i+0x28>
 8006dba:	a101      	add	r1, pc, #4	; (adr r1, 8006dc0 <_printf_i+0x40>)
 8006dbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dc0:	08006e19 	.word	0x08006e19
 8006dc4:	08006e2d 	.word	0x08006e2d
 8006dc8:	08006da9 	.word	0x08006da9
 8006dcc:	08006da9 	.word	0x08006da9
 8006dd0:	08006da9 	.word	0x08006da9
 8006dd4:	08006da9 	.word	0x08006da9
 8006dd8:	08006e2d 	.word	0x08006e2d
 8006ddc:	08006da9 	.word	0x08006da9
 8006de0:	08006da9 	.word	0x08006da9
 8006de4:	08006da9 	.word	0x08006da9
 8006de8:	08006da9 	.word	0x08006da9
 8006dec:	08006f39 	.word	0x08006f39
 8006df0:	08006e5d 	.word	0x08006e5d
 8006df4:	08006f1b 	.word	0x08006f1b
 8006df8:	08006da9 	.word	0x08006da9
 8006dfc:	08006da9 	.word	0x08006da9
 8006e00:	08006f5b 	.word	0x08006f5b
 8006e04:	08006da9 	.word	0x08006da9
 8006e08:	08006e5d 	.word	0x08006e5d
 8006e0c:	08006da9 	.word	0x08006da9
 8006e10:	08006da9 	.word	0x08006da9
 8006e14:	08006f23 	.word	0x08006f23
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	1d1a      	adds	r2, r3, #4
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	602a      	str	r2, [r5, #0]
 8006e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e0a3      	b.n	8006f74 <_printf_i+0x1f4>
 8006e2c:	6820      	ldr	r0, [r4, #0]
 8006e2e:	6829      	ldr	r1, [r5, #0]
 8006e30:	0606      	lsls	r6, r0, #24
 8006e32:	f101 0304 	add.w	r3, r1, #4
 8006e36:	d50a      	bpl.n	8006e4e <_printf_i+0xce>
 8006e38:	680e      	ldr	r6, [r1, #0]
 8006e3a:	602b      	str	r3, [r5, #0]
 8006e3c:	2e00      	cmp	r6, #0
 8006e3e:	da03      	bge.n	8006e48 <_printf_i+0xc8>
 8006e40:	232d      	movs	r3, #45	; 0x2d
 8006e42:	4276      	negs	r6, r6
 8006e44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e48:	485e      	ldr	r0, [pc, #376]	; (8006fc4 <_printf_i+0x244>)
 8006e4a:	230a      	movs	r3, #10
 8006e4c:	e019      	b.n	8006e82 <_printf_i+0x102>
 8006e4e:	680e      	ldr	r6, [r1, #0]
 8006e50:	602b      	str	r3, [r5, #0]
 8006e52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e56:	bf18      	it	ne
 8006e58:	b236      	sxthne	r6, r6
 8006e5a:	e7ef      	b.n	8006e3c <_printf_i+0xbc>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	6820      	ldr	r0, [r4, #0]
 8006e60:	1d19      	adds	r1, r3, #4
 8006e62:	6029      	str	r1, [r5, #0]
 8006e64:	0601      	lsls	r1, r0, #24
 8006e66:	d501      	bpl.n	8006e6c <_printf_i+0xec>
 8006e68:	681e      	ldr	r6, [r3, #0]
 8006e6a:	e002      	b.n	8006e72 <_printf_i+0xf2>
 8006e6c:	0646      	lsls	r6, r0, #25
 8006e6e:	d5fb      	bpl.n	8006e68 <_printf_i+0xe8>
 8006e70:	881e      	ldrh	r6, [r3, #0]
 8006e72:	4854      	ldr	r0, [pc, #336]	; (8006fc4 <_printf_i+0x244>)
 8006e74:	2f6f      	cmp	r7, #111	; 0x6f
 8006e76:	bf0c      	ite	eq
 8006e78:	2308      	moveq	r3, #8
 8006e7a:	230a      	movne	r3, #10
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e82:	6865      	ldr	r5, [r4, #4]
 8006e84:	60a5      	str	r5, [r4, #8]
 8006e86:	2d00      	cmp	r5, #0
 8006e88:	bfa2      	ittt	ge
 8006e8a:	6821      	ldrge	r1, [r4, #0]
 8006e8c:	f021 0104 	bicge.w	r1, r1, #4
 8006e90:	6021      	strge	r1, [r4, #0]
 8006e92:	b90e      	cbnz	r6, 8006e98 <_printf_i+0x118>
 8006e94:	2d00      	cmp	r5, #0
 8006e96:	d04d      	beq.n	8006f34 <_printf_i+0x1b4>
 8006e98:	4615      	mov	r5, r2
 8006e9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e9e:	fb03 6711 	mls	r7, r3, r1, r6
 8006ea2:	5dc7      	ldrb	r7, [r0, r7]
 8006ea4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ea8:	4637      	mov	r7, r6
 8006eaa:	42bb      	cmp	r3, r7
 8006eac:	460e      	mov	r6, r1
 8006eae:	d9f4      	bls.n	8006e9a <_printf_i+0x11a>
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	d10b      	bne.n	8006ecc <_printf_i+0x14c>
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	07de      	lsls	r6, r3, #31
 8006eb8:	d508      	bpl.n	8006ecc <_printf_i+0x14c>
 8006eba:	6923      	ldr	r3, [r4, #16]
 8006ebc:	6861      	ldr	r1, [r4, #4]
 8006ebe:	4299      	cmp	r1, r3
 8006ec0:	bfde      	ittt	le
 8006ec2:	2330      	movle	r3, #48	; 0x30
 8006ec4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ec8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ecc:	1b52      	subs	r2, r2, r5
 8006ece:	6122      	str	r2, [r4, #16]
 8006ed0:	f8cd a000 	str.w	sl, [sp]
 8006ed4:	464b      	mov	r3, r9
 8006ed6:	aa03      	add	r2, sp, #12
 8006ed8:	4621      	mov	r1, r4
 8006eda:	4640      	mov	r0, r8
 8006edc:	f7ff fee2 	bl	8006ca4 <_printf_common>
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	d14c      	bne.n	8006f7e <_printf_i+0x1fe>
 8006ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee8:	b004      	add	sp, #16
 8006eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eee:	4835      	ldr	r0, [pc, #212]	; (8006fc4 <_printf_i+0x244>)
 8006ef0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ef4:	6829      	ldr	r1, [r5, #0]
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006efc:	6029      	str	r1, [r5, #0]
 8006efe:	061d      	lsls	r5, r3, #24
 8006f00:	d514      	bpl.n	8006f2c <_printf_i+0x1ac>
 8006f02:	07df      	lsls	r7, r3, #31
 8006f04:	bf44      	itt	mi
 8006f06:	f043 0320 	orrmi.w	r3, r3, #32
 8006f0a:	6023      	strmi	r3, [r4, #0]
 8006f0c:	b91e      	cbnz	r6, 8006f16 <_printf_i+0x196>
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	f023 0320 	bic.w	r3, r3, #32
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	2310      	movs	r3, #16
 8006f18:	e7b0      	b.n	8006e7c <_printf_i+0xfc>
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	f043 0320 	orr.w	r3, r3, #32
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	2378      	movs	r3, #120	; 0x78
 8006f24:	4828      	ldr	r0, [pc, #160]	; (8006fc8 <_printf_i+0x248>)
 8006f26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f2a:	e7e3      	b.n	8006ef4 <_printf_i+0x174>
 8006f2c:	0659      	lsls	r1, r3, #25
 8006f2e:	bf48      	it	mi
 8006f30:	b2b6      	uxthmi	r6, r6
 8006f32:	e7e6      	b.n	8006f02 <_printf_i+0x182>
 8006f34:	4615      	mov	r5, r2
 8006f36:	e7bb      	b.n	8006eb0 <_printf_i+0x130>
 8006f38:	682b      	ldr	r3, [r5, #0]
 8006f3a:	6826      	ldr	r6, [r4, #0]
 8006f3c:	6961      	ldr	r1, [r4, #20]
 8006f3e:	1d18      	adds	r0, r3, #4
 8006f40:	6028      	str	r0, [r5, #0]
 8006f42:	0635      	lsls	r5, r6, #24
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	d501      	bpl.n	8006f4c <_printf_i+0x1cc>
 8006f48:	6019      	str	r1, [r3, #0]
 8006f4a:	e002      	b.n	8006f52 <_printf_i+0x1d2>
 8006f4c:	0670      	lsls	r0, r6, #25
 8006f4e:	d5fb      	bpl.n	8006f48 <_printf_i+0x1c8>
 8006f50:	8019      	strh	r1, [r3, #0]
 8006f52:	2300      	movs	r3, #0
 8006f54:	6123      	str	r3, [r4, #16]
 8006f56:	4615      	mov	r5, r2
 8006f58:	e7ba      	b.n	8006ed0 <_printf_i+0x150>
 8006f5a:	682b      	ldr	r3, [r5, #0]
 8006f5c:	1d1a      	adds	r2, r3, #4
 8006f5e:	602a      	str	r2, [r5, #0]
 8006f60:	681d      	ldr	r5, [r3, #0]
 8006f62:	6862      	ldr	r2, [r4, #4]
 8006f64:	2100      	movs	r1, #0
 8006f66:	4628      	mov	r0, r5
 8006f68:	f7f9 f93a 	bl	80001e0 <memchr>
 8006f6c:	b108      	cbz	r0, 8006f72 <_printf_i+0x1f2>
 8006f6e:	1b40      	subs	r0, r0, r5
 8006f70:	6060      	str	r0, [r4, #4]
 8006f72:	6863      	ldr	r3, [r4, #4]
 8006f74:	6123      	str	r3, [r4, #16]
 8006f76:	2300      	movs	r3, #0
 8006f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f7c:	e7a8      	b.n	8006ed0 <_printf_i+0x150>
 8006f7e:	6923      	ldr	r3, [r4, #16]
 8006f80:	462a      	mov	r2, r5
 8006f82:	4649      	mov	r1, r9
 8006f84:	4640      	mov	r0, r8
 8006f86:	47d0      	blx	sl
 8006f88:	3001      	adds	r0, #1
 8006f8a:	d0ab      	beq.n	8006ee4 <_printf_i+0x164>
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	079b      	lsls	r3, r3, #30
 8006f90:	d413      	bmi.n	8006fba <_printf_i+0x23a>
 8006f92:	68e0      	ldr	r0, [r4, #12]
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	4298      	cmp	r0, r3
 8006f98:	bfb8      	it	lt
 8006f9a:	4618      	movlt	r0, r3
 8006f9c:	e7a4      	b.n	8006ee8 <_printf_i+0x168>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	4632      	mov	r2, r6
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	47d0      	blx	sl
 8006fa8:	3001      	adds	r0, #1
 8006faa:	d09b      	beq.n	8006ee4 <_printf_i+0x164>
 8006fac:	3501      	adds	r5, #1
 8006fae:	68e3      	ldr	r3, [r4, #12]
 8006fb0:	9903      	ldr	r1, [sp, #12]
 8006fb2:	1a5b      	subs	r3, r3, r1
 8006fb4:	42ab      	cmp	r3, r5
 8006fb6:	dcf2      	bgt.n	8006f9e <_printf_i+0x21e>
 8006fb8:	e7eb      	b.n	8006f92 <_printf_i+0x212>
 8006fba:	2500      	movs	r5, #0
 8006fbc:	f104 0619 	add.w	r6, r4, #25
 8006fc0:	e7f5      	b.n	8006fae <_printf_i+0x22e>
 8006fc2:	bf00      	nop
 8006fc4:	08007ec9 	.word	0x08007ec9
 8006fc8:	08007eda 	.word	0x08007eda

08006fcc <memcpy>:
 8006fcc:	440a      	add	r2, r1
 8006fce:	4291      	cmp	r1, r2
 8006fd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fd4:	d100      	bne.n	8006fd8 <memcpy+0xc>
 8006fd6:	4770      	bx	lr
 8006fd8:	b510      	push	{r4, lr}
 8006fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fe2:	4291      	cmp	r1, r2
 8006fe4:	d1f9      	bne.n	8006fda <memcpy+0xe>
 8006fe6:	bd10      	pop	{r4, pc}

08006fe8 <memmove>:
 8006fe8:	4288      	cmp	r0, r1
 8006fea:	b510      	push	{r4, lr}
 8006fec:	eb01 0402 	add.w	r4, r1, r2
 8006ff0:	d902      	bls.n	8006ff8 <memmove+0x10>
 8006ff2:	4284      	cmp	r4, r0
 8006ff4:	4623      	mov	r3, r4
 8006ff6:	d807      	bhi.n	8007008 <memmove+0x20>
 8006ff8:	1e43      	subs	r3, r0, #1
 8006ffa:	42a1      	cmp	r1, r4
 8006ffc:	d008      	beq.n	8007010 <memmove+0x28>
 8006ffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007002:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007006:	e7f8      	b.n	8006ffa <memmove+0x12>
 8007008:	4402      	add	r2, r0
 800700a:	4601      	mov	r1, r0
 800700c:	428a      	cmp	r2, r1
 800700e:	d100      	bne.n	8007012 <memmove+0x2a>
 8007010:	bd10      	pop	{r4, pc}
 8007012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007016:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800701a:	e7f7      	b.n	800700c <memmove+0x24>

0800701c <_free_r>:
 800701c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800701e:	2900      	cmp	r1, #0
 8007020:	d044      	beq.n	80070ac <_free_r+0x90>
 8007022:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007026:	9001      	str	r0, [sp, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	f1a1 0404 	sub.w	r4, r1, #4
 800702e:	bfb8      	it	lt
 8007030:	18e4      	addlt	r4, r4, r3
 8007032:	f000 f913 	bl	800725c <__malloc_lock>
 8007036:	4a1e      	ldr	r2, [pc, #120]	; (80070b0 <_free_r+0x94>)
 8007038:	9801      	ldr	r0, [sp, #4]
 800703a:	6813      	ldr	r3, [r2, #0]
 800703c:	b933      	cbnz	r3, 800704c <_free_r+0x30>
 800703e:	6063      	str	r3, [r4, #4]
 8007040:	6014      	str	r4, [r2, #0]
 8007042:	b003      	add	sp, #12
 8007044:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007048:	f000 b90e 	b.w	8007268 <__malloc_unlock>
 800704c:	42a3      	cmp	r3, r4
 800704e:	d908      	bls.n	8007062 <_free_r+0x46>
 8007050:	6825      	ldr	r5, [r4, #0]
 8007052:	1961      	adds	r1, r4, r5
 8007054:	428b      	cmp	r3, r1
 8007056:	bf01      	itttt	eq
 8007058:	6819      	ldreq	r1, [r3, #0]
 800705a:	685b      	ldreq	r3, [r3, #4]
 800705c:	1949      	addeq	r1, r1, r5
 800705e:	6021      	streq	r1, [r4, #0]
 8007060:	e7ed      	b.n	800703e <_free_r+0x22>
 8007062:	461a      	mov	r2, r3
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	b10b      	cbz	r3, 800706c <_free_r+0x50>
 8007068:	42a3      	cmp	r3, r4
 800706a:	d9fa      	bls.n	8007062 <_free_r+0x46>
 800706c:	6811      	ldr	r1, [r2, #0]
 800706e:	1855      	adds	r5, r2, r1
 8007070:	42a5      	cmp	r5, r4
 8007072:	d10b      	bne.n	800708c <_free_r+0x70>
 8007074:	6824      	ldr	r4, [r4, #0]
 8007076:	4421      	add	r1, r4
 8007078:	1854      	adds	r4, r2, r1
 800707a:	42a3      	cmp	r3, r4
 800707c:	6011      	str	r1, [r2, #0]
 800707e:	d1e0      	bne.n	8007042 <_free_r+0x26>
 8007080:	681c      	ldr	r4, [r3, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	6053      	str	r3, [r2, #4]
 8007086:	4421      	add	r1, r4
 8007088:	6011      	str	r1, [r2, #0]
 800708a:	e7da      	b.n	8007042 <_free_r+0x26>
 800708c:	d902      	bls.n	8007094 <_free_r+0x78>
 800708e:	230c      	movs	r3, #12
 8007090:	6003      	str	r3, [r0, #0]
 8007092:	e7d6      	b.n	8007042 <_free_r+0x26>
 8007094:	6825      	ldr	r5, [r4, #0]
 8007096:	1961      	adds	r1, r4, r5
 8007098:	428b      	cmp	r3, r1
 800709a:	bf04      	itt	eq
 800709c:	6819      	ldreq	r1, [r3, #0]
 800709e:	685b      	ldreq	r3, [r3, #4]
 80070a0:	6063      	str	r3, [r4, #4]
 80070a2:	bf04      	itt	eq
 80070a4:	1949      	addeq	r1, r1, r5
 80070a6:	6021      	streq	r1, [r4, #0]
 80070a8:	6054      	str	r4, [r2, #4]
 80070aa:	e7ca      	b.n	8007042 <_free_r+0x26>
 80070ac:	b003      	add	sp, #12
 80070ae:	bd30      	pop	{r4, r5, pc}
 80070b0:	20000bcc 	.word	0x20000bcc

080070b4 <sbrk_aligned>:
 80070b4:	b570      	push	{r4, r5, r6, lr}
 80070b6:	4e0e      	ldr	r6, [pc, #56]	; (80070f0 <sbrk_aligned+0x3c>)
 80070b8:	460c      	mov	r4, r1
 80070ba:	6831      	ldr	r1, [r6, #0]
 80070bc:	4605      	mov	r5, r0
 80070be:	b911      	cbnz	r1, 80070c6 <sbrk_aligned+0x12>
 80070c0:	f000 f8bc 	bl	800723c <_sbrk_r>
 80070c4:	6030      	str	r0, [r6, #0]
 80070c6:	4621      	mov	r1, r4
 80070c8:	4628      	mov	r0, r5
 80070ca:	f000 f8b7 	bl	800723c <_sbrk_r>
 80070ce:	1c43      	adds	r3, r0, #1
 80070d0:	d00a      	beq.n	80070e8 <sbrk_aligned+0x34>
 80070d2:	1cc4      	adds	r4, r0, #3
 80070d4:	f024 0403 	bic.w	r4, r4, #3
 80070d8:	42a0      	cmp	r0, r4
 80070da:	d007      	beq.n	80070ec <sbrk_aligned+0x38>
 80070dc:	1a21      	subs	r1, r4, r0
 80070de:	4628      	mov	r0, r5
 80070e0:	f000 f8ac 	bl	800723c <_sbrk_r>
 80070e4:	3001      	adds	r0, #1
 80070e6:	d101      	bne.n	80070ec <sbrk_aligned+0x38>
 80070e8:	f04f 34ff 	mov.w	r4, #4294967295
 80070ec:	4620      	mov	r0, r4
 80070ee:	bd70      	pop	{r4, r5, r6, pc}
 80070f0:	20000bd0 	.word	0x20000bd0

080070f4 <_malloc_r>:
 80070f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070f8:	1ccd      	adds	r5, r1, #3
 80070fa:	f025 0503 	bic.w	r5, r5, #3
 80070fe:	3508      	adds	r5, #8
 8007100:	2d0c      	cmp	r5, #12
 8007102:	bf38      	it	cc
 8007104:	250c      	movcc	r5, #12
 8007106:	2d00      	cmp	r5, #0
 8007108:	4607      	mov	r7, r0
 800710a:	db01      	blt.n	8007110 <_malloc_r+0x1c>
 800710c:	42a9      	cmp	r1, r5
 800710e:	d905      	bls.n	800711c <_malloc_r+0x28>
 8007110:	230c      	movs	r3, #12
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	2600      	movs	r6, #0
 8007116:	4630      	mov	r0, r6
 8007118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800711c:	4e2e      	ldr	r6, [pc, #184]	; (80071d8 <_malloc_r+0xe4>)
 800711e:	f000 f89d 	bl	800725c <__malloc_lock>
 8007122:	6833      	ldr	r3, [r6, #0]
 8007124:	461c      	mov	r4, r3
 8007126:	bb34      	cbnz	r4, 8007176 <_malloc_r+0x82>
 8007128:	4629      	mov	r1, r5
 800712a:	4638      	mov	r0, r7
 800712c:	f7ff ffc2 	bl	80070b4 <sbrk_aligned>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	4604      	mov	r4, r0
 8007134:	d14d      	bne.n	80071d2 <_malloc_r+0xde>
 8007136:	6834      	ldr	r4, [r6, #0]
 8007138:	4626      	mov	r6, r4
 800713a:	2e00      	cmp	r6, #0
 800713c:	d140      	bne.n	80071c0 <_malloc_r+0xcc>
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	4631      	mov	r1, r6
 8007142:	4638      	mov	r0, r7
 8007144:	eb04 0803 	add.w	r8, r4, r3
 8007148:	f000 f878 	bl	800723c <_sbrk_r>
 800714c:	4580      	cmp	r8, r0
 800714e:	d13a      	bne.n	80071c6 <_malloc_r+0xd2>
 8007150:	6821      	ldr	r1, [r4, #0]
 8007152:	3503      	adds	r5, #3
 8007154:	1a6d      	subs	r5, r5, r1
 8007156:	f025 0503 	bic.w	r5, r5, #3
 800715a:	3508      	adds	r5, #8
 800715c:	2d0c      	cmp	r5, #12
 800715e:	bf38      	it	cc
 8007160:	250c      	movcc	r5, #12
 8007162:	4629      	mov	r1, r5
 8007164:	4638      	mov	r0, r7
 8007166:	f7ff ffa5 	bl	80070b4 <sbrk_aligned>
 800716a:	3001      	adds	r0, #1
 800716c:	d02b      	beq.n	80071c6 <_malloc_r+0xd2>
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	442b      	add	r3, r5
 8007172:	6023      	str	r3, [r4, #0]
 8007174:	e00e      	b.n	8007194 <_malloc_r+0xa0>
 8007176:	6822      	ldr	r2, [r4, #0]
 8007178:	1b52      	subs	r2, r2, r5
 800717a:	d41e      	bmi.n	80071ba <_malloc_r+0xc6>
 800717c:	2a0b      	cmp	r2, #11
 800717e:	d916      	bls.n	80071ae <_malloc_r+0xba>
 8007180:	1961      	adds	r1, r4, r5
 8007182:	42a3      	cmp	r3, r4
 8007184:	6025      	str	r5, [r4, #0]
 8007186:	bf18      	it	ne
 8007188:	6059      	strne	r1, [r3, #4]
 800718a:	6863      	ldr	r3, [r4, #4]
 800718c:	bf08      	it	eq
 800718e:	6031      	streq	r1, [r6, #0]
 8007190:	5162      	str	r2, [r4, r5]
 8007192:	604b      	str	r3, [r1, #4]
 8007194:	4638      	mov	r0, r7
 8007196:	f104 060b 	add.w	r6, r4, #11
 800719a:	f000 f865 	bl	8007268 <__malloc_unlock>
 800719e:	f026 0607 	bic.w	r6, r6, #7
 80071a2:	1d23      	adds	r3, r4, #4
 80071a4:	1af2      	subs	r2, r6, r3
 80071a6:	d0b6      	beq.n	8007116 <_malloc_r+0x22>
 80071a8:	1b9b      	subs	r3, r3, r6
 80071aa:	50a3      	str	r3, [r4, r2]
 80071ac:	e7b3      	b.n	8007116 <_malloc_r+0x22>
 80071ae:	6862      	ldr	r2, [r4, #4]
 80071b0:	42a3      	cmp	r3, r4
 80071b2:	bf0c      	ite	eq
 80071b4:	6032      	streq	r2, [r6, #0]
 80071b6:	605a      	strne	r2, [r3, #4]
 80071b8:	e7ec      	b.n	8007194 <_malloc_r+0xa0>
 80071ba:	4623      	mov	r3, r4
 80071bc:	6864      	ldr	r4, [r4, #4]
 80071be:	e7b2      	b.n	8007126 <_malloc_r+0x32>
 80071c0:	4634      	mov	r4, r6
 80071c2:	6876      	ldr	r6, [r6, #4]
 80071c4:	e7b9      	b.n	800713a <_malloc_r+0x46>
 80071c6:	230c      	movs	r3, #12
 80071c8:	603b      	str	r3, [r7, #0]
 80071ca:	4638      	mov	r0, r7
 80071cc:	f000 f84c 	bl	8007268 <__malloc_unlock>
 80071d0:	e7a1      	b.n	8007116 <_malloc_r+0x22>
 80071d2:	6025      	str	r5, [r4, #0]
 80071d4:	e7de      	b.n	8007194 <_malloc_r+0xa0>
 80071d6:	bf00      	nop
 80071d8:	20000bcc 	.word	0x20000bcc

080071dc <_realloc_r>:
 80071dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e0:	4680      	mov	r8, r0
 80071e2:	4614      	mov	r4, r2
 80071e4:	460e      	mov	r6, r1
 80071e6:	b921      	cbnz	r1, 80071f2 <_realloc_r+0x16>
 80071e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071ec:	4611      	mov	r1, r2
 80071ee:	f7ff bf81 	b.w	80070f4 <_malloc_r>
 80071f2:	b92a      	cbnz	r2, 8007200 <_realloc_r+0x24>
 80071f4:	f7ff ff12 	bl	800701c <_free_r>
 80071f8:	4625      	mov	r5, r4
 80071fa:	4628      	mov	r0, r5
 80071fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007200:	f000 f838 	bl	8007274 <_malloc_usable_size_r>
 8007204:	4284      	cmp	r4, r0
 8007206:	4607      	mov	r7, r0
 8007208:	d802      	bhi.n	8007210 <_realloc_r+0x34>
 800720a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800720e:	d812      	bhi.n	8007236 <_realloc_r+0x5a>
 8007210:	4621      	mov	r1, r4
 8007212:	4640      	mov	r0, r8
 8007214:	f7ff ff6e 	bl	80070f4 <_malloc_r>
 8007218:	4605      	mov	r5, r0
 800721a:	2800      	cmp	r0, #0
 800721c:	d0ed      	beq.n	80071fa <_realloc_r+0x1e>
 800721e:	42bc      	cmp	r4, r7
 8007220:	4622      	mov	r2, r4
 8007222:	4631      	mov	r1, r6
 8007224:	bf28      	it	cs
 8007226:	463a      	movcs	r2, r7
 8007228:	f7ff fed0 	bl	8006fcc <memcpy>
 800722c:	4631      	mov	r1, r6
 800722e:	4640      	mov	r0, r8
 8007230:	f7ff fef4 	bl	800701c <_free_r>
 8007234:	e7e1      	b.n	80071fa <_realloc_r+0x1e>
 8007236:	4635      	mov	r5, r6
 8007238:	e7df      	b.n	80071fa <_realloc_r+0x1e>
	...

0800723c <_sbrk_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4d06      	ldr	r5, [pc, #24]	; (8007258 <_sbrk_r+0x1c>)
 8007240:	2300      	movs	r3, #0
 8007242:	4604      	mov	r4, r0
 8007244:	4608      	mov	r0, r1
 8007246:	602b      	str	r3, [r5, #0]
 8007248:	f7fa fc3c 	bl	8001ac4 <_sbrk>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d102      	bne.n	8007256 <_sbrk_r+0x1a>
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	b103      	cbz	r3, 8007256 <_sbrk_r+0x1a>
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	20000bd4 	.word	0x20000bd4

0800725c <__malloc_lock>:
 800725c:	4801      	ldr	r0, [pc, #4]	; (8007264 <__malloc_lock+0x8>)
 800725e:	f000 b811 	b.w	8007284 <__retarget_lock_acquire_recursive>
 8007262:	bf00      	nop
 8007264:	20000bd8 	.word	0x20000bd8

08007268 <__malloc_unlock>:
 8007268:	4801      	ldr	r0, [pc, #4]	; (8007270 <__malloc_unlock+0x8>)
 800726a:	f000 b80c 	b.w	8007286 <__retarget_lock_release_recursive>
 800726e:	bf00      	nop
 8007270:	20000bd8 	.word	0x20000bd8

08007274 <_malloc_usable_size_r>:
 8007274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007278:	1f18      	subs	r0, r3, #4
 800727a:	2b00      	cmp	r3, #0
 800727c:	bfbc      	itt	lt
 800727e:	580b      	ldrlt	r3, [r1, r0]
 8007280:	18c0      	addlt	r0, r0, r3
 8007282:	4770      	bx	lr

08007284 <__retarget_lock_acquire_recursive>:
 8007284:	4770      	bx	lr

08007286 <__retarget_lock_release_recursive>:
 8007286:	4770      	bx	lr

08007288 <rint>:
 8007288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800728a:	ec51 0b10 	vmov	r0, r1, d0
 800728e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007292:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 8007296:	2d13      	cmp	r5, #19
 8007298:	ee10 3a10 	vmov	r3, s0
 800729c:	460c      	mov	r4, r1
 800729e:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80072a2:	dc5b      	bgt.n	800735c <rint+0xd4>
 80072a4:	2d00      	cmp	r5, #0
 80072a6:	da2d      	bge.n	8007304 <rint+0x7c>
 80072a8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80072ac:	4302      	orrs	r2, r0
 80072ae:	d025      	beq.n	80072fc <rint+0x74>
 80072b0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80072b4:	4302      	orrs	r2, r0
 80072b6:	4253      	negs	r3, r2
 80072b8:	4313      	orrs	r3, r2
 80072ba:	0b1b      	lsrs	r3, r3, #12
 80072bc:	0c4a      	lsrs	r2, r1, #17
 80072be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072c2:	0452      	lsls	r2, r2, #17
 80072c4:	ea43 0102 	orr.w	r1, r3, r2
 80072c8:	460b      	mov	r3, r1
 80072ca:	4934      	ldr	r1, [pc, #208]	; (800739c <rint+0x114>)
 80072cc:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80072d0:	e9d6 6700 	ldrd	r6, r7, [r6]
 80072d4:	4602      	mov	r2, r0
 80072d6:	4639      	mov	r1, r7
 80072d8:	4630      	mov	r0, r6
 80072da:	f7f8 ffd7 	bl	800028c <__adddf3>
 80072de:	e9cd 0100 	strd	r0, r1, [sp]
 80072e2:	463b      	mov	r3, r7
 80072e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072e8:	4632      	mov	r2, r6
 80072ea:	f7f8 ffcd 	bl	8000288 <__aeabi_dsub>
 80072ee:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 80072f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80072f6:	ea43 0704 	orr.w	r7, r3, r4
 80072fa:	4639      	mov	r1, r7
 80072fc:	ec41 0b10 	vmov	d0, r0, r1
 8007300:	b003      	add	sp, #12
 8007302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007304:	4a26      	ldr	r2, [pc, #152]	; (80073a0 <rint+0x118>)
 8007306:	412a      	asrs	r2, r5
 8007308:	ea01 0702 	and.w	r7, r1, r2
 800730c:	4307      	orrs	r7, r0
 800730e:	d0f5      	beq.n	80072fc <rint+0x74>
 8007310:	0851      	lsrs	r1, r2, #1
 8007312:	ea04 0252 	and.w	r2, r4, r2, lsr #1
 8007316:	4313      	orrs	r3, r2
 8007318:	d00c      	beq.n	8007334 <rint+0xac>
 800731a:	ea24 0201 	bic.w	r2, r4, r1
 800731e:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8007322:	2d13      	cmp	r5, #19
 8007324:	fa44 f505 	asr.w	r5, r4, r5
 8007328:	bf0c      	ite	eq
 800732a:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
 800732e:	2300      	movne	r3, #0
 8007330:	ea42 0405 	orr.w	r4, r2, r5
 8007334:	4919      	ldr	r1, [pc, #100]	; (800739c <rint+0x114>)
 8007336:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800733a:	461a      	mov	r2, r3
 800733c:	4623      	mov	r3, r4
 800733e:	e9d6 4500 	ldrd	r4, r5, [r6]
 8007342:	4620      	mov	r0, r4
 8007344:	4629      	mov	r1, r5
 8007346:	f7f8 ffa1 	bl	800028c <__adddf3>
 800734a:	e9cd 0100 	strd	r0, r1, [sp]
 800734e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007352:	4622      	mov	r2, r4
 8007354:	462b      	mov	r3, r5
 8007356:	f7f8 ff97 	bl	8000288 <__aeabi_dsub>
 800735a:	e7cf      	b.n	80072fc <rint+0x74>
 800735c:	2d33      	cmp	r5, #51	; 0x33
 800735e:	dd08      	ble.n	8007372 <rint+0xea>
 8007360:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8007364:	d1ca      	bne.n	80072fc <rint+0x74>
 8007366:	ee10 2a10 	vmov	r2, s0
 800736a:	460b      	mov	r3, r1
 800736c:	f7f8 ff8e 	bl	800028c <__adddf3>
 8007370:	e7c4      	b.n	80072fc <rint+0x74>
 8007372:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007376:	f04f 35ff 	mov.w	r5, #4294967295
 800737a:	40d5      	lsrs	r5, r2
 800737c:	4228      	tst	r0, r5
 800737e:	d0bd      	beq.n	80072fc <rint+0x74>
 8007380:	ea13 0055 	ands.w	r0, r3, r5, lsr #1
 8007384:	ea4f 0155 	mov.w	r1, r5, lsr #1
 8007388:	bf1f      	itttt	ne
 800738a:	ea23 0101 	bicne.w	r1, r3, r1
 800738e:	f04f 4380 	movne.w	r3, #1073741824	; 0x40000000
 8007392:	fa43 f202 	asrne.w	r2, r3, r2
 8007396:	ea41 0302 	orrne.w	r3, r1, r2
 800739a:	e7cb      	b.n	8007334 <rint+0xac>
 800739c:	08007ef0 	.word	0x08007ef0
 80073a0:	000fffff 	.word	0x000fffff

080073a4 <sinf>:
 80073a4:	ee10 3a10 	vmov	r3, s0
 80073a8:	b507      	push	{r0, r1, r2, lr}
 80073aa:	4a1f      	ldr	r2, [pc, #124]	; (8007428 <sinf+0x84>)
 80073ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073b0:	4293      	cmp	r3, r2
 80073b2:	dc07      	bgt.n	80073c4 <sinf+0x20>
 80073b4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800742c <sinf+0x88>
 80073b8:	2000      	movs	r0, #0
 80073ba:	b003      	add	sp, #12
 80073bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80073c0:	f000 bc48 	b.w	8007c54 <__kernel_sinf>
 80073c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80073c8:	db04      	blt.n	80073d4 <sinf+0x30>
 80073ca:	ee30 0a40 	vsub.f32	s0, s0, s0
 80073ce:	b003      	add	sp, #12
 80073d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80073d4:	4668      	mov	r0, sp
 80073d6:	f000 f82b 	bl	8007430 <__ieee754_rem_pio2f>
 80073da:	f000 0003 	and.w	r0, r0, #3
 80073de:	2801      	cmp	r0, #1
 80073e0:	d00a      	beq.n	80073f8 <sinf+0x54>
 80073e2:	2802      	cmp	r0, #2
 80073e4:	d00f      	beq.n	8007406 <sinf+0x62>
 80073e6:	b9c0      	cbnz	r0, 800741a <sinf+0x76>
 80073e8:	eddd 0a01 	vldr	s1, [sp, #4]
 80073ec:	ed9d 0a00 	vldr	s0, [sp]
 80073f0:	2001      	movs	r0, #1
 80073f2:	f000 fc2f 	bl	8007c54 <__kernel_sinf>
 80073f6:	e7ea      	b.n	80073ce <sinf+0x2a>
 80073f8:	eddd 0a01 	vldr	s1, [sp, #4]
 80073fc:	ed9d 0a00 	vldr	s0, [sp]
 8007400:	f000 f952 	bl	80076a8 <__kernel_cosf>
 8007404:	e7e3      	b.n	80073ce <sinf+0x2a>
 8007406:	eddd 0a01 	vldr	s1, [sp, #4]
 800740a:	ed9d 0a00 	vldr	s0, [sp]
 800740e:	2001      	movs	r0, #1
 8007410:	f000 fc20 	bl	8007c54 <__kernel_sinf>
 8007414:	eeb1 0a40 	vneg.f32	s0, s0
 8007418:	e7d9      	b.n	80073ce <sinf+0x2a>
 800741a:	eddd 0a01 	vldr	s1, [sp, #4]
 800741e:	ed9d 0a00 	vldr	s0, [sp]
 8007422:	f000 f941 	bl	80076a8 <__kernel_cosf>
 8007426:	e7f5      	b.n	8007414 <sinf+0x70>
 8007428:	3f490fd8 	.word	0x3f490fd8
 800742c:	00000000 	.word	0x00000000

08007430 <__ieee754_rem_pio2f>:
 8007430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007432:	ee10 6a10 	vmov	r6, s0
 8007436:	4b8e      	ldr	r3, [pc, #568]	; (8007670 <__ieee754_rem_pio2f+0x240>)
 8007438:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800743c:	429d      	cmp	r5, r3
 800743e:	b087      	sub	sp, #28
 8007440:	eef0 7a40 	vmov.f32	s15, s0
 8007444:	4604      	mov	r4, r0
 8007446:	dc05      	bgt.n	8007454 <__ieee754_rem_pio2f+0x24>
 8007448:	2300      	movs	r3, #0
 800744a:	ed80 0a00 	vstr	s0, [r0]
 800744e:	6043      	str	r3, [r0, #4]
 8007450:	2000      	movs	r0, #0
 8007452:	e01a      	b.n	800748a <__ieee754_rem_pio2f+0x5a>
 8007454:	4b87      	ldr	r3, [pc, #540]	; (8007674 <__ieee754_rem_pio2f+0x244>)
 8007456:	429d      	cmp	r5, r3
 8007458:	dc46      	bgt.n	80074e8 <__ieee754_rem_pio2f+0xb8>
 800745a:	2e00      	cmp	r6, #0
 800745c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8007678 <__ieee754_rem_pio2f+0x248>
 8007460:	4b86      	ldr	r3, [pc, #536]	; (800767c <__ieee754_rem_pio2f+0x24c>)
 8007462:	f025 050f 	bic.w	r5, r5, #15
 8007466:	dd1f      	ble.n	80074a8 <__ieee754_rem_pio2f+0x78>
 8007468:	429d      	cmp	r5, r3
 800746a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800746e:	d00e      	beq.n	800748e <__ieee754_rem_pio2f+0x5e>
 8007470:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8007680 <__ieee754_rem_pio2f+0x250>
 8007474:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007478:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800747c:	ed80 0a00 	vstr	s0, [r0]
 8007480:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007484:	2001      	movs	r0, #1
 8007486:	edc4 7a01 	vstr	s15, [r4, #4]
 800748a:	b007      	add	sp, #28
 800748c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800748e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007684 <__ieee754_rem_pio2f+0x254>
 8007492:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8007688 <__ieee754_rem_pio2f+0x258>
 8007496:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800749a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800749e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80074a2:	edc0 6a00 	vstr	s13, [r0]
 80074a6:	e7eb      	b.n	8007480 <__ieee754_rem_pio2f+0x50>
 80074a8:	429d      	cmp	r5, r3
 80074aa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80074ae:	d00e      	beq.n	80074ce <__ieee754_rem_pio2f+0x9e>
 80074b0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007680 <__ieee754_rem_pio2f+0x250>
 80074b4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80074b8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80074bc:	ed80 0a00 	vstr	s0, [r0]
 80074c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074c4:	f04f 30ff 	mov.w	r0, #4294967295
 80074c8:	edc4 7a01 	vstr	s15, [r4, #4]
 80074cc:	e7dd      	b.n	800748a <__ieee754_rem_pio2f+0x5a>
 80074ce:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007684 <__ieee754_rem_pio2f+0x254>
 80074d2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8007688 <__ieee754_rem_pio2f+0x258>
 80074d6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80074da:	ee77 6a87 	vadd.f32	s13, s15, s14
 80074de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80074e2:	edc0 6a00 	vstr	s13, [r0]
 80074e6:	e7eb      	b.n	80074c0 <__ieee754_rem_pio2f+0x90>
 80074e8:	4b68      	ldr	r3, [pc, #416]	; (800768c <__ieee754_rem_pio2f+0x25c>)
 80074ea:	429d      	cmp	r5, r3
 80074ec:	dc72      	bgt.n	80075d4 <__ieee754_rem_pio2f+0x1a4>
 80074ee:	f000 fbf9 	bl	8007ce4 <fabsf>
 80074f2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007690 <__ieee754_rem_pio2f+0x260>
 80074f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80074fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80074fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007502:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007506:	ee17 0a90 	vmov	r0, s15
 800750a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007678 <__ieee754_rem_pio2f+0x248>
 800750e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007512:	281f      	cmp	r0, #31
 8007514:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007680 <__ieee754_rem_pio2f+0x250>
 8007518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751c:	eeb1 6a47 	vneg.f32	s12, s14
 8007520:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007524:	ee16 2a90 	vmov	r2, s13
 8007528:	dc1c      	bgt.n	8007564 <__ieee754_rem_pio2f+0x134>
 800752a:	495a      	ldr	r1, [pc, #360]	; (8007694 <__ieee754_rem_pio2f+0x264>)
 800752c:	1e47      	subs	r7, r0, #1
 800752e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007532:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007536:	428b      	cmp	r3, r1
 8007538:	d014      	beq.n	8007564 <__ieee754_rem_pio2f+0x134>
 800753a:	6022      	str	r2, [r4, #0]
 800753c:	ed94 7a00 	vldr	s14, [r4]
 8007540:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007544:	2e00      	cmp	r6, #0
 8007546:	ee30 0a67 	vsub.f32	s0, s0, s15
 800754a:	ed84 0a01 	vstr	s0, [r4, #4]
 800754e:	da9c      	bge.n	800748a <__ieee754_rem_pio2f+0x5a>
 8007550:	eeb1 7a47 	vneg.f32	s14, s14
 8007554:	eeb1 0a40 	vneg.f32	s0, s0
 8007558:	ed84 7a00 	vstr	s14, [r4]
 800755c:	ed84 0a01 	vstr	s0, [r4, #4]
 8007560:	4240      	negs	r0, r0
 8007562:	e792      	b.n	800748a <__ieee754_rem_pio2f+0x5a>
 8007564:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007568:	15eb      	asrs	r3, r5, #23
 800756a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800756e:	2d08      	cmp	r5, #8
 8007570:	dde3      	ble.n	800753a <__ieee754_rem_pio2f+0x10a>
 8007572:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007684 <__ieee754_rem_pio2f+0x254>
 8007576:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007688 <__ieee754_rem_pio2f+0x258>
 800757a:	eef0 6a40 	vmov.f32	s13, s0
 800757e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007582:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007586:	eea6 0a27 	vfma.f32	s0, s12, s15
 800758a:	eef0 7a40 	vmov.f32	s15, s0
 800758e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007592:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007596:	ee15 2a90 	vmov	r2, s11
 800759a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800759e:	1a5b      	subs	r3, r3, r1
 80075a0:	2b19      	cmp	r3, #25
 80075a2:	dc04      	bgt.n	80075ae <__ieee754_rem_pio2f+0x17e>
 80075a4:	edc4 5a00 	vstr	s11, [r4]
 80075a8:	eeb0 0a66 	vmov.f32	s0, s13
 80075ac:	e7c6      	b.n	800753c <__ieee754_rem_pio2f+0x10c>
 80075ae:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007698 <__ieee754_rem_pio2f+0x268>
 80075b2:	eeb0 0a66 	vmov.f32	s0, s13
 80075b6:	eea6 0a25 	vfma.f32	s0, s12, s11
 80075ba:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80075be:	eddf 6a37 	vldr	s13, [pc, #220]	; 800769c <__ieee754_rem_pio2f+0x26c>
 80075c2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80075c6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80075ca:	ee30 7a67 	vsub.f32	s14, s0, s15
 80075ce:	ed84 7a00 	vstr	s14, [r4]
 80075d2:	e7b3      	b.n	800753c <__ieee754_rem_pio2f+0x10c>
 80075d4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80075d8:	db06      	blt.n	80075e8 <__ieee754_rem_pio2f+0x1b8>
 80075da:	ee70 7a40 	vsub.f32	s15, s0, s0
 80075de:	edc0 7a01 	vstr	s15, [r0, #4]
 80075e2:	edc0 7a00 	vstr	s15, [r0]
 80075e6:	e733      	b.n	8007450 <__ieee754_rem_pio2f+0x20>
 80075e8:	15ea      	asrs	r2, r5, #23
 80075ea:	3a86      	subs	r2, #134	; 0x86
 80075ec:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80075f0:	ee07 3a90 	vmov	s15, r3
 80075f4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80075f8:	eddf 6a29 	vldr	s13, [pc, #164]	; 80076a0 <__ieee754_rem_pio2f+0x270>
 80075fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007600:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007604:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007608:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800760c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007610:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007614:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007618:	ed8d 7a04 	vstr	s14, [sp, #16]
 800761c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007620:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007628:	edcd 7a05 	vstr	s15, [sp, #20]
 800762c:	d11e      	bne.n	800766c <__ieee754_rem_pio2f+0x23c>
 800762e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007636:	bf14      	ite	ne
 8007638:	2302      	movne	r3, #2
 800763a:	2301      	moveq	r3, #1
 800763c:	4919      	ldr	r1, [pc, #100]	; (80076a4 <__ieee754_rem_pio2f+0x274>)
 800763e:	9101      	str	r1, [sp, #4]
 8007640:	2102      	movs	r1, #2
 8007642:	9100      	str	r1, [sp, #0]
 8007644:	a803      	add	r0, sp, #12
 8007646:	4621      	mov	r1, r4
 8007648:	f000 f88e 	bl	8007768 <__kernel_rem_pio2f>
 800764c:	2e00      	cmp	r6, #0
 800764e:	f6bf af1c 	bge.w	800748a <__ieee754_rem_pio2f+0x5a>
 8007652:	edd4 7a00 	vldr	s15, [r4]
 8007656:	eef1 7a67 	vneg.f32	s15, s15
 800765a:	edc4 7a00 	vstr	s15, [r4]
 800765e:	edd4 7a01 	vldr	s15, [r4, #4]
 8007662:	eef1 7a67 	vneg.f32	s15, s15
 8007666:	edc4 7a01 	vstr	s15, [r4, #4]
 800766a:	e779      	b.n	8007560 <__ieee754_rem_pio2f+0x130>
 800766c:	2303      	movs	r3, #3
 800766e:	e7e5      	b.n	800763c <__ieee754_rem_pio2f+0x20c>
 8007670:	3f490fd8 	.word	0x3f490fd8
 8007674:	4016cbe3 	.word	0x4016cbe3
 8007678:	3fc90f80 	.word	0x3fc90f80
 800767c:	3fc90fd0 	.word	0x3fc90fd0
 8007680:	37354443 	.word	0x37354443
 8007684:	37354400 	.word	0x37354400
 8007688:	2e85a308 	.word	0x2e85a308
 800768c:	43490f80 	.word	0x43490f80
 8007690:	3f22f984 	.word	0x3f22f984
 8007694:	08007f00 	.word	0x08007f00
 8007698:	2e85a300 	.word	0x2e85a300
 800769c:	248d3132 	.word	0x248d3132
 80076a0:	43800000 	.word	0x43800000
 80076a4:	08007f80 	.word	0x08007f80

080076a8 <__kernel_cosf>:
 80076a8:	ee10 3a10 	vmov	r3, s0
 80076ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076b0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80076b4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80076b8:	da05      	bge.n	80076c6 <__kernel_cosf+0x1e>
 80076ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80076be:	ee17 2a90 	vmov	r2, s15
 80076c2:	2a00      	cmp	r2, #0
 80076c4:	d03d      	beq.n	8007742 <__kernel_cosf+0x9a>
 80076c6:	ee60 5a00 	vmul.f32	s11, s0, s0
 80076ca:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007748 <__kernel_cosf+0xa0>
 80076ce:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800774c <__kernel_cosf+0xa4>
 80076d2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007750 <__kernel_cosf+0xa8>
 80076d6:	4a1f      	ldr	r2, [pc, #124]	; (8007754 <__kernel_cosf+0xac>)
 80076d8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80076dc:	4293      	cmp	r3, r2
 80076de:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007758 <__kernel_cosf+0xb0>
 80076e2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80076e6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800775c <__kernel_cosf+0xb4>
 80076ea:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80076ee:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007760 <__kernel_cosf+0xb8>
 80076f2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80076f6:	eeb0 7a66 	vmov.f32	s14, s13
 80076fa:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80076fe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007702:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8007706:	ee67 6a25 	vmul.f32	s13, s14, s11
 800770a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800770e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007712:	dc04      	bgt.n	800771e <__kernel_cosf+0x76>
 8007714:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007718:	ee36 0a47 	vsub.f32	s0, s12, s14
 800771c:	4770      	bx	lr
 800771e:	4a11      	ldr	r2, [pc, #68]	; (8007764 <__kernel_cosf+0xbc>)
 8007720:	4293      	cmp	r3, r2
 8007722:	bfda      	itte	le
 8007724:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007728:	ee06 3a90 	vmovle	s13, r3
 800772c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8007730:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007734:	ee36 0a66 	vsub.f32	s0, s12, s13
 8007738:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800773c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007740:	4770      	bx	lr
 8007742:	eeb0 0a46 	vmov.f32	s0, s12
 8007746:	4770      	bx	lr
 8007748:	ad47d74e 	.word	0xad47d74e
 800774c:	310f74f6 	.word	0x310f74f6
 8007750:	3d2aaaab 	.word	0x3d2aaaab
 8007754:	3e999999 	.word	0x3e999999
 8007758:	b493f27c 	.word	0xb493f27c
 800775c:	37d00d01 	.word	0x37d00d01
 8007760:	bab60b61 	.word	0xbab60b61
 8007764:	3f480000 	.word	0x3f480000

08007768 <__kernel_rem_pio2f>:
 8007768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776c:	ed2d 8b04 	vpush	{d8-d9}
 8007770:	b0d9      	sub	sp, #356	; 0x164
 8007772:	4688      	mov	r8, r1
 8007774:	9002      	str	r0, [sp, #8]
 8007776:	49bb      	ldr	r1, [pc, #748]	; (8007a64 <__kernel_rem_pio2f+0x2fc>)
 8007778:	9866      	ldr	r0, [sp, #408]	; 0x198
 800777a:	9301      	str	r3, [sp, #4]
 800777c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8007780:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8007784:	1e59      	subs	r1, r3, #1
 8007786:	1d13      	adds	r3, r2, #4
 8007788:	db27      	blt.n	80077da <__kernel_rem_pio2f+0x72>
 800778a:	f1b2 0b03 	subs.w	fp, r2, #3
 800778e:	bf48      	it	mi
 8007790:	f102 0b04 	addmi.w	fp, r2, #4
 8007794:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8007798:	1c45      	adds	r5, r0, #1
 800779a:	00ec      	lsls	r4, r5, #3
 800779c:	1a47      	subs	r7, r0, r1
 800779e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8007a74 <__kernel_rem_pio2f+0x30c>
 80077a2:	9403      	str	r4, [sp, #12]
 80077a4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80077a8:	eb0a 0c01 	add.w	ip, sl, r1
 80077ac:	ae1c      	add	r6, sp, #112	; 0x70
 80077ae:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80077b2:	2400      	movs	r4, #0
 80077b4:	4564      	cmp	r4, ip
 80077b6:	dd12      	ble.n	80077de <__kernel_rem_pio2f+0x76>
 80077b8:	9b01      	ldr	r3, [sp, #4]
 80077ba:	ac1c      	add	r4, sp, #112	; 0x70
 80077bc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80077c0:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80077c4:	f04f 0c00 	mov.w	ip, #0
 80077c8:	45d4      	cmp	ip, sl
 80077ca:	dc27      	bgt.n	800781c <__kernel_rem_pio2f+0xb4>
 80077cc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80077d0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8007a74 <__kernel_rem_pio2f+0x30c>
 80077d4:	4627      	mov	r7, r4
 80077d6:	2600      	movs	r6, #0
 80077d8:	e016      	b.n	8007808 <__kernel_rem_pio2f+0xa0>
 80077da:	2000      	movs	r0, #0
 80077dc:	e7dc      	b.n	8007798 <__kernel_rem_pio2f+0x30>
 80077de:	42e7      	cmn	r7, r4
 80077e0:	bf5d      	ittte	pl
 80077e2:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80077e6:	ee07 3a90 	vmovpl	s15, r3
 80077ea:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80077ee:	eef0 7a47 	vmovmi.f32	s15, s14
 80077f2:	ece6 7a01 	vstmia	r6!, {s15}
 80077f6:	3401      	adds	r4, #1
 80077f8:	e7dc      	b.n	80077b4 <__kernel_rem_pio2f+0x4c>
 80077fa:	ecf9 6a01 	vldmia	r9!, {s13}
 80077fe:	ed97 7a00 	vldr	s14, [r7]
 8007802:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007806:	3601      	adds	r6, #1
 8007808:	428e      	cmp	r6, r1
 800780a:	f1a7 0704 	sub.w	r7, r7, #4
 800780e:	ddf4      	ble.n	80077fa <__kernel_rem_pio2f+0x92>
 8007810:	eceb 7a01 	vstmia	fp!, {s15}
 8007814:	f10c 0c01 	add.w	ip, ip, #1
 8007818:	3404      	adds	r4, #4
 800781a:	e7d5      	b.n	80077c8 <__kernel_rem_pio2f+0x60>
 800781c:	ab08      	add	r3, sp, #32
 800781e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007822:	eddf 8a93 	vldr	s17, [pc, #588]	; 8007a70 <__kernel_rem_pio2f+0x308>
 8007826:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8007a6c <__kernel_rem_pio2f+0x304>
 800782a:	9304      	str	r3, [sp, #16]
 800782c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8007830:	4656      	mov	r6, sl
 8007832:	00b3      	lsls	r3, r6, #2
 8007834:	9305      	str	r3, [sp, #20]
 8007836:	ab58      	add	r3, sp, #352	; 0x160
 8007838:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800783c:	ac08      	add	r4, sp, #32
 800783e:	ab44      	add	r3, sp, #272	; 0x110
 8007840:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8007844:	46a4      	mov	ip, r4
 8007846:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800784a:	4637      	mov	r7, r6
 800784c:	2f00      	cmp	r7, #0
 800784e:	f1a0 0004 	sub.w	r0, r0, #4
 8007852:	dc4f      	bgt.n	80078f4 <__kernel_rem_pio2f+0x18c>
 8007854:	4628      	mov	r0, r5
 8007856:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800785a:	f000 fa8d 	bl	8007d78 <scalbnf>
 800785e:	eeb0 8a40 	vmov.f32	s16, s0
 8007862:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007866:	ee28 0a00 	vmul.f32	s0, s16, s0
 800786a:	f000 fa43 	bl	8007cf4 <floorf>
 800786e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007872:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007876:	2d00      	cmp	r5, #0
 8007878:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800787c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007880:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8007884:	ee17 9a90 	vmov	r9, s15
 8007888:	ee38 8a40 	vsub.f32	s16, s16, s0
 800788c:	dd44      	ble.n	8007918 <__kernel_rem_pio2f+0x1b0>
 800788e:	f106 3cff 	add.w	ip, r6, #4294967295
 8007892:	ab08      	add	r3, sp, #32
 8007894:	f1c5 0e08 	rsb	lr, r5, #8
 8007898:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800789c:	fa47 f00e 	asr.w	r0, r7, lr
 80078a0:	4481      	add	r9, r0
 80078a2:	fa00 f00e 	lsl.w	r0, r0, lr
 80078a6:	1a3f      	subs	r7, r7, r0
 80078a8:	f1c5 0007 	rsb	r0, r5, #7
 80078ac:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80078b0:	4107      	asrs	r7, r0
 80078b2:	2f00      	cmp	r7, #0
 80078b4:	dd3f      	ble.n	8007936 <__kernel_rem_pio2f+0x1ce>
 80078b6:	f04f 0e00 	mov.w	lr, #0
 80078ba:	f109 0901 	add.w	r9, r9, #1
 80078be:	4673      	mov	r3, lr
 80078c0:	4576      	cmp	r6, lr
 80078c2:	dc6b      	bgt.n	800799c <__kernel_rem_pio2f+0x234>
 80078c4:	2d00      	cmp	r5, #0
 80078c6:	dd04      	ble.n	80078d2 <__kernel_rem_pio2f+0x16a>
 80078c8:	2d01      	cmp	r5, #1
 80078ca:	d078      	beq.n	80079be <__kernel_rem_pio2f+0x256>
 80078cc:	2d02      	cmp	r5, #2
 80078ce:	f000 8081 	beq.w	80079d4 <__kernel_rem_pio2f+0x26c>
 80078d2:	2f02      	cmp	r7, #2
 80078d4:	d12f      	bne.n	8007936 <__kernel_rem_pio2f+0x1ce>
 80078d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80078da:	ee30 8a48 	vsub.f32	s16, s0, s16
 80078de:	b353      	cbz	r3, 8007936 <__kernel_rem_pio2f+0x1ce>
 80078e0:	4628      	mov	r0, r5
 80078e2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80078e6:	f000 fa47 	bl	8007d78 <scalbnf>
 80078ea:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80078ee:	ee38 8a40 	vsub.f32	s16, s16, s0
 80078f2:	e020      	b.n	8007936 <__kernel_rem_pio2f+0x1ce>
 80078f4:	ee60 7a28 	vmul.f32	s15, s0, s17
 80078f8:	3f01      	subs	r7, #1
 80078fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007902:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007906:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800790a:	ecac 0a01 	vstmia	ip!, {s0}
 800790e:	ed90 0a00 	vldr	s0, [r0]
 8007912:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007916:	e799      	b.n	800784c <__kernel_rem_pio2f+0xe4>
 8007918:	d105      	bne.n	8007926 <__kernel_rem_pio2f+0x1be>
 800791a:	1e70      	subs	r0, r6, #1
 800791c:	ab08      	add	r3, sp, #32
 800791e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8007922:	11ff      	asrs	r7, r7, #7
 8007924:	e7c5      	b.n	80078b2 <__kernel_rem_pio2f+0x14a>
 8007926:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800792a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800792e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007932:	da31      	bge.n	8007998 <__kernel_rem_pio2f+0x230>
 8007934:	2700      	movs	r7, #0
 8007936:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800793a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793e:	f040 809b 	bne.w	8007a78 <__kernel_rem_pio2f+0x310>
 8007942:	1e74      	subs	r4, r6, #1
 8007944:	46a4      	mov	ip, r4
 8007946:	2000      	movs	r0, #0
 8007948:	45d4      	cmp	ip, sl
 800794a:	da4a      	bge.n	80079e2 <__kernel_rem_pio2f+0x27a>
 800794c:	2800      	cmp	r0, #0
 800794e:	d07a      	beq.n	8007a46 <__kernel_rem_pio2f+0x2de>
 8007950:	ab08      	add	r3, sp, #32
 8007952:	3d08      	subs	r5, #8
 8007954:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 8081 	beq.w	8007a60 <__kernel_rem_pio2f+0x2f8>
 800795e:	4628      	mov	r0, r5
 8007960:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007964:	00a5      	lsls	r5, r4, #2
 8007966:	f000 fa07 	bl	8007d78 <scalbnf>
 800796a:	aa44      	add	r2, sp, #272	; 0x110
 800796c:	1d2b      	adds	r3, r5, #4
 800796e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8007a70 <__kernel_rem_pio2f+0x308>
 8007972:	18d1      	adds	r1, r2, r3
 8007974:	4622      	mov	r2, r4
 8007976:	2a00      	cmp	r2, #0
 8007978:	f280 80ae 	bge.w	8007ad8 <__kernel_rem_pio2f+0x370>
 800797c:	4622      	mov	r2, r4
 800797e:	2a00      	cmp	r2, #0
 8007980:	f2c0 80cc 	blt.w	8007b1c <__kernel_rem_pio2f+0x3b4>
 8007984:	a944      	add	r1, sp, #272	; 0x110
 8007986:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800798a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8007a68 <__kernel_rem_pio2f+0x300>
 800798e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8007a74 <__kernel_rem_pio2f+0x30c>
 8007992:	2000      	movs	r0, #0
 8007994:	1aa1      	subs	r1, r4, r2
 8007996:	e0b6      	b.n	8007b06 <__kernel_rem_pio2f+0x39e>
 8007998:	2702      	movs	r7, #2
 800799a:	e78c      	b.n	80078b6 <__kernel_rem_pio2f+0x14e>
 800799c:	6820      	ldr	r0, [r4, #0]
 800799e:	b94b      	cbnz	r3, 80079b4 <__kernel_rem_pio2f+0x24c>
 80079a0:	b118      	cbz	r0, 80079aa <__kernel_rem_pio2f+0x242>
 80079a2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80079a6:	6020      	str	r0, [r4, #0]
 80079a8:	2001      	movs	r0, #1
 80079aa:	f10e 0e01 	add.w	lr, lr, #1
 80079ae:	3404      	adds	r4, #4
 80079b0:	4603      	mov	r3, r0
 80079b2:	e785      	b.n	80078c0 <__kernel_rem_pio2f+0x158>
 80079b4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80079b8:	6020      	str	r0, [r4, #0]
 80079ba:	4618      	mov	r0, r3
 80079bc:	e7f5      	b.n	80079aa <__kernel_rem_pio2f+0x242>
 80079be:	1e74      	subs	r4, r6, #1
 80079c0:	a808      	add	r0, sp, #32
 80079c2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80079c6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80079ca:	f10d 0c20 	add.w	ip, sp, #32
 80079ce:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80079d2:	e77e      	b.n	80078d2 <__kernel_rem_pio2f+0x16a>
 80079d4:	1e74      	subs	r4, r6, #1
 80079d6:	a808      	add	r0, sp, #32
 80079d8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80079dc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80079e0:	e7f3      	b.n	80079ca <__kernel_rem_pio2f+0x262>
 80079e2:	ab08      	add	r3, sp, #32
 80079e4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80079e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80079ec:	4318      	orrs	r0, r3
 80079ee:	e7ab      	b.n	8007948 <__kernel_rem_pio2f+0x1e0>
 80079f0:	f10c 0c01 	add.w	ip, ip, #1
 80079f4:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80079f8:	2c00      	cmp	r4, #0
 80079fa:	d0f9      	beq.n	80079f0 <__kernel_rem_pio2f+0x288>
 80079fc:	9b05      	ldr	r3, [sp, #20]
 80079fe:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007a02:	eb0d 0003 	add.w	r0, sp, r3
 8007a06:	9b01      	ldr	r3, [sp, #4]
 8007a08:	18f4      	adds	r4, r6, r3
 8007a0a:	ab1c      	add	r3, sp, #112	; 0x70
 8007a0c:	1c77      	adds	r7, r6, #1
 8007a0e:	384c      	subs	r0, #76	; 0x4c
 8007a10:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007a14:	4466      	add	r6, ip
 8007a16:	42be      	cmp	r6, r7
 8007a18:	f6ff af0b 	blt.w	8007832 <__kernel_rem_pio2f+0xca>
 8007a1c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8007a20:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007a24:	ee07 3a90 	vmov	s15, r3
 8007a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a2c:	f04f 0c00 	mov.w	ip, #0
 8007a30:	ece4 7a01 	vstmia	r4!, {s15}
 8007a34:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8007a74 <__kernel_rem_pio2f+0x30c>
 8007a38:	46a1      	mov	r9, r4
 8007a3a:	458c      	cmp	ip, r1
 8007a3c:	dd07      	ble.n	8007a4e <__kernel_rem_pio2f+0x2e6>
 8007a3e:	ece0 7a01 	vstmia	r0!, {s15}
 8007a42:	3701      	adds	r7, #1
 8007a44:	e7e7      	b.n	8007a16 <__kernel_rem_pio2f+0x2ae>
 8007a46:	9804      	ldr	r0, [sp, #16]
 8007a48:	f04f 0c01 	mov.w	ip, #1
 8007a4c:	e7d2      	b.n	80079f4 <__kernel_rem_pio2f+0x28c>
 8007a4e:	ecfe 6a01 	vldmia	lr!, {s13}
 8007a52:	ed39 7a01 	vldmdb	r9!, {s14}
 8007a56:	f10c 0c01 	add.w	ip, ip, #1
 8007a5a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007a5e:	e7ec      	b.n	8007a3a <__kernel_rem_pio2f+0x2d2>
 8007a60:	3c01      	subs	r4, #1
 8007a62:	e775      	b.n	8007950 <__kernel_rem_pio2f+0x1e8>
 8007a64:	080082c4 	.word	0x080082c4
 8007a68:	08008298 	.word	0x08008298
 8007a6c:	43800000 	.word	0x43800000
 8007a70:	3b800000 	.word	0x3b800000
 8007a74:	00000000 	.word	0x00000000
 8007a78:	9b03      	ldr	r3, [sp, #12]
 8007a7a:	eeb0 0a48 	vmov.f32	s0, s16
 8007a7e:	1a98      	subs	r0, r3, r2
 8007a80:	f000 f97a 	bl	8007d78 <scalbnf>
 8007a84:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8007a6c <__kernel_rem_pio2f+0x304>
 8007a88:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a90:	db19      	blt.n	8007ac6 <__kernel_rem_pio2f+0x35e>
 8007a92:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007a70 <__kernel_rem_pio2f+0x308>
 8007a96:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007a9a:	aa08      	add	r2, sp, #32
 8007a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007aa0:	1c74      	adds	r4, r6, #1
 8007aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007aa6:	3508      	adds	r5, #8
 8007aa8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007aac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ab0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007ab4:	ee10 3a10 	vmov	r3, s0
 8007ab8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8007abc:	ee17 3a90 	vmov	r3, s15
 8007ac0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007ac4:	e74b      	b.n	800795e <__kernel_rem_pio2f+0x1f6>
 8007ac6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007aca:	aa08      	add	r2, sp, #32
 8007acc:	ee10 3a10 	vmov	r3, s0
 8007ad0:	4634      	mov	r4, r6
 8007ad2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8007ad6:	e742      	b.n	800795e <__kernel_rem_pio2f+0x1f6>
 8007ad8:	a808      	add	r0, sp, #32
 8007ada:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8007ade:	9001      	str	r0, [sp, #4]
 8007ae0:	ee07 0a90 	vmov	s15, r0
 8007ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ae8:	3a01      	subs	r2, #1
 8007aea:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007aee:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007af2:	ed61 7a01 	vstmdb	r1!, {s15}
 8007af6:	e73e      	b.n	8007976 <__kernel_rem_pio2f+0x20e>
 8007af8:	ecfc 6a01 	vldmia	ip!, {s13}
 8007afc:	ecb6 7a01 	vldmia	r6!, {s14}
 8007b00:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007b04:	3001      	adds	r0, #1
 8007b06:	4550      	cmp	r0, sl
 8007b08:	dc01      	bgt.n	8007b0e <__kernel_rem_pio2f+0x3a6>
 8007b0a:	4288      	cmp	r0, r1
 8007b0c:	ddf4      	ble.n	8007af8 <__kernel_rem_pio2f+0x390>
 8007b0e:	a858      	add	r0, sp, #352	; 0x160
 8007b10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b14:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8007b18:	3a01      	subs	r2, #1
 8007b1a:	e730      	b.n	800797e <__kernel_rem_pio2f+0x216>
 8007b1c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8007b1e:	2a02      	cmp	r2, #2
 8007b20:	dc09      	bgt.n	8007b36 <__kernel_rem_pio2f+0x3ce>
 8007b22:	2a00      	cmp	r2, #0
 8007b24:	dc2a      	bgt.n	8007b7c <__kernel_rem_pio2f+0x414>
 8007b26:	d043      	beq.n	8007bb0 <__kernel_rem_pio2f+0x448>
 8007b28:	f009 0007 	and.w	r0, r9, #7
 8007b2c:	b059      	add	sp, #356	; 0x164
 8007b2e:	ecbd 8b04 	vpop	{d8-d9}
 8007b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b36:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8007b38:	2b03      	cmp	r3, #3
 8007b3a:	d1f5      	bne.n	8007b28 <__kernel_rem_pio2f+0x3c0>
 8007b3c:	ab30      	add	r3, sp, #192	; 0xc0
 8007b3e:	442b      	add	r3, r5
 8007b40:	461a      	mov	r2, r3
 8007b42:	4619      	mov	r1, r3
 8007b44:	4620      	mov	r0, r4
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f1a1 0104 	sub.w	r1, r1, #4
 8007b4c:	dc51      	bgt.n	8007bf2 <__kernel_rem_pio2f+0x48a>
 8007b4e:	4621      	mov	r1, r4
 8007b50:	2901      	cmp	r1, #1
 8007b52:	f1a2 0204 	sub.w	r2, r2, #4
 8007b56:	dc5c      	bgt.n	8007c12 <__kernel_rem_pio2f+0x4aa>
 8007b58:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8007a74 <__kernel_rem_pio2f+0x30c>
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	2c01      	cmp	r4, #1
 8007b60:	dc67      	bgt.n	8007c32 <__kernel_rem_pio2f+0x4ca>
 8007b62:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8007b66:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8007b6a:	2f00      	cmp	r7, #0
 8007b6c:	d167      	bne.n	8007c3e <__kernel_rem_pio2f+0x4d6>
 8007b6e:	edc8 6a00 	vstr	s13, [r8]
 8007b72:	ed88 7a01 	vstr	s14, [r8, #4]
 8007b76:	edc8 7a02 	vstr	s15, [r8, #8]
 8007b7a:	e7d5      	b.n	8007b28 <__kernel_rem_pio2f+0x3c0>
 8007b7c:	aa30      	add	r2, sp, #192	; 0xc0
 8007b7e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8007a74 <__kernel_rem_pio2f+0x30c>
 8007b82:	4413      	add	r3, r2
 8007b84:	4622      	mov	r2, r4
 8007b86:	2a00      	cmp	r2, #0
 8007b88:	da24      	bge.n	8007bd4 <__kernel_rem_pio2f+0x46c>
 8007b8a:	b34f      	cbz	r7, 8007be0 <__kernel_rem_pio2f+0x478>
 8007b8c:	eef1 7a47 	vneg.f32	s15, s14
 8007b90:	edc8 7a00 	vstr	s15, [r8]
 8007b94:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8007b98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b9c:	aa31      	add	r2, sp, #196	; 0xc4
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	429c      	cmp	r4, r3
 8007ba2:	da20      	bge.n	8007be6 <__kernel_rem_pio2f+0x47e>
 8007ba4:	b10f      	cbz	r7, 8007baa <__kernel_rem_pio2f+0x442>
 8007ba6:	eef1 7a67 	vneg.f32	s15, s15
 8007baa:	edc8 7a01 	vstr	s15, [r8, #4]
 8007bae:	e7bb      	b.n	8007b28 <__kernel_rem_pio2f+0x3c0>
 8007bb0:	aa30      	add	r2, sp, #192	; 0xc0
 8007bb2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8007a74 <__kernel_rem_pio2f+0x30c>
 8007bb6:	4413      	add	r3, r2
 8007bb8:	2c00      	cmp	r4, #0
 8007bba:	da05      	bge.n	8007bc8 <__kernel_rem_pio2f+0x460>
 8007bbc:	b10f      	cbz	r7, 8007bc2 <__kernel_rem_pio2f+0x45a>
 8007bbe:	eef1 7a67 	vneg.f32	s15, s15
 8007bc2:	edc8 7a00 	vstr	s15, [r8]
 8007bc6:	e7af      	b.n	8007b28 <__kernel_rem_pio2f+0x3c0>
 8007bc8:	ed33 7a01 	vldmdb	r3!, {s14}
 8007bcc:	3c01      	subs	r4, #1
 8007bce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bd2:	e7f1      	b.n	8007bb8 <__kernel_rem_pio2f+0x450>
 8007bd4:	ed73 7a01 	vldmdb	r3!, {s15}
 8007bd8:	3a01      	subs	r2, #1
 8007bda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007bde:	e7d2      	b.n	8007b86 <__kernel_rem_pio2f+0x41e>
 8007be0:	eef0 7a47 	vmov.f32	s15, s14
 8007be4:	e7d4      	b.n	8007b90 <__kernel_rem_pio2f+0x428>
 8007be6:	ecb2 7a01 	vldmia	r2!, {s14}
 8007bea:	3301      	adds	r3, #1
 8007bec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bf0:	e7d6      	b.n	8007ba0 <__kernel_rem_pio2f+0x438>
 8007bf2:	edd1 7a00 	vldr	s15, [r1]
 8007bf6:	edd1 6a01 	vldr	s13, [r1, #4]
 8007bfa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007bfe:	3801      	subs	r0, #1
 8007c00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c04:	ed81 7a00 	vstr	s14, [r1]
 8007c08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c0c:	edc1 7a01 	vstr	s15, [r1, #4]
 8007c10:	e799      	b.n	8007b46 <__kernel_rem_pio2f+0x3de>
 8007c12:	edd2 7a00 	vldr	s15, [r2]
 8007c16:	edd2 6a01 	vldr	s13, [r2, #4]
 8007c1a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007c1e:	3901      	subs	r1, #1
 8007c20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c24:	ed82 7a00 	vstr	s14, [r2]
 8007c28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c2c:	edc2 7a01 	vstr	s15, [r2, #4]
 8007c30:	e78e      	b.n	8007b50 <__kernel_rem_pio2f+0x3e8>
 8007c32:	ed33 7a01 	vldmdb	r3!, {s14}
 8007c36:	3c01      	subs	r4, #1
 8007c38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c3c:	e78f      	b.n	8007b5e <__kernel_rem_pio2f+0x3f6>
 8007c3e:	eef1 6a66 	vneg.f32	s13, s13
 8007c42:	eeb1 7a47 	vneg.f32	s14, s14
 8007c46:	edc8 6a00 	vstr	s13, [r8]
 8007c4a:	ed88 7a01 	vstr	s14, [r8, #4]
 8007c4e:	eef1 7a67 	vneg.f32	s15, s15
 8007c52:	e790      	b.n	8007b76 <__kernel_rem_pio2f+0x40e>

08007c54 <__kernel_sinf>:
 8007c54:	ee10 3a10 	vmov	r3, s0
 8007c58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c5c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007c60:	da04      	bge.n	8007c6c <__kernel_sinf+0x18>
 8007c62:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007c66:	ee17 3a90 	vmov	r3, s15
 8007c6a:	b35b      	cbz	r3, 8007cc4 <__kernel_sinf+0x70>
 8007c6c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007c70:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007cc8 <__kernel_sinf+0x74>
 8007c74:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007ccc <__kernel_sinf+0x78>
 8007c78:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007c7c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007cd0 <__kernel_sinf+0x7c>
 8007c80:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007c84:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007cd4 <__kernel_sinf+0x80>
 8007c88:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007c8c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007cd8 <__kernel_sinf+0x84>
 8007c90:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007c94:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007c98:	b930      	cbnz	r0, 8007ca8 <__kernel_sinf+0x54>
 8007c9a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007cdc <__kernel_sinf+0x88>
 8007c9e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007ca2:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007ca6:	4770      	bx	lr
 8007ca8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007cac:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007cb0:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007cb4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007cb8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007ce0 <__kernel_sinf+0x8c>
 8007cbc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007cc0:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	2f2ec9d3 	.word	0x2f2ec9d3
 8007ccc:	b2d72f34 	.word	0xb2d72f34
 8007cd0:	3638ef1b 	.word	0x3638ef1b
 8007cd4:	b9500d01 	.word	0xb9500d01
 8007cd8:	3c088889 	.word	0x3c088889
 8007cdc:	be2aaaab 	.word	0xbe2aaaab
 8007ce0:	3e2aaaab 	.word	0x3e2aaaab

08007ce4 <fabsf>:
 8007ce4:	ee10 3a10 	vmov	r3, s0
 8007ce8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cec:	ee00 3a10 	vmov	s0, r3
 8007cf0:	4770      	bx	lr
	...

08007cf4 <floorf>:
 8007cf4:	ee10 3a10 	vmov	r3, s0
 8007cf8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007cfc:	3a7f      	subs	r2, #127	; 0x7f
 8007cfe:	2a16      	cmp	r2, #22
 8007d00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007d04:	dc2a      	bgt.n	8007d5c <floorf+0x68>
 8007d06:	2a00      	cmp	r2, #0
 8007d08:	da11      	bge.n	8007d2e <floorf+0x3a>
 8007d0a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007d6c <floorf+0x78>
 8007d0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007d12:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d1a:	dd05      	ble.n	8007d28 <floorf+0x34>
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	da23      	bge.n	8007d68 <floorf+0x74>
 8007d20:	4a13      	ldr	r2, [pc, #76]	; (8007d70 <floorf+0x7c>)
 8007d22:	2900      	cmp	r1, #0
 8007d24:	bf18      	it	ne
 8007d26:	4613      	movne	r3, r2
 8007d28:	ee00 3a10 	vmov	s0, r3
 8007d2c:	4770      	bx	lr
 8007d2e:	4911      	ldr	r1, [pc, #68]	; (8007d74 <floorf+0x80>)
 8007d30:	4111      	asrs	r1, r2
 8007d32:	420b      	tst	r3, r1
 8007d34:	d0fa      	beq.n	8007d2c <floorf+0x38>
 8007d36:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007d6c <floorf+0x78>
 8007d3a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007d3e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d46:	ddef      	ble.n	8007d28 <floorf+0x34>
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	bfbe      	ittt	lt
 8007d4c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007d50:	fa40 f202 	asrlt.w	r2, r0, r2
 8007d54:	189b      	addlt	r3, r3, r2
 8007d56:	ea23 0301 	bic.w	r3, r3, r1
 8007d5a:	e7e5      	b.n	8007d28 <floorf+0x34>
 8007d5c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007d60:	d3e4      	bcc.n	8007d2c <floorf+0x38>
 8007d62:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007d66:	4770      	bx	lr
 8007d68:	2300      	movs	r3, #0
 8007d6a:	e7dd      	b.n	8007d28 <floorf+0x34>
 8007d6c:	7149f2ca 	.word	0x7149f2ca
 8007d70:	bf800000 	.word	0xbf800000
 8007d74:	007fffff 	.word	0x007fffff

08007d78 <scalbnf>:
 8007d78:	ee10 3a10 	vmov	r3, s0
 8007d7c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007d80:	d025      	beq.n	8007dce <scalbnf+0x56>
 8007d82:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007d86:	d302      	bcc.n	8007d8e <scalbnf+0x16>
 8007d88:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007d8c:	4770      	bx	lr
 8007d8e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007d92:	d122      	bne.n	8007dda <scalbnf+0x62>
 8007d94:	4b2a      	ldr	r3, [pc, #168]	; (8007e40 <scalbnf+0xc8>)
 8007d96:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007e44 <scalbnf+0xcc>
 8007d9a:	4298      	cmp	r0, r3
 8007d9c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007da0:	db16      	blt.n	8007dd0 <scalbnf+0x58>
 8007da2:	ee10 3a10 	vmov	r3, s0
 8007da6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007daa:	3a19      	subs	r2, #25
 8007dac:	4402      	add	r2, r0
 8007dae:	2afe      	cmp	r2, #254	; 0xfe
 8007db0:	dd15      	ble.n	8007dde <scalbnf+0x66>
 8007db2:	ee10 3a10 	vmov	r3, s0
 8007db6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007e48 <scalbnf+0xd0>
 8007dba:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007e4c <scalbnf+0xd4>
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	eeb0 7a67 	vmov.f32	s14, s15
 8007dc4:	bfb8      	it	lt
 8007dc6:	eef0 7a66 	vmovlt.f32	s15, s13
 8007dca:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007dce:	4770      	bx	lr
 8007dd0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007e50 <scalbnf+0xd8>
 8007dd4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007dd8:	4770      	bx	lr
 8007dda:	0dd2      	lsrs	r2, r2, #23
 8007ddc:	e7e6      	b.n	8007dac <scalbnf+0x34>
 8007dde:	2a00      	cmp	r2, #0
 8007de0:	dd06      	ble.n	8007df0 <scalbnf+0x78>
 8007de2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007de6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007dea:	ee00 3a10 	vmov	s0, r3
 8007dee:	4770      	bx	lr
 8007df0:	f112 0f16 	cmn.w	r2, #22
 8007df4:	da1a      	bge.n	8007e2c <scalbnf+0xb4>
 8007df6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007dfa:	4298      	cmp	r0, r3
 8007dfc:	ee10 3a10 	vmov	r3, s0
 8007e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e04:	dd0a      	ble.n	8007e1c <scalbnf+0xa4>
 8007e06:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007e48 <scalbnf+0xd0>
 8007e0a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007e4c <scalbnf+0xd4>
 8007e0e:	eef0 7a40 	vmov.f32	s15, s0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	bf18      	it	ne
 8007e16:	eeb0 0a47 	vmovne.f32	s0, s14
 8007e1a:	e7db      	b.n	8007dd4 <scalbnf+0x5c>
 8007e1c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007e50 <scalbnf+0xd8>
 8007e20:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007e54 <scalbnf+0xdc>
 8007e24:	eef0 7a40 	vmov.f32	s15, s0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	e7f3      	b.n	8007e14 <scalbnf+0x9c>
 8007e2c:	3219      	adds	r2, #25
 8007e2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e32:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007e36:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007e58 <scalbnf+0xe0>
 8007e3a:	ee07 3a10 	vmov	s14, r3
 8007e3e:	e7c4      	b.n	8007dca <scalbnf+0x52>
 8007e40:	ffff3cb0 	.word	0xffff3cb0
 8007e44:	4c000000 	.word	0x4c000000
 8007e48:	7149f2ca 	.word	0x7149f2ca
 8007e4c:	f149f2ca 	.word	0xf149f2ca
 8007e50:	0da24260 	.word	0x0da24260
 8007e54:	8da24260 	.word	0x8da24260
 8007e58:	33000000 	.word	0x33000000

08007e5c <_init>:
 8007e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5e:	bf00      	nop
 8007e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e62:	bc08      	pop	{r3}
 8007e64:	469e      	mov	lr, r3
 8007e66:	4770      	bx	lr

08007e68 <_fini>:
 8007e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6a:	bf00      	nop
 8007e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e6e:	bc08      	pop	{r3}
 8007e70:	469e      	mov	lr, r3
 8007e72:	4770      	bx	lr
