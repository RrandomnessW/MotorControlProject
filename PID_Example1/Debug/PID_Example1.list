
PID_Example1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08009250  08009250  00019250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096a8  080096a8  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080096a8  080096a8  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096a8  080096a8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096a8  080096a8  000196a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096ac  080096ac  000196ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080096b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c80  20000090  08009740  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d10  08009740  00020d10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129e3  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000243a  00000000  00000000  00032aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00034ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  00035db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c058  00000000  00000000  00036ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012111  00000000  00000000  00052c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aadcf  00000000  00000000  00064d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010fae0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000454c  00000000  00000000  0010fb30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009234 	.word	0x08009234

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009234 	.word	0x08009234

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_d2f>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab4:	bf24      	itt	cs
 8000ab6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000abe:	d90d      	bls.n	8000adc <__aeabi_d2f+0x30>
 8000ac0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000acc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad4:	bf08      	it	eq
 8000ad6:	f020 0001 	biceq.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae0:	d121      	bne.n	8000b26 <__aeabi_d2f+0x7a>
 8000ae2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae6:	bfbc      	itt	lt
 8000ae8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	4770      	bxlt	lr
 8000aee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af6:	f1c2 0218 	rsb	r2, r2, #24
 8000afa:	f1c2 0c20 	rsb	ip, r2, #32
 8000afe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b02:	fa20 f002 	lsr.w	r0, r0, r2
 8000b06:	bf18      	it	ne
 8000b08:	f040 0001 	orrne.w	r0, r0, #1
 8000b0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b18:	ea40 000c 	orr.w	r0, r0, ip
 8000b1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b24:	e7cc      	b.n	8000ac0 <__aeabi_d2f+0x14>
 8000b26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2a:	d107      	bne.n	8000b3c <__aeabi_d2f+0x90>
 8000b2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b30:	bf1e      	ittt	ne
 8000b32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3a:	4770      	bxne	lr
 8000b3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	0000      	movs	r0, r0
	...

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b56:	f001 fb6d 	bl	8002234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5a:	f000 f98f 	bl	8000e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5e:	f000 fd39 	bl	80015d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b62:	f000 fd11 	bl	8001588 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b66:	f000 fcdf 	bl	8001528 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b6a:	f000 facf 	bl	800110c <MX_TIM2_Init>
  MX_TIM6_Init();
 8000b6e:	f000 fb4f 	bl	8001210 <MX_TIM6_Init>
  MX_TIM15_Init();
 8000b72:	f000 fb83 	bl	800127c <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8000b76:	f000 fca7 	bl	80014c8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000b7a:	f000 fa3f 	bl	8000ffc <MX_TIM1_Init>
  MX_TIM16_Init();
 8000b7e:	f000 fc0f 	bl	80013a0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000b82:	f000 fc57 	bl	8001434 <MX_TIM17_Init>
  MX_ADC1_Init();
 8000b86:	f000 f9dd 	bl	8000f44 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit (&huart1, message, strlen(message), 100 );
 8000b8a:	48a1      	ldr	r0, [pc, #644]	; (8000e10 <main+0x2c0>)
 8000b8c:	f7ff fb20 	bl	80001d0 <strlen>
 8000b90:	4603      	mov	r3, r0
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	2364      	movs	r3, #100	; 0x64
 8000b96:	499e      	ldr	r1, [pc, #632]	; (8000e10 <main+0x2c0>)
 8000b98:	489e      	ldr	r0, [pc, #632]	; (8000e14 <main+0x2c4>)
 8000b9a:	f005 fe24 	bl	80067e6 <HAL_UART_Transmit>

  __HAL_UART_ENABLE_IT( &huart1, UART_IT_IDLE );//enable idle interrupt
 8000b9e:	4b9d      	ldr	r3, [pc, #628]	; (8000e14 <main+0x2c4>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b9b      	ldr	r3, [pc, #620]	; (8000e14 <main+0x2c4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f042 0210 	orr.w	r2, r2, #16
 8000bac:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT( &hdma_usart1_rx, DMA_IT_TC);//enable DMA complete interrupt
 8000bae:	4b9a      	ldr	r3, [pc, #616]	; (8000e18 <main+0x2c8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b98      	ldr	r3, [pc, #608]	; (8000e18 <main+0x2c8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f042 0202 	orr.w	r2, r2, #2
 8000bbc:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT( &hdma_usart1_rx, DMA_IT_HT);//disable half transfer interrupt
 8000bbe:	4b96      	ldr	r3, [pc, #600]	; (8000e18 <main+0x2c8>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b94      	ldr	r3, [pc, #592]	; (8000e18 <main+0x2c8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 0204 	bic.w	r2, r2, #4
 8000bcc:	601a      	str	r2, [r3, #0]

  HAL_UART_Receive_DMA( &huart1, DMA_RX_Buffer, DMA_RX_BUFFER_SIZE );//enable uart1 DMA receiving
 8000bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd2:	4992      	ldr	r1, [pc, #584]	; (8000e1c <main+0x2cc>)
 8000bd4:	488f      	ldr	r0, [pc, #572]	; (8000e14 <main+0x2c4>)
 8000bd6:	f005 ff0d 	bl	80069f4 <HAL_UART_Receive_DMA>

  COM_Status = 0;
 8000bda:	4b91      	ldr	r3, [pc, #580]	; (8000e20 <main+0x2d0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]

  HAL_TIM_PWM_Start( &htim15, TIM_CHANNEL_1 );
 8000be0:	2100      	movs	r1, #0
 8000be2:	4890      	ldr	r0, [pc, #576]	; (8000e24 <main+0x2d4>)
 8000be4:	f004 fa3a 	bl	800505c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start( &htim15, TIM_CHANNEL_1 );
 8000be8:	2100      	movs	r1, #0
 8000bea:	488e      	ldr	r0, [pc, #568]	; (8000e24 <main+0x2d4>)
 8000bec:	f005 fbee 	bl	80063cc <HAL_TIMEx_PWMN_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000bf0:	213c      	movs	r1, #60	; 0x3c
 8000bf2:	488d      	ldr	r0, [pc, #564]	; (8000e28 <main+0x2d8>)
 8000bf4:	f004 fc1f 	bl	8005436 <HAL_TIM_Encoder_Start>
  TIM2->CNT = 32767; //encoder couter offset;
 8000bf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bfc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(&htim2);
 8000c02:	4889      	ldr	r0, [pc, #548]	; (8000e28 <main+0x2d8>)
 8000c04:	f004 f932 	bl	8004e6c <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2110      	movs	r1, #16
 8000c0c:	4887      	ldr	r0, [pc, #540]	; (8000e2c <main+0x2dc>)
 8000c0e:	f002 fcb7 	bl	8003580 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2120      	movs	r1, #32
 8000c16:	4885      	ldr	r0, [pc, #532]	; (8000e2c <main+0x2dc>)
 8000c18:	f002 fcb2 	bl	8003580 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim6);
 8000c1c:	4884      	ldr	r0, [pc, #528]	; (8000e30 <main+0x2e0>)
 8000c1e:	f004 f971 	bl	8004f04 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0); //set NVIC priority
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2036      	movs	r0, #54	; 0x36
 8000c28:	f002 f8e7 	bl	8002dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); //enable interrupt
 8000c2c:	2036      	movs	r0, #54	; 0x36
 8000c2e:	f002 f900 	bl	8002e32 <HAL_NVIC_EnableIRQ>

  //PID coefficients for motor controller STK681-332 Kp = 2.3, Ki = 0.3, Kd = 0.25
  vKp = 3.0;
 8000c32:	4b80      	ldr	r3, [pc, #512]	; (8000e34 <main+0x2e4>)
 8000c34:	4a80      	ldr	r2, [pc, #512]	; (8000e38 <main+0x2e8>)
 8000c36:	601a      	str	r2, [r3, #0]
  vKi = 0.3;
 8000c38:	4b80      	ldr	r3, [pc, #512]	; (8000e3c <main+0x2ec>)
 8000c3a:	4a81      	ldr	r2, [pc, #516]	; (8000e40 <main+0x2f0>)
 8000c3c:	601a      	str	r2, [r3, #0]
  vKd = 0.25;
 8000c3e:	4b81      	ldr	r3, [pc, #516]	; (8000e44 <main+0x2f4>)
 8000c40:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8000c44:	601a      	str	r2, [r3, #0]
  Speed_TIM6_Target = -13653/200;
 8000c46:	4b80      	ldr	r3, [pc, #512]	; (8000e48 <main+0x2f8>)
 8000c48:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8000c4c:	601a      	str	r2, [r3, #0]
  //40506 close to the max
  if(Speed_TIM6_Target < 0)
 8000c4e:	4b7e      	ldr	r3, [pc, #504]	; (8000e48 <main+0x2f8>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	da03      	bge.n	8000c5e <main+0x10e>
  {
	  CCW = 1;
 8000c56:	4b7d      	ldr	r3, [pc, #500]	; (8000e4c <main+0x2fc>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	e002      	b.n	8000c64 <main+0x114>
  }
  else
  {
	  CCW = 0;
 8000c5e:	4b7b      	ldr	r3, [pc, #492]	; (8000e4c <main+0x2fc>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
  }

  for ( k = 0; k < NSAMP; k++ ) {
 8000c64:	4b7a      	ldr	r3, [pc, #488]	; (8000e50 <main+0x300>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	801a      	strh	r2, [r3, #0]
 8000c6a:	e047      	b.n	8000cfc <main+0x1ac>
  	  value = (int16_t) rint((sinf( ( (2.0*PI)/NSAMP) * k)) * 3214.0 );
 8000c6c:	4b78      	ldr	r3, [pc, #480]	; (8000e50 <main+0x300>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fc57 	bl	8000524 <__aeabi_i2d>
 8000c76:	a362      	add	r3, pc, #392	; (adr r3, 8000e00 <main+0x2b0>)
 8000c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7c:	f7ff fcbc 	bl	80005f8 <__aeabi_dmul>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	4610      	mov	r0, r2
 8000c86:	4619      	mov	r1, r3
 8000c88:	f7ff ff10 	bl	8000aac <__aeabi_d2f>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	ee00 3a10 	vmov	s0, r3
 8000c92:	f007 fd73 	bl	800877c <sinf>
 8000c96:	ee10 3a10 	vmov	r3, s0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fc54 	bl	8000548 <__aeabi_f2d>
 8000ca0:	a359      	add	r3, pc, #356	; (adr r3, 8000e08 <main+0x2b8>)
 8000ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca6:	f7ff fca7 	bl	80005f8 <__aeabi_dmul>
 8000caa:	4602      	mov	r2, r0
 8000cac:	460b      	mov	r3, r1
 8000cae:	ec43 2b17 	vmov	d7, r2, r3
 8000cb2:	eeb0 0a47 	vmov.f32	s0, s14
 8000cb6:	eef0 0a67 	vmov.f32	s1, s15
 8000cba:	f007 fcd1 	bl	8008660 <rint>
 8000cbe:	ec53 2b10 	vmov	r2, r3, d0
 8000cc2:	4610      	mov	r0, r2
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f7ff fea9 	bl	8000a1c <__aeabi_d2iz>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	b21a      	sxth	r2, r3
 8000cce:	4b61      	ldr	r3, [pc, #388]	; (8000e54 <main+0x304>)
 8000cd0:	801a      	strh	r2, [r3, #0]
  	  SINE_PWM[k] = value < 3215 ? value : 3214;
 8000cd2:	4b60      	ldr	r3, [pc, #384]	; (8000e54 <main+0x304>)
 8000cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd8:	4a5d      	ldr	r2, [pc, #372]	; (8000e50 <main+0x300>)
 8000cda:	8812      	ldrh	r2, [r2, #0]
 8000cdc:	4611      	mov	r1, r2
 8000cde:	f640 428e 	movw	r2, #3214	; 0xc8e
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	bfa8      	it	ge
 8000ce6:	4613      	movge	r3, r2
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	4b5b      	ldr	r3, [pc, #364]	; (8000e58 <main+0x308>)
 8000cec:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
  for ( k = 0; k < NSAMP; k++ ) {
 8000cf0:	4b57      	ldr	r3, [pc, #348]	; (8000e50 <main+0x300>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	4b55      	ldr	r3, [pc, #340]	; (8000e50 <main+0x300>)
 8000cfa:	801a      	strh	r2, [r3, #0]
 8000cfc:	4b54      	ldr	r3, [pc, #336]	; (8000e50 <main+0x300>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000d04:	d3b2      	bcc.n	8000c6c <main+0x11c>
  }
  //the max speed connected to the old motor controller is 202 cts
  //the max speed connected to the new motor controller is 178 cts
  for ( k = 0; k < NSAMP; k++ ) {
 8000d06:	4b52      	ldr	r3, [pc, #328]	; (8000e50 <main+0x300>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	801a      	strh	r2, [r3, #0]
 8000d0c:	e040      	b.n	8000d90 <main+0x240>
	  value = (int16_t) rint( ( sinf( ( (2.0*PI)/NSAMP) * k ) ) * 178 );
 8000d0e:	4b50      	ldr	r3, [pc, #320]	; (8000e50 <main+0x300>)
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fc06 	bl	8000524 <__aeabi_i2d>
 8000d18:	a339      	add	r3, pc, #228	; (adr r3, 8000e00 <main+0x2b0>)
 8000d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1e:	f7ff fc6b 	bl	80005f8 <__aeabi_dmul>
 8000d22:	4602      	mov	r2, r0
 8000d24:	460b      	mov	r3, r1
 8000d26:	4610      	mov	r0, r2
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f7ff febf 	bl	8000aac <__aeabi_d2f>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	ee00 3a10 	vmov	s0, r3
 8000d34:	f007 fd22 	bl	800877c <sinf>
 8000d38:	eef0 7a40 	vmov.f32	s15, s0
 8000d3c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000e5c <main+0x30c>
 8000d40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d44:	ee17 0a90 	vmov	r0, s15
 8000d48:	f7ff fbfe 	bl	8000548 <__aeabi_f2d>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	ec43 2b10 	vmov	d0, r2, r3
 8000d54:	f007 fc84 	bl	8008660 <rint>
 8000d58:	ec53 2b10 	vmov	r2, r3, d0
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f7ff fe5c 	bl	8000a1c <__aeabi_d2iz>
 8000d64:	4603      	mov	r3, r0
 8000d66:	b21a      	sxth	r2, r3
 8000d68:	4b3a      	ldr	r3, [pc, #232]	; (8000e54 <main+0x304>)
 8000d6a:	801a      	strh	r2, [r3, #0]
	  SINE_RPM[k] = value < 208 ? value : 207;
 8000d6c:	4b39      	ldr	r3, [pc, #228]	; (8000e54 <main+0x304>)
 8000d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d72:	4a37      	ldr	r2, [pc, #220]	; (8000e50 <main+0x300>)
 8000d74:	8812      	ldrh	r2, [r2, #0]
 8000d76:	2bcf      	cmp	r3, #207	; 0xcf
 8000d78:	bfa8      	it	ge
 8000d7a:	23cf      	movge	r3, #207	; 0xcf
 8000d7c:	b219      	sxth	r1, r3
 8000d7e:	4b38      	ldr	r3, [pc, #224]	; (8000e60 <main+0x310>)
 8000d80:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for ( k = 0; k < NSAMP; k++ ) {
 8000d84:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <main+0x300>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <main+0x300>)
 8000d8e:	801a      	strh	r2, [r3, #0]
 8000d90:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <main+0x300>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000d98:	d3b9      	bcc.n	8000d0e <main+0x1be>
  }
  int32_t speed = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]

	  // measured speed is the #of ticks per 5ms
	  //multiply by 200.0 = (1/0.005s) to get ticks/sec
	  // 60/5120 is the ratio to turn ticks/sec to rpm

	  if(start)
 8000d9e:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <main+0x314>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0fb      	beq.n	8000d9e <main+0x24e>
	  {
		  speed = (int32_t) ( Speed_TIM6_Measured * 200.0 * (60.0/5120.0) );//encoder counts to rpm
 8000da6:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <main+0x318>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fbba 	bl	8000524 <__aeabi_i2d>
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <main+0x31c>)
 8000db6:	f7ff fc1f 	bl	80005f8 <__aeabi_dmul>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	4610      	mov	r0, r2
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f04f 0200 	mov.w	r2, #0
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <main+0x320>)
 8000dc8:	f7ff fc16 	bl	80005f8 <__aeabi_dmul>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f7ff fe22 	bl	8000a1c <__aeabi_d2iz>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	607b      	str	r3, [r7, #4]
		  sprintf( msg, "%d\r\n", speed ); // msg will display speed measured in rpm
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	4925      	ldr	r1, [pc, #148]	; (8000e74 <main+0x324>)
 8000de0:	4825      	ldr	r0, [pc, #148]	; (8000e78 <main+0x328>)
 8000de2:	f006 ffcf 	bl	8007d84 <siprintf>
		  //Transmit_DMA ( &huart1, (uint8_t*) msg, strlen(msg) );
		  //sprintf( msg, "%d\r\n", Err );
		  //sprintf( msg, "cts: %d\r\n", Speed_TIM6_Measured ); //msg will display speed measured in encoder counts.
		  Transmit_DMA ( &huart1, (uint8_t*) msg, strlen(msg) );
 8000de6:	4824      	ldr	r0, [pc, #144]	; (8000e78 <main+0x328>)
 8000de8:	f7ff f9f2 	bl	80001d0 <strlen>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	4921      	ldr	r1, [pc, #132]	; (8000e78 <main+0x328>)
 8000df2:	4808      	ldr	r0, [pc, #32]	; (8000e14 <main+0x2c4>)
 8000df4:	f000 fca0 	bl	8001738 <Transmit_DMA>
		  //sprintf( msg, "pwm reg: %d\r\n", TIM15->CCR1);
		  //sprintf(msg, "Uk: %d\r\n", Uk);
		  //sprintf( msg, "Err: %d\r\n", Err );
		  //sprintf( msg, "Uk: %d\r\n", Uk);

		  start = 0;
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <main+0x314>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
	  if(start)
 8000dfe:	e7ce      	b.n	8000d9e <main+0x24e>
 8000e00:	91c8365d 	.word	0x91c8365d
 8000e04:	3f9015bf 	.word	0x3f9015bf
 8000e08:	00000000 	.word	0x00000000
 8000e0c:	40a91c00 	.word	0x40a91c00
 8000e10:	20000000 	.word	0x20000000
 8000e14:	200002c4 	.word	0x200002c4
 8000e18:	200003d4 	.word	0x200003d4
 8000e1c:	2000045c 	.word	0x2000045c
 8000e20:	20000660 	.word	0x20000660
 8000e24:	200001e0 	.word	0x200001e0
 8000e28:	20000148 	.word	0x20000148
 8000e2c:	48000400 	.word	0x48000400
 8000e30:	20000194 	.word	0x20000194
 8000e34:	20000688 	.word	0x20000688
 8000e38:	40400000 	.word	0x40400000
 8000e3c:	2000068c 	.word	0x2000068c
 8000e40:	3e99999a 	.word	0x3e99999a
 8000e44:	20000690 	.word	0x20000690
 8000e48:	20000668 	.word	0x20000668
 8000e4c:	200006ac 	.word	0x200006ac
 8000e50:	20000684 	.word	0x20000684
 8000e54:	200009d0 	.word	0x200009d0
 8000e58:	200006b0 	.word	0x200006b0
 8000e5c:	43320000 	.word	0x43320000
 8000e60:	200009d8 	.word	0x200009d8
 8000e64:	20000694 	.word	0x20000694
 8000e68:	20000664 	.word	0x20000664
 8000e6c:	40690000 	.word	0x40690000
 8000e70:	3f880000 	.word	0x3f880000
 8000e74:	08009250 	.word	0x08009250
 8000e78:	20000698 	.word	0x20000698

08000e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b09c      	sub	sp, #112	; 0x70
 8000e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e86:	2228      	movs	r2, #40	; 0x28
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f006 ff72 	bl	8007d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	2234      	movs	r2, #52	; 0x34
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f006 ff64 	bl	8007d74 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eac:	2302      	movs	r3, #2
 8000eae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb4:	2310      	movs	r3, #16
 8000eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ec0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000ec4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f002 fb70 	bl	80035b0 <HAL_RCC_OscConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000ed6:	f000 fd8b 	bl	80019f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eda:	230f      	movs	r3, #15
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ef0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f003 fb98 	bl	800462c <HAL_RCC_ClockConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000f02:	f000 fd75 	bl	80019f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <SystemClock_Config+0xc4>)
 8000f08:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM15|RCC_PERIPHCLK_TIM16
                              |RCC_PERIPHCLK_TIM17|RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f22:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 fdb6 	bl	8004a98 <HAL_RCCEx_PeriphCLKConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000f32:	f000 fd5d 	bl	80019f0 <Error_Handler>
  }
}
 8000f36:	bf00      	nop
 8000f38:	3770      	adds	r7, #112	; 0x70
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	001c1081 	.word	0x001c1081

08000f44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
 8000f58:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f5a:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f60:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f62:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f68:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f6e:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f74:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <MX_ADC1_Init+0xb4>)
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <MX_ADC1_Init+0xb4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <MX_ADC1_Init+0xb4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fb4:	4810      	ldr	r0, [pc, #64]	; (8000ff8 <MX_ADC1_Init+0xb4>)
 8000fb6:	f001 f9a3 	bl	8002300 <HAL_ADC_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000fc0:	f000 fd16 	bl	80019f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_ADC1_Init+0xb4>)
 8000fe2:	f001 fb13 	bl	800260c <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fec:	f000 fd00 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200000ac 	.word	0x200000ac

08000ffc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b090      	sub	sp, #64	; 0x40
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	2224      	movs	r2, #36	; 0x24
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f006 feb2 	bl	8007d74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800101c:	463b      	mov	r3, r7
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001028:	4b36      	ldr	r3, [pc, #216]	; (8001104 <MX_TIM1_Init+0x108>)
 800102a:	4a37      	ldr	r2, [pc, #220]	; (8001108 <MX_TIM1_Init+0x10c>)
 800102c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800102e:	4b35      	ldr	r3, [pc, #212]	; (8001104 <MX_TIM1_Init+0x108>)
 8001030:	2200      	movs	r2, #0
 8001032:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001034:	4b33      	ldr	r3, [pc, #204]	; (8001104 <MX_TIM1_Init+0x108>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800103a:	4b32      	ldr	r3, [pc, #200]	; (8001104 <MX_TIM1_Init+0x108>)
 800103c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001040:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001042:	4b30      	ldr	r3, [pc, #192]	; (8001104 <MX_TIM1_Init+0x108>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001048:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <MX_TIM1_Init+0x108>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104e:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <MX_TIM1_Init+0x108>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001054:	482b      	ldr	r0, [pc, #172]	; (8001104 <MX_TIM1_Init+0x108>)
 8001056:	f004 f8e7 	bl	8005228 <HAL_TIM_IC_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001060:	f000 fcc6 	bl	80019f0 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001064:	2301      	movs	r3, #1
 8001066:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800106c:	2301      	movs	r3, #1
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Filter = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001078:	2300      	movs	r3, #0
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800107c:	2301      	movs	r3, #1
 800107e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Filter = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4619      	mov	r1, r3
 800108e:	481d      	ldr	r0, [pc, #116]	; (8001104 <MX_TIM1_Init+0x108>)
 8001090:	f004 f921 	bl	80052d6 <HAL_TIM_Encoder_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800109a:	f000 fca9 	bl	80019f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010aa:	f107 0310 	add.w	r3, r7, #16
 80010ae:	4619      	mov	r1, r3
 80010b0:	4814      	ldr	r0, [pc, #80]	; (8001104 <MX_TIM1_Init+0x108>)
 80010b2:	f005 fa29 	bl	8006508 <HAL_TIMEx_MasterConfigSynchronization>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010bc:	f000 fc98 	bl	80019f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010c0:	2300      	movs	r3, #0
 80010c2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010c4:	2301      	movs	r3, #1
 80010c6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80010d0:	463b      	mov	r3, r7
 80010d2:	2208      	movs	r2, #8
 80010d4:	4619      	mov	r1, r3
 80010d6:	480b      	ldr	r0, [pc, #44]	; (8001104 <MX_TIM1_Init+0x108>)
 80010d8:	f004 fb5a 	bl	8005790 <HAL_TIM_IC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 80010e2:	f000 fc85 	bl	80019f0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	220c      	movs	r2, #12
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_TIM1_Init+0x108>)
 80010ee:	f004 fb4f 	bl	8005790 <HAL_TIM_IC_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80010f8:	f000 fc7a 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	3740      	adds	r7, #64	; 0x40
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200000fc 	.word	0x200000fc
 8001108:	40012c00 	.word	0x40012c00

0800110c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b090      	sub	sp, #64	; 0x40
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	2224      	movs	r2, #36	; 0x24
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f006 fe2a 	bl	8007d74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800112c:	463b      	mov	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001138:	4b34      	ldr	r3, [pc, #208]	; (800120c <MX_TIM2_Init+0x100>)
 800113a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001140:	4b32      	ldr	r3, [pc, #200]	; (800120c <MX_TIM2_Init+0x100>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b31      	ldr	r3, [pc, #196]	; (800120c <MX_TIM2_Init+0x100>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800114c:	4b2f      	ldr	r3, [pc, #188]	; (800120c <MX_TIM2_Init+0x100>)
 800114e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001152:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001154:	4b2d      	ldr	r3, [pc, #180]	; (800120c <MX_TIM2_Init+0x100>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115a:	4b2c      	ldr	r3, [pc, #176]	; (800120c <MX_TIM2_Init+0x100>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001160:	482a      	ldr	r0, [pc, #168]	; (800120c <MX_TIM2_Init+0x100>)
 8001162:	f004 f861 	bl	8005228 <HAL_TIM_IC_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 800116c:	f000 fc40 	bl	80019f0 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001170:	2303      	movs	r3, #3
 8001172:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001174:	2300      	movs	r3, #0
 8001176:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001178:	2301      	movs	r3, #1
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Filter = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001184:	2300      	movs	r3, #0
 8001186:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001188:	2301      	movs	r3, #1
 800118a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Filter = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	481c      	ldr	r0, [pc, #112]	; (800120c <MX_TIM2_Init+0x100>)
 800119c:	f004 f89b 	bl	80052d6 <HAL_TIM_Encoder_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80011a6:	f000 fc23 	bl	80019f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4619      	mov	r1, r3
 80011b8:	4814      	ldr	r0, [pc, #80]	; (800120c <MX_TIM2_Init+0x100>)
 80011ba:	f005 f9a5 	bl	8006508 <HAL_TIMEx_MasterConfigSynchronization>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80011c4:	f000 fc14 	bl	80019f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011c8:	2300      	movs	r3, #0
 80011ca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011cc:	2301      	movs	r3, #1
 80011ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80011d8:	463b      	mov	r3, r7
 80011da:	2208      	movs	r2, #8
 80011dc:	4619      	mov	r1, r3
 80011de:	480b      	ldr	r0, [pc, #44]	; (800120c <MX_TIM2_Init+0x100>)
 80011e0:	f004 fad6 	bl	8005790 <HAL_TIM_IC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80011ea:	f000 fc01 	bl	80019f0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80011ee:	463b      	mov	r3, r7
 80011f0:	220c      	movs	r2, #12
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_TIM2_Init+0x100>)
 80011f6:	f004 facb 	bl	8005790 <HAL_TIM_IC_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8001200:	f000 fbf6 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	3740      	adds	r7, #64	; 0x40
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000148 	.word	0x20000148

08001210 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_TIM6_Init+0x64>)
 8001222:	4a15      	ldr	r2, [pc, #84]	; (8001278 <MX_TIM6_Init+0x68>)
 8001224:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_TIM6_Init+0x64>)
 8001228:	220f      	movs	r2, #15
 800122a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_TIM6_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_TIM6_Init+0x64>)
 8001234:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001238:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_TIM6_Init+0x64>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001240:	480c      	ldr	r0, [pc, #48]	; (8001274 <MX_TIM6_Init+0x64>)
 8001242:	f003 fdbb 	bl	8004dbc <HAL_TIM_Base_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800124c:	f000 fbd0 	bl	80019f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_TIM6_Init+0x64>)
 800125e:	f005 f953 	bl	8006508 <HAL_TIMEx_MasterConfigSynchronization>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001268:	f000 fbc2 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000194 	.word	0x20000194
 8001278:	40001000 	.word	0x40001000

0800127c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b096      	sub	sp, #88	; 0x58
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001282:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]
 800129e:	615a      	str	r2, [r3, #20]
 80012a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	222c      	movs	r2, #44	; 0x2c
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f006 fd63 	bl	8007d74 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80012ae:	4b3a      	ldr	r3, [pc, #232]	; (8001398 <MX_TIM15_Init+0x11c>)
 80012b0:	4a3a      	ldr	r2, [pc, #232]	; (800139c <MX_TIM15_Init+0x120>)
 80012b2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80012b4:	4b38      	ldr	r3, [pc, #224]	; (8001398 <MX_TIM15_Init+0x11c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b37      	ldr	r3, [pc, #220]	; (8001398 <MX_TIM15_Init+0x11c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3214;
 80012c0:	4b35      	ldr	r3, [pc, #212]	; (8001398 <MX_TIM15_Init+0x11c>)
 80012c2:	f640 428e 	movw	r2, #3214	; 0xc8e
 80012c6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b33      	ldr	r3, [pc, #204]	; (8001398 <MX_TIM15_Init+0x11c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80012ce:	4b32      	ldr	r3, [pc, #200]	; (8001398 <MX_TIM15_Init+0x11c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <MX_TIM15_Init+0x11c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80012da:	482f      	ldr	r0, [pc, #188]	; (8001398 <MX_TIM15_Init+0x11c>)
 80012dc:	f003 fe66 	bl	8004fac <HAL_TIM_PWM_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80012e6:	f000 fb83 	bl	80019f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80012f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012f6:	4619      	mov	r1, r3
 80012f8:	4827      	ldr	r0, [pc, #156]	; (8001398 <MX_TIM15_Init+0x11c>)
 80012fa:	f005 f905 	bl	8006508 <HAL_TIMEx_MasterConfigSynchronization>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001304:	f000 fb74 	bl	80019f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001308:	2360      	movs	r3, #96	; 0x60
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001310:	2300      	movs	r3, #0
 8001312:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001314:	2300      	movs	r3, #0
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800131c:	2300      	movs	r3, #0
 800131e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001324:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001328:	2200      	movs	r2, #0
 800132a:	4619      	mov	r1, r3
 800132c:	481a      	ldr	r0, [pc, #104]	; (8001398 <MX_TIM15_Init+0x11c>)
 800132e:	f004 facb 	bl	80058c8 <HAL_TIM_PWM_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001338:	f000 fb5a 	bl	80019f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800133c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001340:	2204      	movs	r2, #4
 8001342:	4619      	mov	r1, r3
 8001344:	4814      	ldr	r0, [pc, #80]	; (8001398 <MX_TIM15_Init+0x11c>)
 8001346:	f004 fabf 	bl	80058c8 <HAL_TIM_PWM_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001350:	f000 fb4e 	bl	80019f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800136c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	4619      	mov	r1, r3
 800137a:	4807      	ldr	r0, [pc, #28]	; (8001398 <MX_TIM15_Init+0x11c>)
 800137c:	f005 f92a 	bl	80065d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001386:	f000 fb33 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800138a:	4803      	ldr	r0, [pc, #12]	; (8001398 <MX_TIM15_Init+0x11c>)
 800138c:	f000 fd24 	bl	8001dd8 <HAL_TIM_MspPostInit>

}
 8001390:	bf00      	nop
 8001392:	3758      	adds	r7, #88	; 0x58
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200001e0 	.word	0x200001e0
 800139c:	40014000 	.word	0x40014000

080013a0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80013a6:	463b      	mov	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_TIM16_Init+0x8c>)
 80013b4:	4a1e      	ldr	r2, [pc, #120]	; (8001430 <MX_TIM16_Init+0x90>)
 80013b6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80013b8:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_TIM16_Init+0x8c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_TIM16_Init+0x8c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <MX_TIM16_Init+0x8c>)
 80013c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ca:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_TIM16_Init+0x8c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <MX_TIM16_Init+0x8c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_TIM16_Init+0x8c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80013de:	4813      	ldr	r0, [pc, #76]	; (800142c <MX_TIM16_Init+0x8c>)
 80013e0:	f003 fcec 	bl	8004dbc <HAL_TIM_Base_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 80013ea:	f000 fb01 	bl	80019f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 80013ee:	480f      	ldr	r0, [pc, #60]	; (800142c <MX_TIM16_Init+0x8c>)
 80013f0:	f003 ff1a 	bl	8005228 <HAL_TIM_IC_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80013fa:	f000 faf9 	bl	80019f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001402:	2301      	movs	r3, #1
 8001404:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800140e:	463b      	mov	r3, r7
 8001410:	2200      	movs	r2, #0
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_TIM16_Init+0x8c>)
 8001416:	f004 f9bb 	bl	8005790 <HAL_TIM_IC_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8001420:	f000 fae6 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000022c 	.word	0x2000022c
 8001430:	40014400 	.word	0x40014400

08001434 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800143a:	463b      	mov	r3, r7
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001446:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <MX_TIM17_Init+0x8c>)
 8001448:	4a1e      	ldr	r2, [pc, #120]	; (80014c4 <MX_TIM17_Init+0x90>)
 800144a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800144c:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <MX_TIM17_Init+0x8c>)
 800144e:	2200      	movs	r2, #0
 8001450:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <MX_TIM17_Init+0x8c>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <MX_TIM17_Init+0x8c>)
 800145a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800145e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <MX_TIM17_Init+0x8c>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <MX_TIM17_Init+0x8c>)
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_TIM17_Init+0x8c>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001472:	4813      	ldr	r0, [pc, #76]	; (80014c0 <MX_TIM17_Init+0x8c>)
 8001474:	f003 fca2 	bl	8004dbc <HAL_TIM_Base_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 800147e:	f000 fab7 	bl	80019f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8001482:	480f      	ldr	r0, [pc, #60]	; (80014c0 <MX_TIM17_Init+0x8c>)
 8001484:	f003 fed0 	bl	8005228 <HAL_TIM_IC_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800148e:	f000 faaf 	bl	80019f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001492:	2300      	movs	r3, #0
 8001494:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001496:	2301      	movs	r3, #1
 8001498:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014a2:	463b      	mov	r3, r7
 80014a4:	2200      	movs	r2, #0
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_TIM17_Init+0x8c>)
 80014aa:	f004 f971 	bl	8005790 <HAL_TIM_IC_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 80014b4:	f000 fa9c 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000278 	.word	0x20000278
 80014c4:	40014800 	.word	0x40014800

080014c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_USART1_UART_Init+0x58>)
 80014ce:	4a15      	ldr	r2, [pc, #84]	; (8001524 <MX_USART1_UART_Init+0x5c>)
 80014d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <MX_USART1_UART_Init+0x58>)
 80014d4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80014d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_USART1_UART_Init+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_USART1_UART_Init+0x58>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_USART1_UART_Init+0x58>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_USART1_UART_Init+0x58>)
 80014ee:	220c      	movs	r2, #12
 80014f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <MX_USART1_UART_Init+0x58>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_USART1_UART_Init+0x58>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <MX_USART1_UART_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_USART1_UART_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_USART1_UART_Init+0x58>)
 800150c:	f005 f91d 	bl	800674a <HAL_UART_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001516:	f000 fa6b 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200002c4 	.word	0x200002c4
 8001524:	40013800 	.word	0x40013800

08001528 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_USART2_UART_Init+0x58>)
 800152e:	4a15      	ldr	r2, [pc, #84]	; (8001584 <MX_USART2_UART_Init+0x5c>)
 8001530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <MX_USART2_UART_Init+0x58>)
 8001534:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_USART2_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_USART2_UART_Init+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_USART2_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_USART2_UART_Init+0x58>)
 800154e:	220c      	movs	r2, #12
 8001550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_USART2_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_USART2_UART_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_USART2_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_USART2_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_USART2_UART_Init+0x58>)
 800156c:	f005 f8ed 	bl	800674a <HAL_UART_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001576:	f000 fa3b 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000034c 	.word	0x2000034c
 8001584:	40004400 	.word	0x40004400

08001588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_DMA_Init+0x48>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	4a0f      	ldr	r2, [pc, #60]	; (80015d0 <MX_DMA_Init+0x48>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6153      	str	r3, [r2, #20]
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <MX_DMA_Init+0x48>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	200e      	movs	r0, #14
 80015ac:	f001 fc25 	bl	8002dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80015b0:	200e      	movs	r0, #14
 80015b2:	f001 fc3e 	bl	8002e32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	200f      	movs	r0, #15
 80015bc:	f001 fc1d 	bl	8002dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80015c0:	200f      	movs	r0, #15
 80015c2:	f001 fc36 	bl	8002e32 <HAL_NVIC_EnableIRQ>

}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000

080015d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ea:	4b48      	ldr	r3, [pc, #288]	; (800170c <MX_GPIO_Init+0x138>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	4a47      	ldr	r2, [pc, #284]	; (800170c <MX_GPIO_Init+0x138>)
 80015f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015f4:	6153      	str	r3, [r2, #20]
 80015f6:	4b45      	ldr	r3, [pc, #276]	; (800170c <MX_GPIO_Init+0x138>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001602:	4b42      	ldr	r3, [pc, #264]	; (800170c <MX_GPIO_Init+0x138>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	4a41      	ldr	r2, [pc, #260]	; (800170c <MX_GPIO_Init+0x138>)
 8001608:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800160c:	6153      	str	r3, [r2, #20]
 800160e:	4b3f      	ldr	r3, [pc, #252]	; (800170c <MX_GPIO_Init+0x138>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4b3c      	ldr	r3, [pc, #240]	; (800170c <MX_GPIO_Init+0x138>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	4a3b      	ldr	r2, [pc, #236]	; (800170c <MX_GPIO_Init+0x138>)
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001624:	6153      	str	r3, [r2, #20]
 8001626:	4b39      	ldr	r3, [pc, #228]	; (800170c <MX_GPIO_Init+0x138>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4b36      	ldr	r3, [pc, #216]	; (800170c <MX_GPIO_Init+0x138>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	4a35      	ldr	r2, [pc, #212]	; (800170c <MX_GPIO_Init+0x138>)
 8001638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800163c:	6153      	str	r3, [r2, #20]
 800163e:	4b33      	ldr	r3, [pc, #204]	; (800170c <MX_GPIO_Init+0x138>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001650:	482f      	ldr	r0, [pc, #188]	; (8001710 <MX_GPIO_Init+0x13c>)
 8001652:	f001 ff95 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_A_GPIO_Port, IN1_A_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800165c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001660:	f001 ff8e 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN1_B_Pin|IN2_A_Pin|IN2_B_Pin, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800166a:	482a      	ldr	r0, [pc, #168]	; (8001714 <MX_GPIO_Init+0x140>)
 800166c:	f001 ff88 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001676:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	4823      	ldr	r0, [pc, #140]	; (8001714 <MX_GPIO_Init+0x140>)
 8001688:	f001 fe08 	bl	800329c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800168c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	2301      	movs	r3, #1
 8001694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	481a      	ldr	r0, [pc, #104]	; (8001710 <MX_GPIO_Init+0x13c>)
 80016a6:	f001 fdf9 	bl	800329c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	4815      	ldr	r0, [pc, #84]	; (8001714 <MX_GPIO_Init+0x140>)
 80016c0:	f001 fdec 	bl	800329c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_A_Pin */
  GPIO_InitStruct.Pin = IN1_A_Pin;
 80016c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN1_A_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e0:	f001 fddc 	bl	800329c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_B_Pin IN2_A_Pin IN2_B_Pin */
  GPIO_InitStruct.Pin = IN1_B_Pin|IN2_A_Pin|IN2_B_Pin;
 80016e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80016e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_GPIO_Init+0x140>)
 80016fe:	f001 fdcd 	bl	800329c <HAL_GPIO_Init>

}
 8001702:	bf00      	nop
 8001704:	3728      	adds	r7, #40	; 0x28
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000
 8001710:	48000400 	.word	0x48000400
 8001714:	48000800 	.word	0x48000800

08001718 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback( UART_HandleTypeDef *UartHandle )
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit (&huart1, "WHAT\r\n", 5, 100 );
	uartTxDone = 1; //signal that Transfer is cplt
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <HAL_UART_TxCpltCallback+0x1c>)
 8001722:	2201      	movs	r2, #1
 8001724:	701a      	strb	r2, [r3, #0]

}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000661 	.word	0x20000661

08001738 <Transmit_DMA>:

void Transmit_DMA(UART_HandleTypeDef *UartHandle, uint8_t* aTxBuffer, uint16_t TXBUFFERSIZE)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	4613      	mov	r3, r2
 8001744:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef sts;

	uartTxDone = 0;
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <Transmit_DMA+0x44>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
	sts = HAL_UART_Transmit_DMA(UartHandle, (uint8_t*)aTxBuffer, TXBUFFERSIZE);
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	461a      	mov	r2, r3
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f005 f8d2 	bl	80068fc <HAL_UART_Transmit_DMA>
 8001758:	4603      	mov	r3, r0
 800175a:	75fb      	strb	r3, [r7, #23]

	if( sts != HAL_OK)
 800175c:	7dfb      	ldrb	r3, [r7, #23]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <Transmit_DMA+0x30>
	{
		Error_Handler();
 8001762:	f000 f945 	bl	80019f0 <Error_Handler>
		//wait for uart transfer to be complete
		while (uartTxDone == 0)
		{
		}
	}
}
 8001766:	e005      	b.n	8001774 <Transmit_DMA+0x3c>
		while (uartTxDone == 0)
 8001768:	bf00      	nop
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <Transmit_DMA+0x44>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0fa      	beq.n	800176a <Transmit_DMA+0x32>
}
 8001774:	bf00      	nop
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000661 	.word	0x20000661

08001780 <HAL_TIM_PeriodElapsedCallback>:

HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8001780:	b5b0      	push	{r4, r5, r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	if( htim -> Instance == TIM6 )
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a82      	ldr	r2, [pc, #520]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800178e:	4293      	cmp	r3, r2
 8001790:	f040 80f9 	bne.w	8001986 <HAL_TIM_PeriodElapsedCallback+0x206>
		 add PID, target speed, and PWM to the motor later.

		 Keep the speed here in cts/0.005seconds
		 * */

		EncVal = TIM2->CNT;
 8001794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	b29a      	uxth	r2, r3
 800179c:	4b7f      	ldr	r3, [pc, #508]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800179e:	801a      	strh	r2, [r3, #0]
		TIM2->CNT = 32767;
 80017a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017a4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24

		Speed_TIM6_Measured = (int32_t)( (EncVal - 32767) );
 80017aa:	4b7c      	ldr	r3, [pc, #496]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 80017b2:	3b7f      	subs	r3, #127	; 0x7f
 80017b4:	4a7a      	ldr	r2, [pc, #488]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80017b6:	6013      	str	r3, [r2, #0]
		Err = Speed_TIM6_Target - Speed_TIM6_Measured;
 80017b8:	4b7a      	ldr	r3, [pc, #488]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b78      	ldr	r3, [pc, #480]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	4a79      	ldr	r2, [pc, #484]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80017c4:	6013      	str	r3, [r2, #0]
		start = 1;
 80017c6:	4b79      	ldr	r3, [pc, #484]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	701a      	strb	r2, [r3, #0]

		dU = vKp * (Err - Err_1) + (vKi * Err) + ( vKd * ( Err - 2*Err_1 + Err_2 ) );
 80017cc:	4b76      	ldr	r3, [pc, #472]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b77      	ldr	r3, [pc, #476]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017de:	4b75      	ldr	r3, [pc, #468]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017e8:	4b6f      	ldr	r3, [pc, #444]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017f4:	4b70      	ldr	r3, [pc, #448]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001802:	4b69      	ldr	r3, [pc, #420]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b6a      	ldr	r3, [pc, #424]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	1ad2      	subs	r2, r2, r3
 800180e:	4b6b      	ldr	r3, [pc, #428]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4413      	add	r3, r2
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800181c:	4b68      	ldr	r3, [pc, #416]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800182e:	ee17 2a90 	vmov	r2, s15
 8001832:	4b64      	ldr	r3, [pc, #400]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001834:	601a      	str	r2, [r3, #0]
		Uk = Uk_1 + dU;
 8001836:	4b64      	ldr	r3, [pc, #400]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4b62      	ldr	r3, [pc, #392]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4413      	add	r3, r2
 8001840:	4a62      	ldr	r2, [pc, #392]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001842:	6013      	str	r3, [r2, #0]
		Uk_1 = Uk;
 8001844:	4b61      	ldr	r3, [pc, #388]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a5f      	ldr	r2, [pc, #380]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800184a:	6013      	str	r3, [r2, #0]
		Err_2 = Err_1;
 800184c:	4b58      	ldr	r3, [pc, #352]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a5a      	ldr	r2, [pc, #360]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001852:	6013      	str	r3, [r2, #0]
		Err_1 = Err;
 8001854:	4b54      	ldr	r3, [pc, #336]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a55      	ldr	r2, [pc, #340]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800185a:	6013      	str	r3, [r2, #0]


		if( CCW )
 800185c:	4b5c      	ldr	r3, [pc, #368]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d02c      	beq.n	80018be <HAL_TIM_PeriodElapsedCallback+0x13e>
		{
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800186a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186e:	f001 fe87 	bl	8003580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001872:	2201      	movs	r2, #1
 8001874:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001878:	4856      	ldr	r0, [pc, #344]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800187a:	f001 fe81 	bl	8003580 <HAL_GPIO_WritePin>
			TIM15 -> CCR1 = (uint32_t) ( -1.0 * (Uk/204.0) * 3214.0 );
 800187e:	4b53      	ldr	r3, [pc, #332]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe4e 	bl	8000524 <__aeabi_i2d>
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	4b52      	ldr	r3, [pc, #328]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800188e:	f7fe ffdd 	bl	800084c <__aeabi_ddiv>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4614      	mov	r4, r2
 8001898:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800189c:	a33c      	add	r3, pc, #240	; (adr r3, 8001990 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	4620      	mov	r0, r4
 80018a4:	4629      	mov	r1, r5
 80018a6:	f7fe fea7 	bl	80005f8 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4c4b      	ldr	r4, [pc, #300]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	f7ff f8da 	bl	8000a6c <__aeabi_d2uiz>
 80018b8:	4603      	mov	r3, r0
 80018ba:	6363      	str	r3, [r4, #52]	; 0x34
 80018bc:	e027      	b.n	800190e <HAL_TIM_PeriodElapsedCallback+0x18e>
		}
		else
		{
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80018be:	2201      	movs	r2, #1
 80018c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c4:	4846      	ldr	r0, [pc, #280]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80018c6:	f001 fe5b 	bl	8003580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d0:	4843      	ldr	r0, [pc, #268]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80018d2:	f001 fe55 	bl	8003580 <HAL_GPIO_WritePin>
			TIM15 -> CCR1 = (uint32_t) ( (Uk/204.0) * 3214.0 );
 80018d6:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe22 	bl	8000524 <__aeabi_i2d>
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80018e6:	f7fe ffb1 	bl	800084c <__aeabi_ddiv>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	a327      	add	r3, pc, #156	; (adr r3, 8001990 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7fe fe7e 	bl	80005f8 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4c36      	ldr	r4, [pc, #216]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001902:	4610      	mov	r0, r2
 8001904:	4619      	mov	r1, r3
 8001906:	f7ff f8b1 	bl	8000a6c <__aeabi_d2uiz>
 800190a:	4603      	mov	r3, r0
 800190c:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
			TIM15 -> CCR1 = (uint32_t) ( SINE_PWM[sin_i] );
		}*/

		Speed_TIM6_Target = SINE_RPM[sin_i];
 800190e:	4b35      	ldr	r3, [pc, #212]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001914:	461a      	mov	r2, r3
 8001916:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001918:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800191c:	461a      	mov	r2, r3
 800191e:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001920:	601a      	str	r2, [r3, #0]
		if( Speed_TIM6_Target < 0 )
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	da03      	bge.n	8001932 <HAL_TIM_PeriodElapsedCallback+0x1b2>
		{
			CCW = 1;
 800192a:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]
 8001930:	e002      	b.n	8001938 <HAL_TIM_PeriodElapsedCallback+0x1b8>
		}
		else
		{
			CCW = 0;
 8001932:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
		}

		if( sin_i >= 399 )
 8001938:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800193a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193e:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 8001942:	dd02      	ble.n	800194a <HAL_TIM_PeriodElapsedCallback+0x1ca>
			sin_i = 0;
 8001944:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001946:	2200      	movs	r2, #0
 8001948:	801a      	strh	r2, [r3, #0]
		if( delay < 10 )
 800194a:	4b28      	ldr	r3, [pc, #160]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800194c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001950:	2b09      	cmp	r3, #9
 8001952:	dc09      	bgt.n	8001968 <HAL_TIM_PeriodElapsedCallback+0x1e8>
		{
			delay++;
 8001954:	4b25      	ldr	r3, [pc, #148]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800195a:	b29b      	uxth	r3, r3
 800195c:	3301      	adds	r3, #1
 800195e:	b29b      	uxth	r3, r3
 8001960:	b21a      	sxth	r2, r3
 8001962:	4b22      	ldr	r3, [pc, #136]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001964:	801a      	strh	r2, [r3, #0]
			sin_i++;
			delay = 0;
		}

	}
}
 8001966:	e00e      	b.n	8001986 <HAL_TIM_PeriodElapsedCallback+0x206>
			start = 1;
 8001968:	4b10      	ldr	r3, [pc, #64]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
			sin_i++;
 800196e:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001974:	b29b      	uxth	r3, r3
 8001976:	3301      	adds	r3, #1
 8001978:	b29b      	uxth	r3, r3
 800197a:	b21a      	sxth	r2, r3
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800197e:	801a      	strh	r2, [r3, #0]
			delay = 0;
 8001980:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001982:	2200      	movs	r2, #0
 8001984:	801a      	strh	r2, [r3, #0]
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bdb0      	pop	{r4, r5, r7, pc}
 800198e:	bf00      	nop
 8001990:	00000000 	.word	0x00000000
 8001994:	40a91c00 	.word	0x40a91c00
 8001998:	40001000 	.word	0x40001000
 800199c:	20000662 	.word	0x20000662
 80019a0:	20000664 	.word	0x20000664
 80019a4:	20000668 	.word	0x20000668
 80019a8:	2000066c 	.word	0x2000066c
 80019ac:	20000694 	.word	0x20000694
 80019b0:	20000670 	.word	0x20000670
 80019b4:	20000688 	.word	0x20000688
 80019b8:	2000068c 	.word	0x2000068c
 80019bc:	20000674 	.word	0x20000674
 80019c0:	20000690 	.word	0x20000690
 80019c4:	20000680 	.word	0x20000680
 80019c8:	2000067c 	.word	0x2000067c
 80019cc:	20000678 	.word	0x20000678
 80019d0:	200006ac 	.word	0x200006ac
 80019d4:	48000800 	.word	0x48000800
 80019d8:	40698000 	.word	0x40698000
 80019dc:	40014000 	.word	0x40014000
 80019e0:	48000400 	.word	0x48000400
 80019e4:	200009d2 	.word	0x200009d2
 80019e8:	200009d8 	.word	0x200009d8
 80019ec:	200009d4 	.word	0x200009d4

080019f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f4:	b672      	cpsid	i
}
 80019f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <Error_Handler+0x8>
	...

080019fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <HAL_MspInit+0x44>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <HAL_MspInit+0x44>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6193      	str	r3, [r2, #24]
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <HAL_MspInit+0x44>)
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_MspInit+0x44>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <HAL_MspInit+0x44>)
 8001a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a24:	61d3      	str	r3, [r2, #28]
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_MspInit+0x44>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a32:	2007      	movs	r0, #7
 8001a34:	f001 f9d6 	bl	8002de4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000

08001a44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a64:	d13c      	bne.n	8001ae0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a66:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <HAL_ADC_MspInit+0xa4>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ae8 <HAL_ADC_MspInit+0xa4>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	6153      	str	r3, [r2, #20]
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <HAL_ADC_MspInit+0xa4>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <HAL_ADC_MspInit+0xa4>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <HAL_ADC_MspInit+0xa4>)
 8001a84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a88:	6153      	str	r3, [r2, #20]
 8001a8a:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <HAL_ADC_MspInit+0xa4>)
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <HAL_ADC_MspInit+0xa4>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <HAL_ADC_MspInit+0xa4>)
 8001a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa0:	6153      	str	r3, [r2, #20]
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <HAL_ADC_MspInit+0xa4>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN8
    PA4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Analog2_Pin;
 8001aae:	2304      	movs	r3, #4
 8001ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Analog2_GPIO_Port, &GPIO_InitStruct);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480a      	ldr	r0, [pc, #40]	; (8001aec <HAL_ADC_MspInit+0xa8>)
 8001ac2:	f001 fbeb 	bl	800329c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Analog1_Pin;
 8001ac6:	2310      	movs	r3, #16
 8001ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aca:	2303      	movs	r3, #3
 8001acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Analog1_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001adc:	f001 fbde 	bl	800329c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	; 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	48000800 	.word	0x48000800

08001af0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08e      	sub	sp, #56	; 0x38
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a55      	ldr	r2, [pc, #340]	; (8001c64 <HAL_TIM_IC_MspInit+0x174>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d158      	bne.n	8001bc4 <HAL_TIM_IC_MspInit+0xd4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b12:	4b55      	ldr	r3, [pc, #340]	; (8001c68 <HAL_TIM_IC_MspInit+0x178>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	4a54      	ldr	r2, [pc, #336]	; (8001c68 <HAL_TIM_IC_MspInit+0x178>)
 8001b18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b1c:	6193      	str	r3, [r2, #24]
 8001b1e:	4b52      	ldr	r3, [pc, #328]	; (8001c68 <HAL_TIM_IC_MspInit+0x178>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b26:	623b      	str	r3, [r7, #32]
 8001b28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2a:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <HAL_TIM_IC_MspInit+0x178>)
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	4a4e      	ldr	r2, [pc, #312]	; (8001c68 <HAL_TIM_IC_MspInit+0x178>)
 8001b30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b34:	6153      	str	r3, [r2, #20]
 8001b36:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <HAL_TIM_IC_MspInit+0x178>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b3e:	61fb      	str	r3, [r7, #28]
 8001b40:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	4b49      	ldr	r3, [pc, #292]	; (8001c68 <HAL_TIM_IC_MspInit+0x178>)
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	4a48      	ldr	r2, [pc, #288]	; (8001c68 <HAL_TIM_IC_MspInit+0x178>)
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	6153      	str	r3, [r2, #20]
 8001b4e:	4b46      	ldr	r3, [pc, #280]	; (8001c68 <HAL_TIM_IC_MspInit+0x178>)
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	69bb      	ldr	r3, [r7, #24]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b72:	4619      	mov	r1, r3
 8001b74:	483d      	ldr	r0, [pc, #244]	; (8001c6c <HAL_TIM_IC_MspInit+0x17c>)
 8001b76:	f001 fb91 	bl	800329c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IN1_A_limit_Pin;
 8001b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b8c:	2306      	movs	r3, #6
 8001b8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(IN1_A_limit_GPIO_Port, &GPIO_InitStruct);
 8001b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b94:	4619      	mov	r1, r3
 8001b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9a:	f001 fb7f 	bl	800329c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IN1_B_limit_Pin;
 8001b9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8001bb0:	230b      	movs	r3, #11
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(IN1_B_limit_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bbe:	f001 fb6d 	bl	800329c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bc2:	e04a      	b.n	8001c5a <HAL_TIM_IC_MspInit+0x16a>
  else if(htim_ic->Instance==TIM2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bcc:	d145      	bne.n	8001c5a <HAL_TIM_IC_MspInit+0x16a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bce:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_TIM_IC_MspInit+0x178>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	4a25      	ldr	r2, [pc, #148]	; (8001c68 <HAL_TIM_IC_MspInit+0x178>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	61d3      	str	r3, [r2, #28]
 8001bda:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <HAL_TIM_IC_MspInit+0x178>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_TIM_IC_MspInit+0x178>)
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	4a1f      	ldr	r2, [pc, #124]	; (8001c68 <HAL_TIM_IC_MspInit+0x178>)
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf0:	6153      	str	r3, [r2, #20]
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_TIM_IC_MspInit+0x178>)
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <HAL_TIM_IC_MspInit+0x178>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	4a19      	ldr	r2, [pc, #100]	; (8001c68 <HAL_TIM_IC_MspInit+0x178>)
 8001c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c08:	6153      	str	r3, [r2, #20]
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_TIM_IC_MspInit+0x178>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c16:	2303      	movs	r3, #3
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c26:	2301      	movs	r3, #1
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c34:	f001 fb32 	bl	800329c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = IN2_A_limit_Pin|IN2_B_limit_Pin;
 8001c38:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c52:	4619      	mov	r1, r3
 8001c54:	4806      	ldr	r0, [pc, #24]	; (8001c70 <HAL_TIM_IC_MspInit+0x180>)
 8001c56:	f001 fb21 	bl	800329c <HAL_GPIO_Init>
}
 8001c5a:	bf00      	nop
 8001c5c:	3738      	adds	r7, #56	; 0x38
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40012c00 	.word	0x40012c00
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	48000800 	.word	0x48000800
 8001c70:	48000400 	.word	0x48000400

08001c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	; 0x30
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM6)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a3c      	ldr	r2, [pc, #240]	; (8001d84 <HAL_TIM_Base_MspInit+0x110>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d114      	bne.n	8001cc0 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c96:	4b3c      	ldr	r3, [pc, #240]	; (8001d88 <HAL_TIM_Base_MspInit+0x114>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4a3b      	ldr	r2, [pc, #236]	; (8001d88 <HAL_TIM_Base_MspInit+0x114>)
 8001c9c:	f043 0310 	orr.w	r3, r3, #16
 8001ca0:	61d3      	str	r3, [r2, #28]
 8001ca2:	4b39      	ldr	r3, [pc, #228]	; (8001d88 <HAL_TIM_Base_MspInit+0x114>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 0310 	and.w	r3, r3, #16
 8001caa:	61bb      	str	r3, [r7, #24]
 8001cac:	69bb      	ldr	r3, [r7, #24]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	2036      	movs	r0, #54	; 0x36
 8001cb4:	f001 f8a1 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cb8:	2036      	movs	r0, #54	; 0x36
 8001cba:	f001 f8ba 	bl	8002e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001cbe:	e05c      	b.n	8001d7a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM16)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a31      	ldr	r2, [pc, #196]	; (8001d8c <HAL_TIM_Base_MspInit+0x118>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d129      	bne.n	8001d1e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001cca:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <HAL_TIM_Base_MspInit+0x114>)
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	4a2e      	ldr	r2, [pc, #184]	; (8001d88 <HAL_TIM_Base_MspInit+0x114>)
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd4:	6193      	str	r3, [r2, #24]
 8001cd6:	4b2c      	ldr	r3, [pc, #176]	; (8001d88 <HAL_TIM_Base_MspInit+0x114>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <HAL_TIM_Base_MspInit+0x114>)
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	4a28      	ldr	r2, [pc, #160]	; (8001d88 <HAL_TIM_Base_MspInit+0x114>)
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	6153      	str	r3, [r2, #20]
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <HAL_TIM_Base_MspInit+0x114>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HomingA_Pin;
 8001cfa:	2340      	movs	r3, #64	; 0x40
 8001cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HomingA_GPIO_Port, &GPIO_InitStruct);
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4619      	mov	r1, r3
 8001d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d18:	f001 fac0 	bl	800329c <HAL_GPIO_Init>
}
 8001d1c:	e02d      	b.n	8001d7a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM17)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <HAL_TIM_Base_MspInit+0x11c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d128      	bne.n	8001d7a <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001d28:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <HAL_TIM_Base_MspInit+0x114>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4a16      	ldr	r2, [pc, #88]	; (8001d88 <HAL_TIM_Base_MspInit+0x114>)
 8001d2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d32:	6193      	str	r3, [r2, #24]
 8001d34:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <HAL_TIM_Base_MspInit+0x114>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HAL_TIM_Base_MspInit+0x114>)
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	4a10      	ldr	r2, [pc, #64]	; (8001d88 <HAL_TIM_Base_MspInit+0x114>)
 8001d46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d4a:	6153      	str	r3, [r2, #20]
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <HAL_TIM_Base_MspInit+0x114>)
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HomingB_Pin;
 8001d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HomingB_GPIO_Port, &GPIO_InitStruct);
 8001d6e:	f107 031c 	add.w	r3, r7, #28
 8001d72:	4619      	mov	r1, r3
 8001d74:	4807      	ldr	r0, [pc, #28]	; (8001d94 <HAL_TIM_Base_MspInit+0x120>)
 8001d76:	f001 fa91 	bl	800329c <HAL_GPIO_Init>
}
 8001d7a:	bf00      	nop
 8001d7c:	3730      	adds	r7, #48	; 0x30
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40001000 	.word	0x40001000
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40014400 	.word	0x40014400
 8001d90:	40014800 	.word	0x40014800
 8001d94:	48000400 	.word	0x48000400

08001d98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <HAL_TIM_PWM_MspInit+0x38>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d10b      	bne.n	8001dc2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db4:	6193      	str	r3, [r2, #24]
 8001db6:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40014000 	.word	0x40014000
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 030c 	add.w	r3, r7, #12
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a11      	ldr	r2, [pc, #68]	; (8001e3c <HAL_TIM_MspPostInit+0x64>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d11c      	bne.n	8001e34 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <HAL_TIM_MspPostInit+0x68>)
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	4a10      	ldr	r2, [pc, #64]	; (8001e40 <HAL_TIM_MspPostInit+0x68>)
 8001e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e04:	6153      	str	r3, [r2, #20]
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <HAL_TIM_MspPostInit+0x68>)
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8001e12:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001e24:	2301      	movs	r3, #1
 8001e26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4805      	ldr	r0, [pc, #20]	; (8001e44 <HAL_TIM_MspPostInit+0x6c>)
 8001e30:	f001 fa34 	bl	800329c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001e34:	bf00      	nop
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40014000 	.word	0x40014000
 8001e40:	40021000 	.word	0x40021000
 8001e44:	48000400 	.word	0x48000400

08001e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	; 0x30
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <HAL_UART_MspInit+0x180>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d17c      	bne.n	8001f64 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e6a:	4b58      	ldr	r3, [pc, #352]	; (8001fcc <HAL_UART_MspInit+0x184>)
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	4a57      	ldr	r2, [pc, #348]	; (8001fcc <HAL_UART_MspInit+0x184>)
 8001e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e74:	6193      	str	r3, [r2, #24]
 8001e76:	4b55      	ldr	r3, [pc, #340]	; (8001fcc <HAL_UART_MspInit+0x184>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7e:	61bb      	str	r3, [r7, #24]
 8001e80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e82:	4b52      	ldr	r3, [pc, #328]	; (8001fcc <HAL_UART_MspInit+0x184>)
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	4a51      	ldr	r2, [pc, #324]	; (8001fcc <HAL_UART_MspInit+0x184>)
 8001e88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e8c:	6153      	str	r3, [r2, #20]
 8001e8e:	4b4f      	ldr	r3, [pc, #316]	; (8001fcc <HAL_UART_MspInit+0x184>)
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e9a:	2330      	movs	r3, #48	; 0x30
 8001e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001eaa:	2307      	movs	r3, #7
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4846      	ldr	r0, [pc, #280]	; (8001fd0 <HAL_UART_MspInit+0x188>)
 8001eb6:	f001 f9f1 	bl	800329c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001eba:	4b46      	ldr	r3, [pc, #280]	; (8001fd4 <HAL_UART_MspInit+0x18c>)
 8001ebc:	4a46      	ldr	r2, [pc, #280]	; (8001fd8 <HAL_UART_MspInit+0x190>)
 8001ebe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec0:	4b44      	ldr	r3, [pc, #272]	; (8001fd4 <HAL_UART_MspInit+0x18c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec6:	4b43      	ldr	r3, [pc, #268]	; (8001fd4 <HAL_UART_MspInit+0x18c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ecc:	4b41      	ldr	r3, [pc, #260]	; (8001fd4 <HAL_UART_MspInit+0x18c>)
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ed2:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <HAL_UART_MspInit+0x18c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ed8:	4b3e      	ldr	r3, [pc, #248]	; (8001fd4 <HAL_UART_MspInit+0x18c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001ede:	4b3d      	ldr	r3, [pc, #244]	; (8001fd4 <HAL_UART_MspInit+0x18c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ee4:	4b3b      	ldr	r3, [pc, #236]	; (8001fd4 <HAL_UART_MspInit+0x18c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001eea:	483a      	ldr	r0, [pc, #232]	; (8001fd4 <HAL_UART_MspInit+0x18c>)
 8001eec:	f000 ffbb 	bl	8002e66 <HAL_DMA_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8001ef6:	f7ff fd7b 	bl	80019f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a35      	ldr	r2, [pc, #212]	; (8001fd4 <HAL_UART_MspInit+0x18c>)
 8001efe:	675a      	str	r2, [r3, #116]	; 0x74
 8001f00:	4a34      	ldr	r2, [pc, #208]	; (8001fd4 <HAL_UART_MspInit+0x18c>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001f06:	4b35      	ldr	r3, [pc, #212]	; (8001fdc <HAL_UART_MspInit+0x194>)
 8001f08:	4a35      	ldr	r2, [pc, #212]	; (8001fe0 <HAL_UART_MspInit+0x198>)
 8001f0a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f0c:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <HAL_UART_MspInit+0x194>)
 8001f0e:	2210      	movs	r2, #16
 8001f10:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f12:	4b32      	ldr	r3, [pc, #200]	; (8001fdc <HAL_UART_MspInit+0x194>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f18:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <HAL_UART_MspInit+0x194>)
 8001f1a:	2280      	movs	r2, #128	; 0x80
 8001f1c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f1e:	4b2f      	ldr	r3, [pc, #188]	; (8001fdc <HAL_UART_MspInit+0x194>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f24:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_UART_MspInit+0x194>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001f2a:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <HAL_UART_MspInit+0x194>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f30:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <HAL_UART_MspInit+0x194>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001f36:	4829      	ldr	r0, [pc, #164]	; (8001fdc <HAL_UART_MspInit+0x194>)
 8001f38:	f000 ff95 	bl	8002e66 <HAL_DMA_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8001f42:	f7ff fd55 	bl	80019f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a24      	ldr	r2, [pc, #144]	; (8001fdc <HAL_UART_MspInit+0x194>)
 8001f4a:	671a      	str	r2, [r3, #112]	; 0x70
 8001f4c:	4a23      	ldr	r2, [pc, #140]	; (8001fdc <HAL_UART_MspInit+0x194>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2100      	movs	r1, #0
 8001f56:	2025      	movs	r0, #37	; 0x25
 8001f58:	f000 ff4f 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f5c:	2025      	movs	r0, #37	; 0x25
 8001f5e:	f000 ff68 	bl	8002e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f62:	e02d      	b.n	8001fc0 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART2)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1e      	ldr	r2, [pc, #120]	; (8001fe4 <HAL_UART_MspInit+0x19c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d128      	bne.n	8001fc0 <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_UART_MspInit+0x184>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4a16      	ldr	r2, [pc, #88]	; (8001fcc <HAL_UART_MspInit+0x184>)
 8001f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f78:	61d3      	str	r3, [r2, #28]
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_UART_MspInit+0x184>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_UART_MspInit+0x184>)
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	4a10      	ldr	r2, [pc, #64]	; (8001fcc <HAL_UART_MspInit+0x184>)
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f90:	6153      	str	r3, [r2, #20]
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <HAL_UART_MspInit+0x184>)
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f9e:	230c      	movs	r3, #12
 8001fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fae:	2307      	movs	r3, #7
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb2:	f107 031c 	add.w	r3, r7, #28
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fbc:	f001 f96e 	bl	800329c <HAL_GPIO_Init>
}
 8001fc0:	bf00      	nop
 8001fc2:	3730      	adds	r7, #48	; 0x30
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40013800 	.word	0x40013800
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	48000800 	.word	0x48000800
 8001fd4:	200003d4 	.word	0x200003d4
 8001fd8:	40020058 	.word	0x40020058
 8001fdc:	20000418 	.word	0x20000418
 8001fe0:	40020044 	.word	0x40020044
 8001fe4:	40004400 	.word	0x40004400

08001fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fec:	e7fe      	b.n	8001fec <NMI_Handler+0x4>

08001fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff2:	e7fe      	b.n	8001ff2 <HardFault_Handler+0x4>

08001ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <MemManage_Handler+0x4>

08001ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ffe:	e7fe      	b.n	8001ffe <BusFault_Handler+0x4>

08002000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002004:	e7fe      	b.n	8002004 <UsageFault_Handler+0x4>

08002006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002034:	f000 f944 	bl	80022c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}

0800203c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <DMA1_Channel4_IRQHandler+0x10>)
 8002042:	f001 f82d 	bl	80030a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000418 	.word	0x20000418

08002050 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <DMA1_Channel5_IRQHandler+0x10>)
 8002056:	f001 f823 	bl	80030a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200003d4 	.word	0x200003d4

08002064 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002068:	4803      	ldr	r0, [pc, #12]	; (8002078 <USART1_IRQHandler+0x14>)
 800206a:	f004 fd99 	bl	8006ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 800206e:	4802      	ldr	r0, [pc, #8]	; (8002078 <USART1_IRQHandler+0x14>)
 8002070:	f000 f80e 	bl	8002090 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	200002c4 	.word	0x200002c4

0800207c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <TIM6_DAC_IRQHandler+0x10>)
 8002082:	f003 fa66 	bl	8005552 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000194 	.word	0x20000194

08002090 <USER_UART_IRQHandler>:

/* USER CODE BEGIN 1 */
void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <USER_UART_IRQHandler+0x38>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d10d      	bne.n	80020be <USER_UART_IRQHandler+0x2e>
	{
		if(__HAL_UART_GET_FLAG( &huart1, UART_FLAG_IDLE ) != RESET) //whenever the USART Rx idles
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <USER_UART_IRQHandler+0x3c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	f003 0310 	and.w	r3, r3, #16
 80020ac:	2b10      	cmp	r3, #16
 80020ae:	d106      	bne.n	80020be <USER_UART_IRQHandler+0x2e>
		{
			__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <USER_UART_IRQHandler+0x3c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2210      	movs	r2, #16
 80020b6:	621a      	str	r2, [r3, #32]
			USER_UART_IDLECallback(&huart1);
 80020b8:	4804      	ldr	r0, [pc, #16]	; (80020cc <USER_UART_IRQHandler+0x3c>)
 80020ba:	f000 f809 	bl	80020d0 <USER_UART_IDLECallback>
		}
	}
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40013800 	.word	0x40013800
 80020cc:	200002c4 	.word	0x200002c4

080020d0 <USER_UART_IDLECallback>:

void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(&huart1);
 80020d8:	4816      	ldr	r0, [pc, #88]	; (8002134 <USER_UART_IDLECallback+0x64>)
 80020da:	f004 fccf 	bl	8006a7c <HAL_UART_DMAStop>
	//calculate the length of the received data(number of bytes/characters/numbers received)
	counter = __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <USER_UART_IDLECallback+0x68>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <USER_UART_IDLECallback+0x6c>)
 80020e8:	801a      	strh	r2, [r3, #0]
	Rx_Counter = DMA_RX_BUFFER_SIZE - counter;
 80020ea:	4b14      	ldr	r3, [pc, #80]	; (800213c <USER_UART_IDLECallback+0x6c>)
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <USER_UART_IDLECallback+0x70>)
 80020f6:	801a      	strh	r2, [r3, #0]

	//transfer data from DMA buffer to data_buffer
	for( uint16_t i = 0; i < Rx_Counter; ++i )
 80020f8:	2300      	movs	r3, #0
 80020fa:	81fb      	strh	r3, [r7, #14]
 80020fc:	e008      	b.n	8002110 <USER_UART_IDLECallback+0x40>
	{
		Data_Buffer[i] = DMA_RX_Buffer[i];
 80020fe:	89fa      	ldrh	r2, [r7, #14]
 8002100:	89fb      	ldrh	r3, [r7, #14]
 8002102:	4910      	ldr	r1, [pc, #64]	; (8002144 <USER_UART_IDLECallback+0x74>)
 8002104:	5c89      	ldrb	r1, [r1, r2]
 8002106:	4a10      	ldr	r2, [pc, #64]	; (8002148 <USER_UART_IDLECallback+0x78>)
 8002108:	54d1      	strb	r1, [r2, r3]
	for( uint16_t i = 0; i < Rx_Counter; ++i )
 800210a:	89fb      	ldrh	r3, [r7, #14]
 800210c:	3301      	adds	r3, #1
 800210e:	81fb      	strh	r3, [r7, #14]
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <USER_UART_IDLECallback+0x70>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	89fa      	ldrh	r2, [r7, #14]
 8002116:	429a      	cmp	r2, r3
 8002118:	d3f1      	bcc.n	80020fe <USER_UART_IDLECallback+0x2e>
	}

	COM_Status = 1;
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <USER_UART_IDLECallback+0x7c>)
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
	//re-enable DMA interrupt and receiving
	HAL_UART_Receive_DMA( &huart1, DMA_RX_Buffer, DMA_RX_BUFFER_SIZE );
 8002120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002124:	4907      	ldr	r1, [pc, #28]	; (8002144 <USER_UART_IDLECallback+0x74>)
 8002126:	4803      	ldr	r0, [pc, #12]	; (8002134 <USER_UART_IDLECallback+0x64>)
 8002128:	f004 fc64 	bl	80069f4 <HAL_UART_Receive_DMA>
}
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	200002c4 	.word	0x200002c4
 8002138:	200003d4 	.word	0x200003d4
 800213c:	2000065c 	.word	0x2000065c
 8002140:	2000065e 	.word	0x2000065e
 8002144:	2000045c 	.word	0x2000045c
 8002148:	2000055c 	.word	0x2000055c
 800214c:	20000660 	.word	0x20000660

08002150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002158:	4a14      	ldr	r2, [pc, #80]	; (80021ac <_sbrk+0x5c>)
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <_sbrk+0x60>)
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <_sbrk+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <_sbrk+0x64>)
 800216e:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <_sbrk+0x68>)
 8002170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <_sbrk+0x64>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	429a      	cmp	r2, r3
 800217e:	d207      	bcs.n	8002190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002180:	f005 fdce 	bl	8007d20 <__errno>
 8002184:	4603      	mov	r3, r0
 8002186:	220c      	movs	r2, #12
 8002188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	e009      	b.n	80021a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	4a05      	ldr	r2, [pc, #20]	; (80021b4 <_sbrk+0x64>)
 80021a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a2:	68fb      	ldr	r3, [r7, #12]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20004000 	.word	0x20004000
 80021b0:	00000400 	.word	0x00000400
 80021b4:	20000cf8 	.word	0x20000cf8
 80021b8:	20000d10 	.word	0x20000d10

080021bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <SystemInit+0x20>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <SystemInit+0x20>)
 80021c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002218 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80021e4:	f7ff ffea 	bl	80021bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021e8:	480c      	ldr	r0, [pc, #48]	; (800221c <LoopForever+0x6>)
  ldr r1, =_edata
 80021ea:	490d      	ldr	r1, [pc, #52]	; (8002220 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021ec:	4a0d      	ldr	r2, [pc, #52]	; (8002224 <LoopForever+0xe>)
  movs r3, #0
 80021ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f0:	e002      	b.n	80021f8 <LoopCopyDataInit>

080021f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f6:	3304      	adds	r3, #4

080021f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021fc:	d3f9      	bcc.n	80021f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fe:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002200:	4c0a      	ldr	r4, [pc, #40]	; (800222c <LoopForever+0x16>)
  movs r3, #0
 8002202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002204:	e001      	b.n	800220a <LoopFillZerobss>

08002206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002208:	3204      	adds	r2, #4

0800220a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800220a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800220c:	d3fb      	bcc.n	8002206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800220e:	f005 fd8d 	bl	8007d2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002212:	f7fe fc9d 	bl	8000b50 <main>

08002216 <LoopForever>:

LoopForever:
    b LoopForever
 8002216:	e7fe      	b.n	8002216 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002218:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800221c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002220:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002224:	080096b0 	.word	0x080096b0
  ldr r2, =_sbss
 8002228:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800222c:	20000d10 	.word	0x20000d10

08002230 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002230:	e7fe      	b.n	8002230 <ADC1_IRQHandler>
	...

08002234 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <HAL_Init+0x28>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a07      	ldr	r2, [pc, #28]	; (800225c <HAL_Init+0x28>)
 800223e:	f043 0310 	orr.w	r3, r3, #16
 8002242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002244:	2003      	movs	r0, #3
 8002246:	f000 fdcd 	bl	8002de4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800224a:	2000      	movs	r0, #0
 800224c:	f000 f808 	bl	8002260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002250:	f7ff fbd4 	bl	80019fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40022000 	.word	0x40022000

08002260 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_InitTick+0x54>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <HAL_InitTick+0x58>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	4619      	mov	r1, r3
 8002272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002276:	fbb3 f3f1 	udiv	r3, r3, r1
 800227a:	fbb2 f3f3 	udiv	r3, r2, r3
 800227e:	4618      	mov	r0, r3
 8002280:	f000 fde5 	bl	8002e4e <HAL_SYSTICK_Config>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e00e      	b.n	80022ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b0f      	cmp	r3, #15
 8002292:	d80a      	bhi.n	80022aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002294:	2200      	movs	r2, #0
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	f04f 30ff 	mov.w	r0, #4294967295
 800229c:	f000 fdad 	bl	8002dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022a0:	4a06      	ldr	r2, [pc, #24]	; (80022bc <HAL_InitTick+0x5c>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e000      	b.n	80022ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000020 	.word	0x20000020
 80022b8:	20000028 	.word	0x20000028
 80022bc:	20000024 	.word	0x20000024

080022c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_IncTick+0x20>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_IncTick+0x24>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <HAL_IncTick+0x24>)
 80022d2:	6013      	str	r3, [r2, #0]
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000028 	.word	0x20000028
 80022e4:	20000cfc 	.word	0x20000cfc

080022e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80022ec:	4b03      	ldr	r3, [pc, #12]	; (80022fc <HAL_GetTick+0x14>)
 80022ee:	681b      	ldr	r3, [r3, #0]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20000cfc 	.word	0x20000cfc

08002300 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b09a      	sub	sp, #104	; 0x68
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e169      	b.n	80025f4 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b00      	cmp	r3, #0
 8002330:	d176      	bne.n	8002420 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	d152      	bne.n	80023e0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff fb75 	bl	8001a44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d13b      	bne.n	80023e0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 fc05 	bl	8002b78 <ADC_Disable>
 800236e:	4603      	mov	r3, r0
 8002370:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b00      	cmp	r3, #0
 800237e:	d12f      	bne.n	80023e0 <HAL_ADC_Init+0xe0>
 8002380:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002384:	2b00      	cmp	r3, #0
 8002386:	d12b      	bne.n	80023e0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002390:	f023 0302 	bic.w	r3, r3, #2
 8002394:	f043 0202 	orr.w	r2, r3, #2
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023aa:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023ba:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023bc:	4b8f      	ldr	r3, [pc, #572]	; (80025fc <HAL_ADC_Init+0x2fc>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a8f      	ldr	r2, [pc, #572]	; (8002600 <HAL_ADC_Init+0x300>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	0c9a      	lsrs	r2, r3, #18
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023d2:	e002      	b.n	80023da <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f9      	bne.n	80023d4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d007      	beq.n	80023fe <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80023f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023fc:	d110      	bne.n	8002420 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f023 0312 	bic.w	r3, r3, #18
 8002406:	f043 0210 	orr.w	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	f043 0201 	orr.w	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	2b00      	cmp	r3, #0
 800242a:	f040 80d6 	bne.w	80025da <HAL_ADC_Init+0x2da>
 800242e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002432:	2b00      	cmp	r3, #0
 8002434:	f040 80d1 	bne.w	80025da <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002442:	2b00      	cmp	r3, #0
 8002444:	f040 80c9 	bne.w	80025da <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002450:	f043 0202 	orr.w	r2, r3, #2
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002458:	4b6a      	ldr	r3, [pc, #424]	; (8002604 <HAL_ADC_Init+0x304>)
 800245a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d108      	bne.n	8002480 <HAL_ADC_Init+0x180>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_ADC_Init+0x180>
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <HAL_ADC_Init+0x182>
 8002480:	2300      	movs	r3, #0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d11c      	bne.n	80024c0 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002486:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002488:	2b00      	cmp	r3, #0
 800248a:	d010      	beq.n	80024ae <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b01      	cmp	r3, #1
 8002496:	d107      	bne.n	80024a8 <HAL_ADC_Init+0x1a8>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_ADC_Init+0x1a8>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <HAL_ADC_Init+0x1aa>
 80024a8:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d108      	bne.n	80024c0 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80024ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024be:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	7e5b      	ldrb	r3, [r3, #25]
 80024c4:	035b      	lsls	r3, r3, #13
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024ca:	2a01      	cmp	r2, #1
 80024cc:	d002      	beq.n	80024d4 <HAL_ADC_Init+0x1d4>
 80024ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024d2:	e000      	b.n	80024d6 <HAL_ADC_Init+0x1d6>
 80024d4:	2200      	movs	r2, #0
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024e6:	4313      	orrs	r3, r2
 80024e8:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d11b      	bne.n	800252c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7e5b      	ldrb	r3, [r3, #25]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d109      	bne.n	8002510 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	3b01      	subs	r3, #1
 8002502:	045a      	lsls	r2, r3, #17
 8002504:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002506:	4313      	orrs	r3, r2
 8002508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250c:	663b      	str	r3, [r7, #96]	; 0x60
 800250e:	e00d      	b.n	800252c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002518:	f043 0220 	orr.w	r2, r3, #32
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002524:	f043 0201 	orr.w	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	2b01      	cmp	r3, #1
 8002532:	d007      	beq.n	8002544 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	4313      	orrs	r3, r2
 800253e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002540:	4313      	orrs	r3, r2
 8002542:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b00      	cmp	r3, #0
 8002550:	d114      	bne.n	800257c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002560:	f023 0302 	bic.w	r3, r3, #2
 8002564:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	7e1b      	ldrb	r3, [r3, #24]
 800256a:	039a      	lsls	r2, r3, #14
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4313      	orrs	r3, r2
 8002576:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002578:	4313      	orrs	r3, r2
 800257a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	4b21      	ldr	r3, [pc, #132]	; (8002608 <HAL_ADC_Init+0x308>)
 8002584:	4013      	ands	r3, r2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800258c:	430b      	orrs	r3, r1
 800258e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d10c      	bne.n	80025b2 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f023 010f 	bic.w	r1, r3, #15
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	1e5a      	subs	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
 80025b0:	e007      	b.n	80025c2 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 020f 	bic.w	r2, r2, #15
 80025c0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f023 0303 	bic.w	r3, r3, #3
 80025d0:	f043 0201 	orr.w	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
 80025d8:	e00a      	b.n	80025f0 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f023 0312 	bic.w	r3, r3, #18
 80025e2:	f043 0210 	orr.w	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80025ea:	2301      	movs	r3, #1
 80025ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80025f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3768      	adds	r7, #104	; 0x68
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000020 	.word	0x20000020
 8002600:	431bde83 	.word	0x431bde83
 8002604:	50000300 	.word	0x50000300
 8002608:	fff0c007 	.word	0xfff0c007

0800260c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800260c:	b480      	push	{r7}
 800260e:	b09b      	sub	sp, #108	; 0x6c
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_ADC_ConfigChannel+0x22>
 800262a:	2302      	movs	r3, #2
 800262c:	e299      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x556>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	f040 827d 	bne.w	8002b40 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b04      	cmp	r3, #4
 800264c:	d81c      	bhi.n	8002688 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	461a      	mov	r2, r3
 8002662:	231f      	movs	r3, #31
 8002664:	4093      	lsls	r3, r2
 8002666:	43db      	mvns	r3, r3
 8002668:	4019      	ands	r1, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4413      	add	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	fa00 f203 	lsl.w	r2, r0, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
 8002686:	e063      	b.n	8002750 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b09      	cmp	r3, #9
 800268e:	d81e      	bhi.n	80026ce <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	3b1e      	subs	r3, #30
 80026a4:	221f      	movs	r2, #31
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	4019      	ands	r1, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	3b1e      	subs	r3, #30
 80026c0:	fa00 f203 	lsl.w	r2, r0, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	635a      	str	r2, [r3, #52]	; 0x34
 80026cc:	e040      	b.n	8002750 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b0e      	cmp	r3, #14
 80026d4:	d81e      	bhi.n	8002714 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	3b3c      	subs	r3, #60	; 0x3c
 80026ea:	221f      	movs	r2, #31
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	4019      	ands	r1, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	3b3c      	subs	r3, #60	; 0x3c
 8002706:	fa00 f203 	lsl.w	r2, r0, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	639a      	str	r2, [r3, #56]	; 0x38
 8002712:	e01d      	b.n	8002750 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	3b5a      	subs	r3, #90	; 0x5a
 8002728:	221f      	movs	r2, #31
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	4019      	ands	r1, r3
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	3b5a      	subs	r3, #90	; 0x5a
 8002744:	fa00 f203 	lsl.w	r2, r0, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b00      	cmp	r3, #0
 800275c:	f040 80e5 	bne.w	800292a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b09      	cmp	r3, #9
 8002766:	d91c      	bls.n	80027a2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6999      	ldr	r1, [r3, #24]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	4613      	mov	r3, r2
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	4413      	add	r3, r2
 8002778:	3b1e      	subs	r3, #30
 800277a:	2207      	movs	r2, #7
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	4019      	ands	r1, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6898      	ldr	r0, [r3, #8]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	3b1e      	subs	r3, #30
 8002794:	fa00 f203 	lsl.w	r2, r0, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	619a      	str	r2, [r3, #24]
 80027a0:	e019      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6959      	ldr	r1, [r3, #20]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4613      	mov	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4413      	add	r3, r2
 80027b2:	2207      	movs	r2, #7
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	4019      	ands	r1, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	6898      	ldr	r0, [r3, #8]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	fa00 f203 	lsl.w	r2, r0, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	08db      	lsrs	r3, r3, #3
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d84f      	bhi.n	8002898 <HAL_ADC_ConfigChannel+0x28c>
 80027f8:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <HAL_ADC_ConfigChannel+0x1f4>)
 80027fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fe:	bf00      	nop
 8002800:	08002811 	.word	0x08002811
 8002804:	08002833 	.word	0x08002833
 8002808:	08002855 	.word	0x08002855
 800280c:	08002877 	.word	0x08002877
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002816:	4b99      	ldr	r3, [pc, #612]	; (8002a7c <HAL_ADC_ConfigChannel+0x470>)
 8002818:	4013      	ands	r3, r2
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	0691      	lsls	r1, r2, #26
 8002820:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002822:	430a      	orrs	r2, r1
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800282e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002830:	e07e      	b.n	8002930 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002838:	4b90      	ldr	r3, [pc, #576]	; (8002a7c <HAL_ADC_ConfigChannel+0x470>)
 800283a:	4013      	ands	r3, r2
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	0691      	lsls	r1, r2, #26
 8002842:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002844:	430a      	orrs	r2, r1
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002850:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002852:	e06d      	b.n	8002930 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800285a:	4b88      	ldr	r3, [pc, #544]	; (8002a7c <HAL_ADC_ConfigChannel+0x470>)
 800285c:	4013      	ands	r3, r2
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	0691      	lsls	r1, r2, #26
 8002864:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002866:	430a      	orrs	r2, r1
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002872:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002874:	e05c      	b.n	8002930 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800287c:	4b7f      	ldr	r3, [pc, #508]	; (8002a7c <HAL_ADC_ConfigChannel+0x470>)
 800287e:	4013      	ands	r3, r2
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	0691      	lsls	r1, r2, #26
 8002886:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002888:	430a      	orrs	r2, r1
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002894:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002896:	e04b      	b.n	8002930 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	069b      	lsls	r3, r3, #26
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d107      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028ba:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	069b      	lsls	r3, r3, #26
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d107      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028de:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	069b      	lsls	r3, r3, #26
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d107      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002902:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800290a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	069b      	lsls	r3, r3, #26
 8002914:	429a      	cmp	r2, r3
 8002916:	d10a      	bne.n	800292e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002926:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002928:	e001      	b.n	800292e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800292a:	bf00      	nop
 800292c:	e000      	b.n	8002930 <HAL_ADC_ConfigChannel+0x324>
      break;
 800292e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d108      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x344>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x344>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <HAL_ADC_ConfigChannel+0x346>
 8002950:	2300      	movs	r3, #0
 8002952:	2b00      	cmp	r3, #0
 8002954:	f040 80ff 	bne.w	8002b56 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d00f      	beq.n	8002980 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2201      	movs	r2, #1
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43da      	mvns	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	400a      	ands	r2, r1
 800297a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800297e:	e049      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2201      	movs	r2, #1
 800298e:	409a      	lsls	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b09      	cmp	r3, #9
 80029a0:	d91c      	bls.n	80029dc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6999      	ldr	r1, [r3, #24]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	3b1b      	subs	r3, #27
 80029b4:	2207      	movs	r2, #7
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	4019      	ands	r1, r3
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6898      	ldr	r0, [r3, #8]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4613      	mov	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	4413      	add	r3, r2
 80029cc:	3b1b      	subs	r3, #27
 80029ce:	fa00 f203 	lsl.w	r2, r0, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	619a      	str	r2, [r3, #24]
 80029da:	e01b      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6959      	ldr	r1, [r3, #20]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	2207      	movs	r2, #7
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	4019      	ands	r1, r3
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	6898      	ldr	r0, [r3, #8]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	fa00 f203 	lsl.w	r2, r0, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a14:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <HAL_ADC_ConfigChannel+0x474>)
 8002a16:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b10      	cmp	r3, #16
 8002a1e:	d105      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d014      	beq.n	8002a56 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a30:	2b11      	cmp	r3, #17
 8002a32:	d105      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a44:	2b12      	cmp	r3, #18
 8002a46:	f040 8086 	bne.w	8002b56 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d17f      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d10d      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x478>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d106      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x478>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e005      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x47a>
 8002a7a:	bf00      	nop
 8002a7c:	83fff000 	.word	0x83fff000
 8002a80:	50000300 	.word	0x50000300
 8002a84:	2300      	movs	r3, #0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d150      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a8a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d010      	beq.n	8002ab2 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d107      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x4a0>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x4a0>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_ADC_ConfigChannel+0x4a2>
 8002aac:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d13c      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d11d      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x4ea>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac2:	d118      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ace:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ad0:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <HAL_ADC_ConfigChannel+0x564>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a27      	ldr	r2, [pc, #156]	; (8002b74 <HAL_ADC_ConfigChannel+0x568>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	0c9a      	lsrs	r2, r3, #18
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ae6:	e002      	b.n	8002aee <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f9      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002af4:	e02e      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b11      	cmp	r3, #17
 8002afc:	d10b      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x50a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b06:	d106      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b12:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b14:	e01e      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b12      	cmp	r3, #18
 8002b1c:	d11a      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b28:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b2a:	e013      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f043 0220 	orr.w	r2, r3, #32
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002b3e:	e00a      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	f043 0220 	orr.w	r2, r3, #32
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002b52:	e000      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b54:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	376c      	adds	r7, #108	; 0x6c
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20000020 	.word	0x20000020
 8002b74:	431bde83 	.word	0x431bde83

08002b78 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d108      	bne.n	8002ba4 <ADC_Disable+0x2c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <ADC_Disable+0x2c>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <ADC_Disable+0x2e>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d047      	beq.n	8002c3a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 030d 	and.w	r3, r3, #13
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d10f      	bne.n	8002bd8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0202 	orr.w	r2, r2, #2
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2203      	movs	r2, #3
 8002bce:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002bd0:	f7ff fb8a 	bl	80022e8 <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002bd6:	e029      	b.n	8002c2c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	f043 0210 	orr.w	r2, r3, #16
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	f043 0201 	orr.w	r2, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e023      	b.n	8002c3c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bf4:	f7ff fb78 	bl	80022e8 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d914      	bls.n	8002c2c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d10d      	bne.n	8002c2c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f043 0210 	orr.w	r2, r3, #16
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c20:	f043 0201 	orr.w	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e007      	b.n	8002c3c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d0dc      	beq.n	8002bf4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <__NVIC_SetPriorityGrouping+0x44>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c60:	4013      	ands	r3, r2
 8002c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c76:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <__NVIC_SetPriorityGrouping+0x44>)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	60d3      	str	r3, [r2, #12]
}
 8002c7c:	bf00      	nop
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	0a1b      	lsrs	r3, r3, #8
 8002c96:	f003 0307 	and.w	r3, r3, #7
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	db0b      	blt.n	8002cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	f003 021f 	and.w	r2, r3, #31
 8002cc0:	4907      	ldr	r1, [pc, #28]	; (8002ce0 <__NVIC_EnableIRQ+0x38>)
 8002cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	2001      	movs	r0, #1
 8002cca:	fa00 f202 	lsl.w	r2, r0, r2
 8002cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	e000e100 	.word	0xe000e100

08002ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	6039      	str	r1, [r7, #0]
 8002cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	db0a      	blt.n	8002d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	490c      	ldr	r1, [pc, #48]	; (8002d30 <__NVIC_SetPriority+0x4c>)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	0112      	lsls	r2, r2, #4
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	440b      	add	r3, r1
 8002d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d0c:	e00a      	b.n	8002d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	4908      	ldr	r1, [pc, #32]	; (8002d34 <__NVIC_SetPriority+0x50>)
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	3b04      	subs	r3, #4
 8002d1c:	0112      	lsls	r2, r2, #4
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	440b      	add	r3, r1
 8002d22:	761a      	strb	r2, [r3, #24]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000e100 	.word	0xe000e100
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	; 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f1c3 0307 	rsb	r3, r3, #7
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	bf28      	it	cs
 8002d56:	2304      	movcs	r3, #4
 8002d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	2b06      	cmp	r3, #6
 8002d60:	d902      	bls.n	8002d68 <NVIC_EncodePriority+0x30>
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3b03      	subs	r3, #3
 8002d66:	e000      	b.n	8002d6a <NVIC_EncodePriority+0x32>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43da      	mvns	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d80:	f04f 31ff 	mov.w	r1, #4294967295
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8a:	43d9      	mvns	r1, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d90:	4313      	orrs	r3, r2
         );
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3724      	adds	r7, #36	; 0x24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002db0:	d301      	bcc.n	8002db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002db2:	2301      	movs	r3, #1
 8002db4:	e00f      	b.n	8002dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002db6:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <SysTick_Config+0x40>)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dbe:	210f      	movs	r1, #15
 8002dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc4:	f7ff ff8e 	bl	8002ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <SysTick_Config+0x40>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dce:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <SysTick_Config+0x40>)
 8002dd0:	2207      	movs	r2, #7
 8002dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	e000e010 	.word	0xe000e010

08002de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7ff ff29 	bl	8002c44 <__NVIC_SetPriorityGrouping>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b086      	sub	sp, #24
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	4603      	mov	r3, r0
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
 8002e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e0c:	f7ff ff3e 	bl	8002c8c <__NVIC_GetPriorityGrouping>
 8002e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	6978      	ldr	r0, [r7, #20]
 8002e18:	f7ff ff8e 	bl	8002d38 <NVIC_EncodePriority>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff5d 	bl	8002ce4 <__NVIC_SetPriority>
}
 8002e2a:	bf00      	nop
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	4603      	mov	r3, r0
 8002e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff31 	bl	8002ca8 <__NVIC_EnableIRQ>
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff ffa2 	bl	8002da0 <SysTick_Config>
 8002e5c:	4603      	mov	r3, r0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e037      	b.n	8002eec <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e92:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002e96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f9c4 	bl	800325c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}  
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_DMA_Start_IT+0x20>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e04a      	b.n	8002faa <HAL_DMA_Start_IT+0xb6>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d13a      	bne.n	8002f9c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2202      	movs	r2, #2
 8002f2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f957 	bl	80031fe <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 020e 	orr.w	r2, r2, #14
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	e00f      	b.n	8002f8a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 020a 	orr.w	r2, r2, #10
 8002f78:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0204 	bic.w	r2, r2, #4
 8002f88:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	e005      	b.n	8002fa8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d008      	beq.n	8002fd6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e020      	b.n	8003018 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 020e 	bic.w	r2, r2, #14
 8002fe4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0201 	bic.w	r2, r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffe:	2101      	movs	r1, #1
 8003000:	fa01 f202 	lsl.w	r2, r1, r2
 8003004:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003036:	2b02      	cmp	r3, #2
 8003038:	d005      	beq.n	8003046 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2204      	movs	r2, #4
 800303e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
 8003044:	e027      	b.n	8003096 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 020e 	bic.w	r2, r2, #14
 8003054:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0201 	bic.w	r2, r2, #1
 8003064:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306e:	2101      	movs	r1, #1
 8003070:	fa01 f202 	lsl.w	r2, r1, r2
 8003074:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	4798      	blx	r3
    } 
  }
  return status;
 8003096:	7bfb      	ldrb	r3, [r7, #15]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	2204      	movs	r2, #4
 80030be:	409a      	lsls	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d024      	beq.n	8003112 <HAL_DMA_IRQHandler+0x72>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d01f      	beq.n	8003112 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d107      	bne.n	80030f0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0204 	bic.w	r2, r2, #4
 80030ee:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f8:	2104      	movs	r1, #4
 80030fa:	fa01 f202 	lsl.w	r2, r1, r2
 80030fe:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d06a      	beq.n	80031de <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003110:	e065      	b.n	80031de <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	2202      	movs	r2, #2
 8003118:	409a      	lsls	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d02c      	beq.n	800317c <HAL_DMA_IRQHandler+0xdc>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d027      	beq.n	800317c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10b      	bne.n	8003152 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 020a 	bic.w	r2, r2, #10
 8003148:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315a:	2102      	movs	r1, #2
 800315c:	fa01 f202 	lsl.w	r2, r1, r2
 8003160:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	2b00      	cmp	r3, #0
 8003170:	d035      	beq.n	80031de <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800317a:	e030      	b.n	80031de <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	2208      	movs	r2, #8
 8003182:	409a      	lsls	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d028      	beq.n	80031de <HAL_DMA_IRQHandler+0x13e>
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d023      	beq.n	80031de <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 020e 	bic.w	r2, r2, #14
 80031a4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ae:	2101      	movs	r1, #1
 80031b0:	fa01 f202 	lsl.w	r2, r1, r2
 80031b4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d004      	beq.n	80031de <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
    }
  }
}  
 80031dc:	e7ff      	b.n	80031de <HAL_DMA_IRQHandler+0x13e>
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003214:	2101      	movs	r1, #1
 8003216:	fa01 f202 	lsl.w	r2, r1, r2
 800321a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b10      	cmp	r3, #16
 800322a:	d108      	bne.n	800323e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800323c:	e007      	b.n	800324e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	60da      	str	r2, [r3, #12]
}
 800324e:	bf00      	nop
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <DMA_CalcBaseAndBitshift+0x34>)
 800326c:	4413      	add	r3, r2
 800326e:	4a09      	ldr	r2, [pc, #36]	; (8003294 <DMA_CalcBaseAndBitshift+0x38>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	009a      	lsls	r2, r3, #2
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a06      	ldr	r2, [pc, #24]	; (8003298 <DMA_CalcBaseAndBitshift+0x3c>)
 8003280:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	bffdfff8 	.word	0xbffdfff8
 8003294:	cccccccd 	.word	0xcccccccd
 8003298:	40020000 	.word	0x40020000

0800329c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032aa:	e14e      	b.n	800354a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	2101      	movs	r1, #1
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	fa01 f303 	lsl.w	r3, r1, r3
 80032b8:	4013      	ands	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 8140 	beq.w	8003544 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d005      	beq.n	80032dc <HAL_GPIO_Init+0x40>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d130      	bne.n	800333e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2203      	movs	r2, #3
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003312:	2201      	movs	r2, #1
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	f003 0201 	and.w	r2, r3, #1
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b03      	cmp	r3, #3
 8003348:	d017      	beq.n	800337a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	2203      	movs	r2, #3
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4013      	ands	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d123      	bne.n	80033ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	08da      	lsrs	r2, r3, #3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3208      	adds	r2, #8
 800338e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003392:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	220f      	movs	r2, #15
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	08da      	lsrs	r2, r3, #3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3208      	adds	r2, #8
 80033c8:	6939      	ldr	r1, [r7, #16]
 80033ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	2203      	movs	r2, #3
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 0203 	and.w	r2, r3, #3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 809a 	beq.w	8003544 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003410:	4b55      	ldr	r3, [pc, #340]	; (8003568 <HAL_GPIO_Init+0x2cc>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	4a54      	ldr	r2, [pc, #336]	; (8003568 <HAL_GPIO_Init+0x2cc>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6193      	str	r3, [r2, #24]
 800341c:	4b52      	ldr	r3, [pc, #328]	; (8003568 <HAL_GPIO_Init+0x2cc>)
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003428:	4a50      	ldr	r2, [pc, #320]	; (800356c <HAL_GPIO_Init+0x2d0>)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	089b      	lsrs	r3, r3, #2
 800342e:	3302      	adds	r3, #2
 8003430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003434:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	220f      	movs	r2, #15
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003452:	d013      	beq.n	800347c <HAL_GPIO_Init+0x1e0>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a46      	ldr	r2, [pc, #280]	; (8003570 <HAL_GPIO_Init+0x2d4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00d      	beq.n	8003478 <HAL_GPIO_Init+0x1dc>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a45      	ldr	r2, [pc, #276]	; (8003574 <HAL_GPIO_Init+0x2d8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d007      	beq.n	8003474 <HAL_GPIO_Init+0x1d8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a44      	ldr	r2, [pc, #272]	; (8003578 <HAL_GPIO_Init+0x2dc>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d101      	bne.n	8003470 <HAL_GPIO_Init+0x1d4>
 800346c:	2303      	movs	r3, #3
 800346e:	e006      	b.n	800347e <HAL_GPIO_Init+0x1e2>
 8003470:	2305      	movs	r3, #5
 8003472:	e004      	b.n	800347e <HAL_GPIO_Init+0x1e2>
 8003474:	2302      	movs	r3, #2
 8003476:	e002      	b.n	800347e <HAL_GPIO_Init+0x1e2>
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <HAL_GPIO_Init+0x1e2>
 800347c:	2300      	movs	r3, #0
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	f002 0203 	and.w	r2, r2, #3
 8003484:	0092      	lsls	r2, r2, #2
 8003486:	4093      	lsls	r3, r2
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800348e:	4937      	ldr	r1, [pc, #220]	; (800356c <HAL_GPIO_Init+0x2d0>)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	089b      	lsrs	r3, r3, #2
 8003494:	3302      	adds	r3, #2
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800349c:	4b37      	ldr	r3, [pc, #220]	; (800357c <HAL_GPIO_Init+0x2e0>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	43db      	mvns	r3, r3
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4013      	ands	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80034c0:	4a2e      	ldr	r2, [pc, #184]	; (800357c <HAL_GPIO_Init+0x2e0>)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034c6:	4b2d      	ldr	r3, [pc, #180]	; (800357c <HAL_GPIO_Init+0x2e0>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	43db      	mvns	r3, r3
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4013      	ands	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80034ea:	4a24      	ldr	r2, [pc, #144]	; (800357c <HAL_GPIO_Init+0x2e0>)
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034f0:	4b22      	ldr	r3, [pc, #136]	; (800357c <HAL_GPIO_Init+0x2e0>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003514:	4a19      	ldr	r2, [pc, #100]	; (800357c <HAL_GPIO_Init+0x2e0>)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800351a:	4b18      	ldr	r3, [pc, #96]	; (800357c <HAL_GPIO_Init+0x2e0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	43db      	mvns	r3, r3
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4013      	ands	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800353e:	4a0f      	ldr	r2, [pc, #60]	; (800357c <HAL_GPIO_Init+0x2e0>)
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	3301      	adds	r3, #1
 8003548:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	f47f aea9 	bne.w	80032ac <HAL_GPIO_Init+0x10>
  }
}
 800355a:	bf00      	nop
 800355c:	bf00      	nop
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	40021000 	.word	0x40021000
 800356c:	40010000 	.word	0x40010000
 8003570:	48000400 	.word	0x48000400
 8003574:	48000800 	.word	0x48000800
 8003578:	48000c00 	.word	0x48000c00
 800357c:	40010400 	.word	0x40010400

08003580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
 800358c:	4613      	mov	r3, r2
 800358e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003590:	787b      	ldrb	r3, [r7, #1]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003596:	887a      	ldrh	r2, [r7, #2]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800359c:	e002      	b.n	80035a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800359e:	887a      	ldrh	r2, [r7, #2]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035c0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d102      	bne.n	80035d6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f001 b823 	b.w	800461c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 817d 	beq.w	80038e6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80035ec:	4bbc      	ldr	r3, [pc, #752]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 030c 	and.w	r3, r3, #12
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d00c      	beq.n	8003612 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035f8:	4bb9      	ldr	r3, [pc, #740]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b08      	cmp	r3, #8
 8003602:	d15c      	bne.n	80036be <HAL_RCC_OscConfig+0x10e>
 8003604:	4bb6      	ldr	r3, [pc, #728]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003610:	d155      	bne.n	80036be <HAL_RCC_OscConfig+0x10e>
 8003612:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003616:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800361e:	fa93 f3a3 	rbit	r3, r3
 8003622:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003626:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362a:	fab3 f383 	clz	r3, r3
 800362e:	b2db      	uxtb	r3, r3
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f043 0301 	orr.w	r3, r3, #1
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b01      	cmp	r3, #1
 800363c:	d102      	bne.n	8003644 <HAL_RCC_OscConfig+0x94>
 800363e:	4ba8      	ldr	r3, [pc, #672]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	e015      	b.n	8003670 <HAL_RCC_OscConfig+0xc0>
 8003644:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003648:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003650:	fa93 f3a3 	rbit	r3, r3
 8003654:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003658:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800365c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003660:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003664:	fa93 f3a3 	rbit	r3, r3
 8003668:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800366c:	4b9c      	ldr	r3, [pc, #624]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003674:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003678:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800367c:	fa92 f2a2 	rbit	r2, r2
 8003680:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003684:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003688:	fab2 f282 	clz	r2, r2
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	f042 0220 	orr.w	r2, r2, #32
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	f002 021f 	and.w	r2, r2, #31
 8003698:	2101      	movs	r1, #1
 800369a:	fa01 f202 	lsl.w	r2, r1, r2
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 811f 	beq.w	80038e4 <HAL_RCC_OscConfig+0x334>
 80036a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f040 8116 	bne.w	80038e4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f000 bfaf 	b.w	800461c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ce:	d106      	bne.n	80036de <HAL_RCC_OscConfig+0x12e>
 80036d0:	4b83      	ldr	r3, [pc, #524]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a82      	ldr	r2, [pc, #520]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 80036d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	e036      	b.n	800374c <HAL_RCC_OscConfig+0x19c>
 80036de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0x158>
 80036ee:	4b7c      	ldr	r3, [pc, #496]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a7b      	ldr	r2, [pc, #492]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 80036f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4b79      	ldr	r3, [pc, #484]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a78      	ldr	r2, [pc, #480]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 8003700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e021      	b.n	800374c <HAL_RCC_OscConfig+0x19c>
 8003708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0x184>
 800371a:	4b71      	ldr	r3, [pc, #452]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a70      	ldr	r2, [pc, #448]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 8003720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	4b6e      	ldr	r3, [pc, #440]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a6d      	ldr	r2, [pc, #436]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 800372c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e00b      	b.n	800374c <HAL_RCC_OscConfig+0x19c>
 8003734:	4b6a      	ldr	r3, [pc, #424]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a69      	ldr	r2, [pc, #420]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 800373a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	4b67      	ldr	r3, [pc, #412]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a66      	ldr	r2, [pc, #408]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 8003746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800374a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800374c:	4b64      	ldr	r3, [pc, #400]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	f023 020f 	bic.w	r2, r3, #15
 8003754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003758:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	495f      	ldr	r1, [pc, #380]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 8003762:	4313      	orrs	r3, r2
 8003764:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d059      	beq.n	800382a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003776:	f7fe fdb7 	bl	80022e8 <HAL_GetTick>
 800377a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377e:	e00a      	b.n	8003796 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003780:	f7fe fdb2 	bl	80022e8 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b64      	cmp	r3, #100	; 0x64
 800378e:	d902      	bls.n	8003796 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	f000 bf43 	b.w	800461c <HAL_RCC_OscConfig+0x106c>
 8003796:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800379a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80037aa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d102      	bne.n	80037c8 <HAL_RCC_OscConfig+0x218>
 80037c2:	4b47      	ldr	r3, [pc, #284]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	e015      	b.n	80037f4 <HAL_RCC_OscConfig+0x244>
 80037c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037cc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80037d4:	fa93 f3a3 	rbit	r3, r3
 80037d8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80037dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037e0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80037e4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80037f0:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037f8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80037fc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003800:	fa92 f2a2 	rbit	r2, r2
 8003804:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003808:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800380c:	fab2 f282 	clz	r2, r2
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	f042 0220 	orr.w	r2, r2, #32
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	f002 021f 	and.w	r2, r2, #31
 800381c:	2101      	movs	r1, #1
 800381e:	fa01 f202 	lsl.w	r2, r1, r2
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0ab      	beq.n	8003780 <HAL_RCC_OscConfig+0x1d0>
 8003828:	e05d      	b.n	80038e6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382a:	f7fe fd5d 	bl	80022e8 <HAL_GetTick>
 800382e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003832:	e00a      	b.n	800384a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003834:	f7fe fd58 	bl	80022e8 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b64      	cmp	r3, #100	; 0x64
 8003842:	d902      	bls.n	800384a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	f000 bee9 	b.w	800461c <HAL_RCC_OscConfig+0x106c>
 800384a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800384e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003856:	fa93 f3a3 	rbit	r3, r3
 800385a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800385e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003862:	fab3 f383 	clz	r3, r3
 8003866:	b2db      	uxtb	r3, r3
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d102      	bne.n	800387c <HAL_RCC_OscConfig+0x2cc>
 8003876:	4b1a      	ldr	r3, [pc, #104]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	e015      	b.n	80038a8 <HAL_RCC_OscConfig+0x2f8>
 800387c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003880:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003888:	fa93 f3a3 	rbit	r3, r3
 800388c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003894:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003898:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800389c:	fa93 f3a3 	rbit	r3, r3
 80038a0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80038a4:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <HAL_RCC_OscConfig+0x330>)
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038ac:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80038b0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80038b4:	fa92 f2a2 	rbit	r2, r2
 80038b8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80038bc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80038c0:	fab2 f282 	clz	r2, r2
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	f042 0220 	orr.w	r2, r2, #32
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	f002 021f 	and.w	r2, r2, #31
 80038d0:	2101      	movs	r1, #1
 80038d2:	fa01 f202 	lsl.w	r2, r1, r2
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1ab      	bne.n	8003834 <HAL_RCC_OscConfig+0x284>
 80038dc:	e003      	b.n	80038e6 <HAL_RCC_OscConfig+0x336>
 80038de:	bf00      	nop
 80038e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 817d 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80038fc:	4ba6      	ldr	r3, [pc, #664]	; (8003b98 <HAL_RCC_OscConfig+0x5e8>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 030c 	and.w	r3, r3, #12
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00b      	beq.n	8003920 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003908:	4ba3      	ldr	r3, [pc, #652]	; (8003b98 <HAL_RCC_OscConfig+0x5e8>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 030c 	and.w	r3, r3, #12
 8003910:	2b08      	cmp	r3, #8
 8003912:	d172      	bne.n	80039fa <HAL_RCC_OscConfig+0x44a>
 8003914:	4ba0      	ldr	r3, [pc, #640]	; (8003b98 <HAL_RCC_OscConfig+0x5e8>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d16c      	bne.n	80039fa <HAL_RCC_OscConfig+0x44a>
 8003920:	2302      	movs	r3, #2
 8003922:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800392a:	fa93 f3a3 	rbit	r3, r3
 800392e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003932:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003936:	fab3 f383 	clz	r3, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	b2db      	uxtb	r3, r3
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b01      	cmp	r3, #1
 8003948:	d102      	bne.n	8003950 <HAL_RCC_OscConfig+0x3a0>
 800394a:	4b93      	ldr	r3, [pc, #588]	; (8003b98 <HAL_RCC_OscConfig+0x5e8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	e013      	b.n	8003978 <HAL_RCC_OscConfig+0x3c8>
 8003950:	2302      	movs	r3, #2
 8003952:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003956:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800395a:	fa93 f3a3 	rbit	r3, r3
 800395e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003962:	2302      	movs	r3, #2
 8003964:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003968:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800396c:	fa93 f3a3 	rbit	r3, r3
 8003970:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003974:	4b88      	ldr	r3, [pc, #544]	; (8003b98 <HAL_RCC_OscConfig+0x5e8>)
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	2202      	movs	r2, #2
 800397a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800397e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003982:	fa92 f2a2 	rbit	r2, r2
 8003986:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800398a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800398e:	fab2 f282 	clz	r2, r2
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	f042 0220 	orr.w	r2, r2, #32
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	f002 021f 	and.w	r2, r2, #31
 800399e:	2101      	movs	r1, #1
 80039a0:	fa01 f202 	lsl.w	r2, r1, r2
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCC_OscConfig+0x410>
 80039aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d002      	beq.n	80039c0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	f000 be2e 	b.w	800461c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c0:	4b75      	ldr	r3, [pc, #468]	; (8003b98 <HAL_RCC_OscConfig+0x5e8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	21f8      	movs	r1, #248	; 0xf8
 80039d6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039da:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80039de:	fa91 f1a1 	rbit	r1, r1
 80039e2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80039e6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80039ea:	fab1 f181 	clz	r1, r1
 80039ee:	b2c9      	uxtb	r1, r1
 80039f0:	408b      	lsls	r3, r1
 80039f2:	4969      	ldr	r1, [pc, #420]	; (8003b98 <HAL_RCC_OscConfig+0x5e8>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f8:	e0fd      	b.n	8003bf6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8088 	beq.w	8003b1c <HAL_RCC_OscConfig+0x56c>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003a16:	fa93 f3a3 	rbit	r3, r3
 8003a1a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003a1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a22:	fab3 f383 	clz	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	461a      	mov	r2, r3
 8003a34:	2301      	movs	r3, #1
 8003a36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7fe fc56 	bl	80022e8 <HAL_GetTick>
 8003a3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a40:	e00a      	b.n	8003a58 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a42:	f7fe fc51 	bl	80022e8 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d902      	bls.n	8003a58 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	f000 bde2 	b.w	800461c <HAL_RCC_OscConfig+0x106c>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003a62:	fa93 f3a3 	rbit	r3, r3
 8003a66:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003a6a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d102      	bne.n	8003a88 <HAL_RCC_OscConfig+0x4d8>
 8003a82:	4b45      	ldr	r3, [pc, #276]	; (8003b98 <HAL_RCC_OscConfig+0x5e8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	e013      	b.n	8003ab0 <HAL_RCC_OscConfig+0x500>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003aa0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003aa4:	fa93 f3a3 	rbit	r3, r3
 8003aa8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003aac:	4b3a      	ldr	r3, [pc, #232]	; (8003b98 <HAL_RCC_OscConfig+0x5e8>)
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003ab6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003aba:	fa92 f2a2 	rbit	r2, r2
 8003abe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003ac2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003ac6:	fab2 f282 	clz	r2, r2
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	f042 0220 	orr.w	r2, r2, #32
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	f002 021f 	and.w	r2, r2, #31
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0af      	beq.n	8003a42 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae2:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <HAL_RCC_OscConfig+0x5e8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	21f8      	movs	r1, #248	; 0xf8
 8003af8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003b00:	fa91 f1a1 	rbit	r1, r1
 8003b04:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003b08:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003b0c:	fab1 f181 	clz	r1, r1
 8003b10:	b2c9      	uxtb	r1, r1
 8003b12:	408b      	lsls	r3, r1
 8003b14:	4920      	ldr	r1, [pc, #128]	; (8003b98 <HAL_RCC_OscConfig+0x5e8>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
 8003b1a:	e06c      	b.n	8003bf6 <HAL_RCC_OscConfig+0x646>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003b26:	fa93 f3a3 	rbit	r3, r3
 8003b2a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003b2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b32:	fab3 f383 	clz	r3, r3
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	461a      	mov	r2, r3
 8003b44:	2300      	movs	r3, #0
 8003b46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7fe fbce 	bl	80022e8 <HAL_GetTick>
 8003b4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b50:	e00a      	b.n	8003b68 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b52:	f7fe fbc9 	bl	80022e8 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d902      	bls.n	8003b68 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	f000 bd5a 	b.w	800461c <HAL_RCC_OscConfig+0x106c>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b72:	fa93 f3a3 	rbit	r3, r3
 8003b76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7e:	fab3 f383 	clz	r3, r3
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d104      	bne.n	8003b9c <HAL_RCC_OscConfig+0x5ec>
 8003b92:	4b01      	ldr	r3, [pc, #4]	; (8003b98 <HAL_RCC_OscConfig+0x5e8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	e015      	b.n	8003bc4 <HAL_RCC_OscConfig+0x614>
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ba6:	fa93 f3a3 	rbit	r3, r3
 8003baa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003bae:	2302      	movs	r3, #2
 8003bb0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003bb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003bb8:	fa93 f3a3 	rbit	r3, r3
 8003bbc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003bc0:	4bc8      	ldr	r3, [pc, #800]	; (8003ee4 <HAL_RCC_OscConfig+0x934>)
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003bca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003bce:	fa92 f2a2 	rbit	r2, r2
 8003bd2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003bd6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003bda:	fab2 f282 	clz	r2, r2
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	f042 0220 	orr.w	r2, r2, #32
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	f002 021f 	and.w	r2, r2, #31
 8003bea:	2101      	movs	r1, #1
 8003bec:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1ad      	bne.n	8003b52 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 8110 	beq.w	8003e2c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d079      	beq.n	8003d10 <HAL_RCC_OscConfig+0x760>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c32:	fab3 f383 	clz	r3, r3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4bab      	ldr	r3, [pc, #684]	; (8003ee8 <HAL_RCC_OscConfig+0x938>)
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	461a      	mov	r2, r3
 8003c42:	2301      	movs	r3, #1
 8003c44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c46:	f7fe fb4f 	bl	80022e8 <HAL_GetTick>
 8003c4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c50:	f7fe fb4a 	bl	80022e8 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d902      	bls.n	8003c66 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	f000 bcdb 	b.w	800461c <HAL_RCC_OscConfig+0x106c>
 8003c66:	2302      	movs	r3, #2
 8003c68:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c70:	fa93 f3a3 	rbit	r3, r3
 8003c74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003c80:	2202      	movs	r2, #2
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c88:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	fa93 f2a3 	rbit	r2, r3
 8003c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	fa93 f2a3 	rbit	r2, r3
 8003cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003cbe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc0:	4b88      	ldr	r3, [pc, #544]	; (8003ee4 <HAL_RCC_OscConfig+0x934>)
 8003cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003ccc:	2102      	movs	r1, #2
 8003cce:	6019      	str	r1, [r3, #0]
 8003cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	fa93 f1a3 	rbit	r1, r3
 8003cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ce6:	6019      	str	r1, [r3, #0]
  return result;
 8003ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	fab3 f383 	clz	r3, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	2101      	movs	r1, #1
 8003d04:	fa01 f303 	lsl.w	r3, r1, r3
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0a0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x6a0>
 8003d0e:	e08d      	b.n	8003e2c <HAL_RCC_OscConfig+0x87c>
 8003d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003d18:	2201      	movs	r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d20:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	fa93 f2a3 	rbit	r2, r3
 8003d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d2e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003d32:	601a      	str	r2, [r3, #0]
  return result;
 8003d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d38:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003d3c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d3e:	fab3 f383 	clz	r3, r3
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	4b68      	ldr	r3, [pc, #416]	; (8003ee8 <HAL_RCC_OscConfig+0x938>)
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2300      	movs	r3, #0
 8003d50:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d52:	f7fe fac9 	bl	80022e8 <HAL_GetTick>
 8003d56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d5c:	f7fe fac4 	bl	80022e8 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d902      	bls.n	8003d72 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	f000 bc55 	b.w	800461c <HAL_RCC_OscConfig+0x106c>
 8003d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d76:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d82:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	fa93 f2a3 	rbit	r2, r3
 8003d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d90:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003d9e:	2202      	movs	r2, #2
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	fa93 f2a3 	rbit	r2, r3
 8003db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	fa93 f2a3 	rbit	r2, r3
 8003dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003ddc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dde:	4b41      	ldr	r3, [pc, #260]	; (8003ee4 <HAL_RCC_OscConfig+0x934>)
 8003de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003dea:	2102      	movs	r1, #2
 8003dec:	6019      	str	r1, [r3, #0]
 8003dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	fa93 f1a3 	rbit	r1, r3
 8003dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e00:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003e04:	6019      	str	r1, [r3, #0]
  return result;
 8003e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e0a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	fab3 f383 	clz	r3, r3
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f003 031f 	and.w	r3, r3, #31
 8003e20:	2101      	movs	r1, #1
 8003e22:	fa01 f303 	lsl.w	r3, r1, r3
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d197      	bne.n	8003d5c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 81a1 	beq.w	8004184 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e42:	2300      	movs	r3, #0
 8003e44:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e48:	4b26      	ldr	r3, [pc, #152]	; (8003ee4 <HAL_RCC_OscConfig+0x934>)
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d116      	bne.n	8003e82 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e54:	4b23      	ldr	r3, [pc, #140]	; (8003ee4 <HAL_RCC_OscConfig+0x934>)
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	4a22      	ldr	r2, [pc, #136]	; (8003ee4 <HAL_RCC_OscConfig+0x934>)
 8003e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	61d3      	str	r3, [r2, #28]
 8003e60:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <HAL_RCC_OscConfig+0x934>)
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e76:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003e7a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e82:	4b1a      	ldr	r3, [pc, #104]	; (8003eec <HAL_RCC_OscConfig+0x93c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d11a      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e8e:	4b17      	ldr	r3, [pc, #92]	; (8003eec <HAL_RCC_OscConfig+0x93c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a16      	ldr	r2, [pc, #88]	; (8003eec <HAL_RCC_OscConfig+0x93c>)
 8003e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e9a:	f7fe fa25 	bl	80022e8 <HAL_GetTick>
 8003e9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea2:	e009      	b.n	8003eb8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea4:	f7fe fa20 	bl	80022e8 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b64      	cmp	r3, #100	; 0x64
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e3b1      	b.n	800461c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <HAL_RCC_OscConfig+0x93c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0ef      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d10d      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x940>
 8003ed4:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <HAL_RCC_OscConfig+0x934>)
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	4a02      	ldr	r2, [pc, #8]	; (8003ee4 <HAL_RCC_OscConfig+0x934>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6213      	str	r3, [r2, #32]
 8003ee0:	e03c      	b.n	8003f5c <HAL_RCC_OscConfig+0x9ac>
 8003ee2:	bf00      	nop
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	10908120 	.word	0x10908120
 8003eec:	40007000 	.word	0x40007000
 8003ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10c      	bne.n	8003f1a <HAL_RCC_OscConfig+0x96a>
 8003f00:	4bc1      	ldr	r3, [pc, #772]	; (8004208 <HAL_RCC_OscConfig+0xc58>)
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	4ac0      	ldr	r2, [pc, #768]	; (8004208 <HAL_RCC_OscConfig+0xc58>)
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	6213      	str	r3, [r2, #32]
 8003f0c:	4bbe      	ldr	r3, [pc, #760]	; (8004208 <HAL_RCC_OscConfig+0xc58>)
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	4abd      	ldr	r2, [pc, #756]	; (8004208 <HAL_RCC_OscConfig+0xc58>)
 8003f12:	f023 0304 	bic.w	r3, r3, #4
 8003f16:	6213      	str	r3, [r2, #32]
 8003f18:	e020      	b.n	8003f5c <HAL_RCC_OscConfig+0x9ac>
 8003f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	2b05      	cmp	r3, #5
 8003f28:	d10c      	bne.n	8003f44 <HAL_RCC_OscConfig+0x994>
 8003f2a:	4bb7      	ldr	r3, [pc, #732]	; (8004208 <HAL_RCC_OscConfig+0xc58>)
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	4ab6      	ldr	r2, [pc, #728]	; (8004208 <HAL_RCC_OscConfig+0xc58>)
 8003f30:	f043 0304 	orr.w	r3, r3, #4
 8003f34:	6213      	str	r3, [r2, #32]
 8003f36:	4bb4      	ldr	r3, [pc, #720]	; (8004208 <HAL_RCC_OscConfig+0xc58>)
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	4ab3      	ldr	r2, [pc, #716]	; (8004208 <HAL_RCC_OscConfig+0xc58>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	6213      	str	r3, [r2, #32]
 8003f42:	e00b      	b.n	8003f5c <HAL_RCC_OscConfig+0x9ac>
 8003f44:	4bb0      	ldr	r3, [pc, #704]	; (8004208 <HAL_RCC_OscConfig+0xc58>)
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	4aaf      	ldr	r2, [pc, #700]	; (8004208 <HAL_RCC_OscConfig+0xc58>)
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
 8003f4e:	6213      	str	r3, [r2, #32]
 8003f50:	4bad      	ldr	r3, [pc, #692]	; (8004208 <HAL_RCC_OscConfig+0xc58>)
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	4aac      	ldr	r2, [pc, #688]	; (8004208 <HAL_RCC_OscConfig+0xc58>)
 8003f56:	f023 0304 	bic.w	r3, r3, #4
 8003f5a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8081 	beq.w	8004070 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6e:	f7fe f9bb 	bl	80022e8 <HAL_GetTick>
 8003f72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f76:	e00b      	b.n	8003f90 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f78:	f7fe f9b6 	bl	80022e8 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e345      	b.n	800461c <HAL_RCC_OscConfig+0x106c>
 8003f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f94:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003f98:	2202      	movs	r2, #2
 8003f9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	fa93 f2a3 	rbit	r2, r3
 8003faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	fa93 f2a3 	rbit	r2, r3
 8003fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003fd6:	601a      	str	r2, [r3, #0]
  return result;
 8003fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fdc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003fe0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe2:	fab3 f383 	clz	r3, r3
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	f043 0302 	orr.w	r3, r3, #2
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d102      	bne.n	8003ffc <HAL_RCC_OscConfig+0xa4c>
 8003ff6:	4b84      	ldr	r3, [pc, #528]	; (8004208 <HAL_RCC_OscConfig+0xc58>)
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	e013      	b.n	8004024 <HAL_RCC_OscConfig+0xa74>
 8003ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004000:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004004:	2202      	movs	r2, #2
 8004006:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	fa93 f2a3 	rbit	r2, r3
 8004016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	4b79      	ldr	r3, [pc, #484]	; (8004208 <HAL_RCC_OscConfig+0xc58>)
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004028:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800402c:	2102      	movs	r1, #2
 800402e:	6011      	str	r1, [r2, #0]
 8004030:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004034:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	fa92 f1a2 	rbit	r1, r2
 800403e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004042:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004046:	6011      	str	r1, [r2, #0]
  return result;
 8004048:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800404c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004050:	6812      	ldr	r2, [r2, #0]
 8004052:	fab2 f282 	clz	r2, r2
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	f002 021f 	and.w	r2, r2, #31
 8004062:	2101      	movs	r1, #1
 8004064:	fa01 f202 	lsl.w	r2, r1, r2
 8004068:	4013      	ands	r3, r2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d084      	beq.n	8003f78 <HAL_RCC_OscConfig+0x9c8>
 800406e:	e07f      	b.n	8004170 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004070:	f7fe f93a 	bl	80022e8 <HAL_GetTick>
 8004074:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004078:	e00b      	b.n	8004092 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800407a:	f7fe f935 	bl	80022e8 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f241 3288 	movw	r2, #5000	; 0x1388
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e2c4      	b.n	800461c <HAL_RCC_OscConfig+0x106c>
 8004092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004096:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800409a:	2202      	movs	r2, #2
 800409c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	fa93 f2a3 	rbit	r2, r3
 80040ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80040be:	2202      	movs	r2, #2
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	fa93 f2a3 	rbit	r2, r3
 80040d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80040d8:	601a      	str	r2, [r3, #0]
  return result;
 80040da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040de:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80040e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e4:	fab3 f383 	clz	r3, r3
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	f043 0302 	orr.w	r3, r3, #2
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d102      	bne.n	80040fe <HAL_RCC_OscConfig+0xb4e>
 80040f8:	4b43      	ldr	r3, [pc, #268]	; (8004208 <HAL_RCC_OscConfig+0xc58>)
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	e013      	b.n	8004126 <HAL_RCC_OscConfig+0xb76>
 80040fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004102:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004106:	2202      	movs	r2, #2
 8004108:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	fa93 f2a3 	rbit	r2, r3
 8004118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	4b39      	ldr	r3, [pc, #228]	; (8004208 <HAL_RCC_OscConfig+0xc58>)
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800412a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800412e:	2102      	movs	r1, #2
 8004130:	6011      	str	r1, [r2, #0]
 8004132:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004136:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800413a:	6812      	ldr	r2, [r2, #0]
 800413c:	fa92 f1a2 	rbit	r1, r2
 8004140:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004144:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004148:	6011      	str	r1, [r2, #0]
  return result;
 800414a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800414e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	fab2 f282 	clz	r2, r2
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	f002 021f 	and.w	r2, r2, #31
 8004164:	2101      	movs	r1, #1
 8004166:	fa01 f202 	lsl.w	r2, r1, r2
 800416a:	4013      	ands	r3, r2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d184      	bne.n	800407a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004170:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004174:	2b01      	cmp	r3, #1
 8004176:	d105      	bne.n	8004184 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004178:	4b23      	ldr	r3, [pc, #140]	; (8004208 <HAL_RCC_OscConfig+0xc58>)
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	4a22      	ldr	r2, [pc, #136]	; (8004208 <HAL_RCC_OscConfig+0xc58>)
 800417e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004182:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004188:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 8242 	beq.w	800461a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004196:	4b1c      	ldr	r3, [pc, #112]	; (8004208 <HAL_RCC_OscConfig+0xc58>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b08      	cmp	r3, #8
 80041a0:	f000 8213 	beq.w	80045ca <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	f040 8162 	bne.w	800447a <HAL_RCC_OscConfig+0xeca>
 80041b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ba:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80041be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	fa93 f2a3 	rbit	r2, r3
 80041d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80041da:	601a      	str	r2, [r3, #0]
  return result;
 80041dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80041e4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	461a      	mov	r2, r3
 80041f8:	2300      	movs	r3, #0
 80041fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fc:	f7fe f874 	bl	80022e8 <HAL_GetTick>
 8004200:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004204:	e00c      	b.n	8004220 <HAL_RCC_OscConfig+0xc70>
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800420c:	f7fe f86c 	bl	80022e8 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e1fd      	b.n	800461c <HAL_RCC_OscConfig+0x106c>
 8004220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004224:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004228:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800422c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004232:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	fa93 f2a3 	rbit	r2, r3
 800423c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004240:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004244:	601a      	str	r2, [r3, #0]
  return result;
 8004246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800424a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800424e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004250:	fab3 f383 	clz	r3, r3
 8004254:	b2db      	uxtb	r3, r3
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	b2db      	uxtb	r3, r3
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b01      	cmp	r3, #1
 8004262:	d102      	bne.n	800426a <HAL_RCC_OscConfig+0xcba>
 8004264:	4bb0      	ldr	r3, [pc, #704]	; (8004528 <HAL_RCC_OscConfig+0xf78>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	e027      	b.n	80042ba <HAL_RCC_OscConfig+0xd0a>
 800426a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800426e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004272:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004276:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800427c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	fa93 f2a3 	rbit	r2, r3
 8004286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800428a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004294:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004298:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	fa93 f2a3 	rbit	r2, r3
 80042ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	4b9c      	ldr	r3, [pc, #624]	; (8004528 <HAL_RCC_OscConfig+0xf78>)
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042be:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80042c2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042c6:	6011      	str	r1, [r2, #0]
 80042c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042cc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	fa92 f1a2 	rbit	r1, r2
 80042d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042da:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80042de:	6011      	str	r1, [r2, #0]
  return result;
 80042e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042e4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	fab2 f282 	clz	r2, r2
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	f042 0220 	orr.w	r2, r2, #32
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	f002 021f 	and.w	r2, r2, #31
 80042fa:	2101      	movs	r1, #1
 80042fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004300:	4013      	ands	r3, r2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d182      	bne.n	800420c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004306:	4b88      	ldr	r3, [pc, #544]	; (8004528 <HAL_RCC_OscConfig+0xf78>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800430e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004312:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800431a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	430b      	orrs	r3, r1
 8004328:	497f      	ldr	r1, [pc, #508]	; (8004528 <HAL_RCC_OscConfig+0xf78>)
 800432a:	4313      	orrs	r3, r2
 800432c:	604b      	str	r3, [r1, #4]
 800432e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004332:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004336:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800433a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004340:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	fa93 f2a3 	rbit	r2, r3
 800434a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800434e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004352:	601a      	str	r2, [r3, #0]
  return result;
 8004354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004358:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800435c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800435e:	fab3 f383 	clz	r3, r3
 8004362:	b2db      	uxtb	r3, r3
 8004364:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004368:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	461a      	mov	r2, r3
 8004370:	2301      	movs	r3, #1
 8004372:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fd ffb8 	bl	80022e8 <HAL_GetTick>
 8004378:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800437c:	e009      	b.n	8004392 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437e:	f7fd ffb3 	bl	80022e8 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e144      	b.n	800461c <HAL_RCC_OscConfig+0x106c>
 8004392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004396:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800439a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800439e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	fa93 f2a3 	rbit	r2, r3
 80043ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80043b6:	601a      	str	r2, [r3, #0]
  return result;
 80043b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043bc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80043c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043c2:	fab3 f383 	clz	r3, r3
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d102      	bne.n	80043dc <HAL_RCC_OscConfig+0xe2c>
 80043d6:	4b54      	ldr	r3, [pc, #336]	; (8004528 <HAL_RCC_OscConfig+0xf78>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	e027      	b.n	800442c <HAL_RCC_OscConfig+0xe7c>
 80043dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80043e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ee:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	fa93 f2a3 	rbit	r2, r3
 80043f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043fc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004406:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800440a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004414:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	fa93 f2a3 	rbit	r2, r3
 800441e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004422:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	4b3f      	ldr	r3, [pc, #252]	; (8004528 <HAL_RCC_OscConfig+0xf78>)
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004430:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004434:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004438:	6011      	str	r1, [r2, #0]
 800443a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800443e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004442:	6812      	ldr	r2, [r2, #0]
 8004444:	fa92 f1a2 	rbit	r1, r2
 8004448:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800444c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004450:	6011      	str	r1, [r2, #0]
  return result;
 8004452:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004456:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	fab2 f282 	clz	r2, r2
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	f042 0220 	orr.w	r2, r2, #32
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	f002 021f 	and.w	r2, r2, #31
 800446c:	2101      	movs	r1, #1
 800446e:	fa01 f202 	lsl.w	r2, r1, r2
 8004472:	4013      	ands	r3, r2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d082      	beq.n	800437e <HAL_RCC_OscConfig+0xdce>
 8004478:	e0cf      	b.n	800461a <HAL_RCC_OscConfig+0x106a>
 800447a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800447e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004482:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004486:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800448c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	fa93 f2a3 	rbit	r2, r3
 8004496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800449e:	601a      	str	r2, [r3, #0]
  return result;
 80044a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80044a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044aa:	fab3 f383 	clz	r3, r3
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	461a      	mov	r2, r3
 80044bc:	2300      	movs	r3, #0
 80044be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c0:	f7fd ff12 	bl	80022e8 <HAL_GetTick>
 80044c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c8:	e009      	b.n	80044de <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ca:	f7fd ff0d 	bl	80022e8 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e09e      	b.n	800461c <HAL_RCC_OscConfig+0x106c>
 80044de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80044e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044f0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	fa93 f2a3 	rbit	r2, r3
 80044fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044fe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004502:	601a      	str	r2, [r3, #0]
  return result;
 8004504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004508:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800450c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800450e:	fab3 f383 	clz	r3, r3
 8004512:	b2db      	uxtb	r3, r3
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b01      	cmp	r3, #1
 8004520:	d104      	bne.n	800452c <HAL_RCC_OscConfig+0xf7c>
 8004522:	4b01      	ldr	r3, [pc, #4]	; (8004528 <HAL_RCC_OscConfig+0xf78>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	e029      	b.n	800457c <HAL_RCC_OscConfig+0xfcc>
 8004528:	40021000 	.word	0x40021000
 800452c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004530:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004534:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004538:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800453e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	fa93 f2a3 	rbit	r2, r3
 8004548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800454c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004556:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800455a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004564:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	fa93 f2a3 	rbit	r2, r3
 800456e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004572:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	4b2b      	ldr	r3, [pc, #172]	; (8004628 <HAL_RCC_OscConfig+0x1078>)
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004580:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004584:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004588:	6011      	str	r1, [r2, #0]
 800458a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800458e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	fa92 f1a2 	rbit	r1, r2
 8004598:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800459c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80045a0:	6011      	str	r1, [r2, #0]
  return result;
 80045a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045a6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80045aa:	6812      	ldr	r2, [r2, #0]
 80045ac:	fab2 f282 	clz	r2, r2
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	f042 0220 	orr.w	r2, r2, #32
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	f002 021f 	and.w	r2, r2, #31
 80045bc:	2101      	movs	r1, #1
 80045be:	fa01 f202 	lsl.w	r2, r1, r2
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d180      	bne.n	80044ca <HAL_RCC_OscConfig+0xf1a>
 80045c8:	e027      	b.n	800461a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e01e      	b.n	800461c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045de:	4b12      	ldr	r3, [pc, #72]	; (8004628 <HAL_RCC_OscConfig+0x1078>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80045e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80045ea:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d10b      	bne.n	8004616 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80045fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004602:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800460a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004612:	429a      	cmp	r2, r3
 8004614:	d001      	beq.n	800461a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40021000 	.word	0x40021000

0800462c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b09e      	sub	sp, #120	; 0x78
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e162      	b.n	800490a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004644:	4b90      	ldr	r3, [pc, #576]	; (8004888 <HAL_RCC_ClockConfig+0x25c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d910      	bls.n	8004674 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004652:	4b8d      	ldr	r3, [pc, #564]	; (8004888 <HAL_RCC_ClockConfig+0x25c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 0207 	bic.w	r2, r3, #7
 800465a:	498b      	ldr	r1, [pc, #556]	; (8004888 <HAL_RCC_ClockConfig+0x25c>)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	4313      	orrs	r3, r2
 8004660:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004662:	4b89      	ldr	r3, [pc, #548]	; (8004888 <HAL_RCC_ClockConfig+0x25c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d001      	beq.n	8004674 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e14a      	b.n	800490a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004680:	4b82      	ldr	r3, [pc, #520]	; (800488c <HAL_RCC_ClockConfig+0x260>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	497f      	ldr	r1, [pc, #508]	; (800488c <HAL_RCC_ClockConfig+0x260>)
 800468e:	4313      	orrs	r3, r2
 8004690:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 80dc 	beq.w	8004858 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d13c      	bne.n	8004722 <HAL_RCC_ClockConfig+0xf6>
 80046a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046b0:	fa93 f3a3 	rbit	r3, r3
 80046b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80046b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b8:	fab3 f383 	clz	r3, r3
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d102      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xa6>
 80046cc:	4b6f      	ldr	r3, [pc, #444]	; (800488c <HAL_RCC_ClockConfig+0x260>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	e00f      	b.n	80046f2 <HAL_RCC_ClockConfig+0xc6>
 80046d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046da:	fa93 f3a3 	rbit	r3, r3
 80046de:	667b      	str	r3, [r7, #100]	; 0x64
 80046e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046e4:	663b      	str	r3, [r7, #96]	; 0x60
 80046e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046e8:	fa93 f3a3 	rbit	r3, r3
 80046ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046ee:	4b67      	ldr	r3, [pc, #412]	; (800488c <HAL_RCC_ClockConfig+0x260>)
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80046f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046fa:	fa92 f2a2 	rbit	r2, r2
 80046fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004700:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004702:	fab2 f282 	clz	r2, r2
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	f042 0220 	orr.w	r2, r2, #32
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	f002 021f 	and.w	r2, r2, #31
 8004712:	2101      	movs	r1, #1
 8004714:	fa01 f202 	lsl.w	r2, r1, r2
 8004718:	4013      	ands	r3, r2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d17b      	bne.n	8004816 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e0f3      	b.n	800490a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d13c      	bne.n	80047a4 <HAL_RCC_ClockConfig+0x178>
 800472a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800472e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004732:	fa93 f3a3 	rbit	r3, r3
 8004736:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800473a:	fab3 f383 	clz	r3, r3
 800473e:	b2db      	uxtb	r3, r3
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	b2db      	uxtb	r3, r3
 8004744:	f043 0301 	orr.w	r3, r3, #1
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b01      	cmp	r3, #1
 800474c:	d102      	bne.n	8004754 <HAL_RCC_ClockConfig+0x128>
 800474e:	4b4f      	ldr	r3, [pc, #316]	; (800488c <HAL_RCC_ClockConfig+0x260>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	e00f      	b.n	8004774 <HAL_RCC_ClockConfig+0x148>
 8004754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004758:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800475c:	fa93 f3a3 	rbit	r3, r3
 8004760:	647b      	str	r3, [r7, #68]	; 0x44
 8004762:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004766:	643b      	str	r3, [r7, #64]	; 0x40
 8004768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800476a:	fa93 f3a3 	rbit	r3, r3
 800476e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004770:	4b46      	ldr	r3, [pc, #280]	; (800488c <HAL_RCC_ClockConfig+0x260>)
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004778:	63ba      	str	r2, [r7, #56]	; 0x38
 800477a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800477c:	fa92 f2a2 	rbit	r2, r2
 8004780:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004784:	fab2 f282 	clz	r2, r2
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	f042 0220 	orr.w	r2, r2, #32
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	f002 021f 	and.w	r2, r2, #31
 8004794:	2101      	movs	r1, #1
 8004796:	fa01 f202 	lsl.w	r2, r1, r2
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d13a      	bne.n	8004816 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e0b2      	b.n	800490a <HAL_RCC_ClockConfig+0x2de>
 80047a4:	2302      	movs	r3, #2
 80047a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	fa93 f3a3 	rbit	r3, r3
 80047ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80047b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b2:	fab3 f383 	clz	r3, r3
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d102      	bne.n	80047cc <HAL_RCC_ClockConfig+0x1a0>
 80047c6:	4b31      	ldr	r3, [pc, #196]	; (800488c <HAL_RCC_ClockConfig+0x260>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	e00d      	b.n	80047e8 <HAL_RCC_ClockConfig+0x1bc>
 80047cc:	2302      	movs	r3, #2
 80047ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	fa93 f3a3 	rbit	r3, r3
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
 80047d8:	2302      	movs	r3, #2
 80047da:	623b      	str	r3, [r7, #32]
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	fa93 f3a3 	rbit	r3, r3
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	4b29      	ldr	r3, [pc, #164]	; (800488c <HAL_RCC_ClockConfig+0x260>)
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	2202      	movs	r2, #2
 80047ea:	61ba      	str	r2, [r7, #24]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	fa92 f2a2 	rbit	r2, r2
 80047f2:	617a      	str	r2, [r7, #20]
  return result;
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	fab2 f282 	clz	r2, r2
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	f042 0220 	orr.w	r2, r2, #32
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	f002 021f 	and.w	r2, r2, #31
 8004806:	2101      	movs	r1, #1
 8004808:	fa01 f202 	lsl.w	r2, r1, r2
 800480c:	4013      	ands	r3, r2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e079      	b.n	800490a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004816:	4b1d      	ldr	r3, [pc, #116]	; (800488c <HAL_RCC_ClockConfig+0x260>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f023 0203 	bic.w	r2, r3, #3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	491a      	ldr	r1, [pc, #104]	; (800488c <HAL_RCC_ClockConfig+0x260>)
 8004824:	4313      	orrs	r3, r2
 8004826:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004828:	f7fd fd5e 	bl	80022e8 <HAL_GetTick>
 800482c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482e:	e00a      	b.n	8004846 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004830:	f7fd fd5a 	bl	80022e8 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	f241 3288 	movw	r2, #5000	; 0x1388
 800483e:	4293      	cmp	r3, r2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e061      	b.n	800490a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004846:	4b11      	ldr	r3, [pc, #68]	; (800488c <HAL_RCC_ClockConfig+0x260>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f003 020c 	and.w	r2, r3, #12
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	429a      	cmp	r2, r3
 8004856:	d1eb      	bne.n	8004830 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_RCC_ClockConfig+0x25c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d214      	bcs.n	8004890 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004866:	4b08      	ldr	r3, [pc, #32]	; (8004888 <HAL_RCC_ClockConfig+0x25c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f023 0207 	bic.w	r2, r3, #7
 800486e:	4906      	ldr	r1, [pc, #24]	; (8004888 <HAL_RCC_ClockConfig+0x25c>)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	4313      	orrs	r3, r2
 8004874:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004876:	4b04      	ldr	r3, [pc, #16]	; (8004888 <HAL_RCC_ClockConfig+0x25c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d005      	beq.n	8004890 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e040      	b.n	800490a <HAL_RCC_ClockConfig+0x2de>
 8004888:	40022000 	.word	0x40022000
 800488c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800489c:	4b1d      	ldr	r3, [pc, #116]	; (8004914 <HAL_RCC_ClockConfig+0x2e8>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	491a      	ldr	r1, [pc, #104]	; (8004914 <HAL_RCC_ClockConfig+0x2e8>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ba:	4b16      	ldr	r3, [pc, #88]	; (8004914 <HAL_RCC_ClockConfig+0x2e8>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	4912      	ldr	r1, [pc, #72]	; (8004914 <HAL_RCC_ClockConfig+0x2e8>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80048ce:	f000 f829 	bl	8004924 <HAL_RCC_GetSysClockFreq>
 80048d2:	4601      	mov	r1, r0
 80048d4:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <HAL_RCC_ClockConfig+0x2e8>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048dc:	22f0      	movs	r2, #240	; 0xf0
 80048de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	fa92 f2a2 	rbit	r2, r2
 80048e6:	60fa      	str	r2, [r7, #12]
  return result;
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	fab2 f282 	clz	r2, r2
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	40d3      	lsrs	r3, r2
 80048f2:	4a09      	ldr	r2, [pc, #36]	; (8004918 <HAL_RCC_ClockConfig+0x2ec>)
 80048f4:	5cd3      	ldrb	r3, [r2, r3]
 80048f6:	fa21 f303 	lsr.w	r3, r1, r3
 80048fa:	4a08      	ldr	r2, [pc, #32]	; (800491c <HAL_RCC_ClockConfig+0x2f0>)
 80048fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80048fe:	4b08      	ldr	r3, [pc, #32]	; (8004920 <HAL_RCC_ClockConfig+0x2f4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f7fd fcac 	bl	8002260 <HAL_InitTick>
  
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3778      	adds	r7, #120	; 0x78
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40021000 	.word	0x40021000
 8004918:	08009258 	.word	0x08009258
 800491c:	20000020 	.word	0x20000020
 8004920:	20000024 	.word	0x20000024

08004924 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004924:	b480      	push	{r7}
 8004926:	b08b      	sub	sp, #44	; 0x2c
 8004928:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	61fb      	str	r3, [r7, #28]
 800492e:	2300      	movs	r3, #0
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	2300      	movs	r3, #0
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800493e:	4b29      	ldr	r3, [pc, #164]	; (80049e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	2b04      	cmp	r3, #4
 800494c:	d002      	beq.n	8004954 <HAL_RCC_GetSysClockFreq+0x30>
 800494e:	2b08      	cmp	r3, #8
 8004950:	d003      	beq.n	800495a <HAL_RCC_GetSysClockFreq+0x36>
 8004952:	e03c      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004954:	4b24      	ldr	r3, [pc, #144]	; (80049e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004956:	623b      	str	r3, [r7, #32]
      break;
 8004958:	e03c      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004960:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004964:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	fa92 f2a2 	rbit	r2, r2
 800496c:	607a      	str	r2, [r7, #4]
  return result;
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	fab2 f282 	clz	r2, r2
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	40d3      	lsrs	r3, r2
 8004978:	4a1c      	ldr	r2, [pc, #112]	; (80049ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800497a:	5cd3      	ldrb	r3, [r2, r3]
 800497c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800497e:	4b19      	ldr	r3, [pc, #100]	; (80049e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	220f      	movs	r2, #15
 8004988:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	fa92 f2a2 	rbit	r2, r2
 8004990:	60fa      	str	r2, [r7, #12]
  return result;
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	fab2 f282 	clz	r2, r2
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	40d3      	lsrs	r3, r2
 800499c:	4a14      	ldr	r2, [pc, #80]	; (80049f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800499e:	5cd3      	ldrb	r3, [r2, r3]
 80049a0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80049ac:	4a0e      	ldr	r2, [pc, #56]	; (80049e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	fb02 f303 	mul.w	r3, r2, r3
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
 80049bc:	e004      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	4a0c      	ldr	r2, [pc, #48]	; (80049f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	623b      	str	r3, [r7, #32]
      break;
 80049cc:	e002      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049ce:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80049d0:	623b      	str	r3, [r7, #32]
      break;
 80049d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049d4:	6a3b      	ldr	r3, [r7, #32]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	372c      	adds	r7, #44	; 0x2c
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40021000 	.word	0x40021000
 80049e8:	007a1200 	.word	0x007a1200
 80049ec:	08009270 	.word	0x08009270
 80049f0:	08009280 	.word	0x08009280
 80049f4:	003d0900 	.word	0x003d0900

080049f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049fc:	4b03      	ldr	r3, [pc, #12]	; (8004a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80049fe:	681b      	ldr	r3, [r3, #0]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20000020 	.word	0x20000020

08004a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004a16:	f7ff ffef 	bl	80049f8 <HAL_RCC_GetHCLKFreq>
 8004a1a:	4601      	mov	r1, r0
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a24:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004a28:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	fa92 f2a2 	rbit	r2, r2
 8004a30:	603a      	str	r2, [r7, #0]
  return result;
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	fab2 f282 	clz	r2, r2
 8004a38:	b2d2      	uxtb	r2, r2
 8004a3a:	40d3      	lsrs	r3, r2
 8004a3c:	4a04      	ldr	r2, [pc, #16]	; (8004a50 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004a3e:	5cd3      	ldrb	r3, [r2, r3]
 8004a40:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004a44:	4618      	mov	r0, r3
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	08009268 	.word	0x08009268

08004a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004a5a:	f7ff ffcd 	bl	80049f8 <HAL_RCC_GetHCLKFreq>
 8004a5e:	4601      	mov	r1, r0
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004a68:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004a6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	fa92 f2a2 	rbit	r2, r2
 8004a74:	603a      	str	r2, [r7, #0]
  return result;
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	fab2 f282 	clz	r2, r2
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	40d3      	lsrs	r3, r2
 8004a80:	4a04      	ldr	r2, [pc, #16]	; (8004a94 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004a82:	5cd3      	ldrb	r3, [r2, r3]
 8004a84:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40021000 	.word	0x40021000
 8004a94:	08009268 	.word	0x08009268

08004a98 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b092      	sub	sp, #72	; 0x48
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 80d4 	beq.w	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004abc:	4b4e      	ldr	r3, [pc, #312]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10e      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ac8:	4b4b      	ldr	r3, [pc, #300]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	4a4a      	ldr	r2, [pc, #296]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad2:	61d3      	str	r3, [r2, #28]
 8004ad4:	4b48      	ldr	r3, [pc, #288]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae6:	4b45      	ldr	r3, [pc, #276]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d118      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004af2:	4b42      	ldr	r3, [pc, #264]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a41      	ldr	r2, [pc, #260]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004afc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004afe:	f7fd fbf3 	bl	80022e8 <HAL_GetTick>
 8004b02:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b04:	e008      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b06:	f7fd fbef 	bl	80022e8 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b64      	cmp	r3, #100	; 0x64
 8004b12:	d901      	bls.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e14b      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b18:	4b38      	ldr	r3, [pc, #224]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0f0      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b24:	4b34      	ldr	r3, [pc, #208]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 8084 	beq.w	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d07c      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b44:	4b2c      	ldr	r3, [pc, #176]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b56:	fa93 f3a3 	rbit	r3, r3
 8004b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b5e:	fab3 f383 	clz	r3, r3
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	461a      	mov	r2, r3
 8004b66:	4b26      	ldr	r3, [pc, #152]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	2301      	movs	r3, #1
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7a:	fa93 f3a3 	rbit	r3, r3
 8004b7e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b82:	fab3 f383 	clz	r3, r3
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b8c:	4413      	add	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	461a      	mov	r2, r3
 8004b92:	2300      	movs	r3, #0
 8004b94:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b96:	4a18      	ldr	r2, [pc, #96]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d04b      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba6:	f7fd fb9f 	bl	80022e8 <HAL_GetTick>
 8004baa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bac:	e00a      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bae:	f7fd fb9b 	bl	80022e8 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e0f5      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bca:	fa93 f3a3 	rbit	r3, r3
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	623b      	str	r3, [r7, #32]
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	fa93 f3a3 	rbit	r3, r3
 8004bda:	61fb      	str	r3, [r7, #28]
  return result;
 8004bdc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bde:	fab3 f383 	clz	r3, r3
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	f043 0302 	orr.w	r3, r3, #2
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d108      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004bf2:	4b01      	ldr	r3, [pc, #4]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	e00d      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	40007000 	.word	0x40007000
 8004c00:	10908100 	.word	0x10908100
 8004c04:	2302      	movs	r3, #2
 8004c06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	fa93 f3a3 	rbit	r3, r3
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	4b69      	ldr	r3, [pc, #420]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	2202      	movs	r2, #2
 8004c16:	613a      	str	r2, [r7, #16]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	fa92 f2a2 	rbit	r2, r2
 8004c1e:	60fa      	str	r2, [r7, #12]
  return result;
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	fab2 f282 	clz	r2, r2
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	f002 021f 	and.w	r2, r2, #31
 8004c32:	2101      	movs	r1, #1
 8004c34:	fa01 f202 	lsl.w	r2, r1, r2
 8004c38:	4013      	ands	r3, r2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0b7      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004c3e:	4b5e      	ldr	r3, [pc, #376]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	495b      	ldr	r1, [pc, #364]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d105      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c58:	4b57      	ldr	r3, [pc, #348]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	4a56      	ldr	r2, [pc, #344]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c70:	4b51      	ldr	r3, [pc, #324]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	f023 0203 	bic.w	r2, r3, #3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	494e      	ldr	r1, [pc, #312]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0320 	and.w	r3, r3, #32
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d008      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c8e:	4b4a      	ldr	r3, [pc, #296]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c92:	f023 0210 	bic.w	r2, r3, #16
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4947      	ldr	r1, [pc, #284]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d008      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004cac:	4b42      	ldr	r3, [pc, #264]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	493f      	ldr	r1, [pc, #252]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d008      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cca:	4b3b      	ldr	r3, [pc, #236]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cce:	f023 0220 	bic.w	r2, r3, #32
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	4938      	ldr	r1, [pc, #224]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d008      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ce8:	4b33      	ldr	r3, [pc, #204]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	4930      	ldr	r1, [pc, #192]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d008      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d06:	4b2c      	ldr	r3, [pc, #176]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	4929      	ldr	r1, [pc, #164]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d008      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004d24:	4b24      	ldr	r3, [pc, #144]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d28:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	4921      	ldr	r1, [pc, #132]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d008      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004d42:	4b1d      	ldr	r3, [pc, #116]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	491a      	ldr	r1, [pc, #104]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004d60:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d64:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	4912      	ldr	r1, [pc, #72]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d008      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004d7e:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8a:	490b      	ldr	r1, [pc, #44]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d008      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	4903      	ldr	r1, [pc, #12]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3748      	adds	r7, #72	; 0x48
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40021000 	.word	0x40021000

08004dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e049      	b.n	8004e62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7fc ff46 	bl	8001c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3304      	adds	r3, #4
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	f000 fea0 	bl	8005b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d001      	beq.n	8004e84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e033      	b.n	8004eec <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a19      	ldr	r2, [pc, #100]	; (8004ef8 <HAL_TIM_Base_Start+0x8c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d009      	beq.n	8004eaa <HAL_TIM_Base_Start+0x3e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e9e:	d004      	beq.n	8004eaa <HAL_TIM_Base_Start+0x3e>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a15      	ldr	r2, [pc, #84]	; (8004efc <HAL_TIM_Base_Start+0x90>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d115      	bne.n	8004ed6 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	4b13      	ldr	r3, [pc, #76]	; (8004f00 <HAL_TIM_Base_Start+0x94>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b06      	cmp	r3, #6
 8004eba:	d015      	beq.n	8004ee8 <HAL_TIM_Base_Start+0x7c>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec2:	d011      	beq.n	8004ee8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0201 	orr.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed4:	e008      	b.n	8004ee8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f042 0201 	orr.w	r2, r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	e000      	b.n	8004eea <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	40012c00 	.word	0x40012c00
 8004efc:	40014000 	.word	0x40014000
 8004f00:	00010007 	.word	0x00010007

08004f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d001      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e03b      	b.n	8004f94 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0201 	orr.w	r2, r2, #1
 8004f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a19      	ldr	r2, [pc, #100]	; (8004fa0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d009      	beq.n	8004f52 <HAL_TIM_Base_Start_IT+0x4e>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f46:	d004      	beq.n	8004f52 <HAL_TIM_Base_Start_IT+0x4e>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a15      	ldr	r2, [pc, #84]	; (8004fa4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d115      	bne.n	8004f7e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	4b13      	ldr	r3, [pc, #76]	; (8004fa8 <HAL_TIM_Base_Start_IT+0xa4>)
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b06      	cmp	r3, #6
 8004f62:	d015      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x8c>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6a:	d011      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7c:	e008      	b.n	8004f90 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0201 	orr.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	e000      	b.n	8004f92 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40014000 	.word	0x40014000
 8004fa8:	00010007 	.word	0x00010007

08004fac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e049      	b.n	8005052 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fc fee0 	bl	8001d98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f000 fda8 	bl	8005b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d109      	bne.n	8005080 <HAL_TIM_PWM_Start+0x24>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b01      	cmp	r3, #1
 8005076:	bf14      	ite	ne
 8005078:	2301      	movne	r3, #1
 800507a:	2300      	moveq	r3, #0
 800507c:	b2db      	uxtb	r3, r3
 800507e:	e03c      	b.n	80050fa <HAL_TIM_PWM_Start+0x9e>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b04      	cmp	r3, #4
 8005084:	d109      	bne.n	800509a <HAL_TIM_PWM_Start+0x3e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b01      	cmp	r3, #1
 8005090:	bf14      	ite	ne
 8005092:	2301      	movne	r3, #1
 8005094:	2300      	moveq	r3, #0
 8005096:	b2db      	uxtb	r3, r3
 8005098:	e02f      	b.n	80050fa <HAL_TIM_PWM_Start+0x9e>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b08      	cmp	r3, #8
 800509e:	d109      	bne.n	80050b4 <HAL_TIM_PWM_Start+0x58>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	bf14      	ite	ne
 80050ac:	2301      	movne	r3, #1
 80050ae:	2300      	moveq	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	e022      	b.n	80050fa <HAL_TIM_PWM_Start+0x9e>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b0c      	cmp	r3, #12
 80050b8:	d109      	bne.n	80050ce <HAL_TIM_PWM_Start+0x72>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	bf14      	ite	ne
 80050c6:	2301      	movne	r3, #1
 80050c8:	2300      	moveq	r3, #0
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	e015      	b.n	80050fa <HAL_TIM_PWM_Start+0x9e>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b10      	cmp	r3, #16
 80050d2:	d109      	bne.n	80050e8 <HAL_TIM_PWM_Start+0x8c>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b01      	cmp	r3, #1
 80050de:	bf14      	ite	ne
 80050e0:	2301      	movne	r3, #1
 80050e2:	2300      	moveq	r3, #0
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	e008      	b.n	80050fa <HAL_TIM_PWM_Start+0x9e>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	bf14      	ite	ne
 80050f4:	2301      	movne	r3, #1
 80050f6:	2300      	moveq	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e083      	b.n	800520a <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d104      	bne.n	8005112 <HAL_TIM_PWM_Start+0xb6>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005110:	e023      	b.n	800515a <HAL_TIM_PWM_Start+0xfe>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b04      	cmp	r3, #4
 8005116:	d104      	bne.n	8005122 <HAL_TIM_PWM_Start+0xc6>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005120:	e01b      	b.n	800515a <HAL_TIM_PWM_Start+0xfe>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b08      	cmp	r3, #8
 8005126:	d104      	bne.n	8005132 <HAL_TIM_PWM_Start+0xd6>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005130:	e013      	b.n	800515a <HAL_TIM_PWM_Start+0xfe>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b0c      	cmp	r3, #12
 8005136:	d104      	bne.n	8005142 <HAL_TIM_PWM_Start+0xe6>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005140:	e00b      	b.n	800515a <HAL_TIM_PWM_Start+0xfe>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b10      	cmp	r3, #16
 8005146:	d104      	bne.n	8005152 <HAL_TIM_PWM_Start+0xf6>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005150:	e003      	b.n	800515a <HAL_TIM_PWM_Start+0xfe>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2202      	movs	r2, #2
 8005156:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2201      	movs	r2, #1
 8005160:	6839      	ldr	r1, [r7, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f001 f90c 	bl	8006380 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a29      	ldr	r2, [pc, #164]	; (8005214 <HAL_TIM_PWM_Start+0x1b8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00e      	beq.n	8005190 <HAL_TIM_PWM_Start+0x134>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a28      	ldr	r2, [pc, #160]	; (8005218 <HAL_TIM_PWM_Start+0x1bc>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d009      	beq.n	8005190 <HAL_TIM_PWM_Start+0x134>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a26      	ldr	r2, [pc, #152]	; (800521c <HAL_TIM_PWM_Start+0x1c0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d004      	beq.n	8005190 <HAL_TIM_PWM_Start+0x134>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a25      	ldr	r2, [pc, #148]	; (8005220 <HAL_TIM_PWM_Start+0x1c4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d101      	bne.n	8005194 <HAL_TIM_PWM_Start+0x138>
 8005190:	2301      	movs	r3, #1
 8005192:	e000      	b.n	8005196 <HAL_TIM_PWM_Start+0x13a>
 8005194:	2300      	movs	r3, #0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a19      	ldr	r2, [pc, #100]	; (8005214 <HAL_TIM_PWM_Start+0x1b8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d009      	beq.n	80051c8 <HAL_TIM_PWM_Start+0x16c>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051bc:	d004      	beq.n	80051c8 <HAL_TIM_PWM_Start+0x16c>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a15      	ldr	r2, [pc, #84]	; (8005218 <HAL_TIM_PWM_Start+0x1bc>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d115      	bne.n	80051f4 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	4b15      	ldr	r3, [pc, #84]	; (8005224 <HAL_TIM_PWM_Start+0x1c8>)
 80051d0:	4013      	ands	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2b06      	cmp	r3, #6
 80051d8:	d015      	beq.n	8005206 <HAL_TIM_PWM_Start+0x1aa>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e0:	d011      	beq.n	8005206 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f042 0201 	orr.w	r2, r2, #1
 80051f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f2:	e008      	b.n	8005206 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	e000      	b.n	8005208 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005206:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40012c00 	.word	0x40012c00
 8005218:	40014000 	.word	0x40014000
 800521c:	40014400 	.word	0x40014400
 8005220:	40014800 	.word	0x40014800
 8005224:	00010007 	.word	0x00010007

08005228 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e049      	b.n	80052ce <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d106      	bne.n	8005254 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7fc fc4e 	bl	8001af0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3304      	adds	r3, #4
 8005264:	4619      	mov	r1, r3
 8005266:	4610      	mov	r0, r2
 8005268:	f000 fc6a 	bl	8005b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b086      	sub	sp, #24
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e097      	b.n	800541a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f88f 	bl	8005422 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6812      	ldr	r2, [r2, #0]
 8005316:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800531a:	f023 0307 	bic.w	r3, r3, #7
 800531e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	4619      	mov	r1, r3
 800532a:	4610      	mov	r0, r2
 800532c:	f000 fc08 	bl	8005b40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005358:	f023 0303 	bic.w	r3, r3, #3
 800535c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	021b      	lsls	r3, r3, #8
 8005368:	4313      	orrs	r3, r2
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005376:	f023 030c 	bic.w	r3, r3, #12
 800537a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	021b      	lsls	r3, r3, #8
 8005392:	4313      	orrs	r3, r2
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	011a      	lsls	r2, r3, #4
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	031b      	lsls	r3, r3, #12
 80053a6:	4313      	orrs	r3, r2
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80053b4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80053bc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	4313      	orrs	r3, r2
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b084      	sub	sp, #16
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005446:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800544e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005456:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800545e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d110      	bne.n	8005488 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d102      	bne.n	8005472 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800546c:	7b7b      	ldrb	r3, [r7, #13]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d001      	beq.n	8005476 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e069      	b.n	800554a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2202      	movs	r2, #2
 800547a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2202      	movs	r2, #2
 8005482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005486:	e031      	b.n	80054ec <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	2b04      	cmp	r3, #4
 800548c:	d110      	bne.n	80054b0 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800548e:	7bbb      	ldrb	r3, [r7, #14]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d102      	bne.n	800549a <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005494:	7b3b      	ldrb	r3, [r7, #12]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d001      	beq.n	800549e <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e055      	b.n	800554a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2202      	movs	r2, #2
 80054a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2202      	movs	r2, #2
 80054aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054ae:	e01d      	b.n	80054ec <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d108      	bne.n	80054c8 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054b6:	7bbb      	ldrb	r3, [r7, #14]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d105      	bne.n	80054c8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054bc:	7b7b      	ldrb	r3, [r7, #13]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d102      	bne.n	80054c8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054c2:	7b3b      	ldrb	r3, [r7, #12]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d001      	beq.n	80054cc <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e03e      	b.n	800554a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_TIM_Encoder_Start+0xc4>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d008      	beq.n	800550a <HAL_TIM_Encoder_Start+0xd4>
 80054f8:	e00f      	b.n	800551a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2201      	movs	r2, #1
 8005500:	2100      	movs	r1, #0
 8005502:	4618      	mov	r0, r3
 8005504:	f000 ff3c 	bl	8006380 <TIM_CCxChannelCmd>
      break;
 8005508:	e016      	b.n	8005538 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2201      	movs	r2, #1
 8005510:	2104      	movs	r1, #4
 8005512:	4618      	mov	r0, r3
 8005514:	f000 ff34 	bl	8006380 <TIM_CCxChannelCmd>
      break;
 8005518:	e00e      	b.n	8005538 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2201      	movs	r2, #1
 8005520:	2100      	movs	r1, #0
 8005522:	4618      	mov	r0, r3
 8005524:	f000 ff2c 	bl	8006380 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2201      	movs	r2, #1
 800552e:	2104      	movs	r1, #4
 8005530:	4618      	mov	r0, r3
 8005532:	f000 ff25 	bl	8006380 <TIM_CCxChannelCmd>
      break;
 8005536:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b082      	sub	sp, #8
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b02      	cmp	r3, #2
 8005566:	d122      	bne.n	80055ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b02      	cmp	r3, #2
 8005574:	d11b      	bne.n	80055ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f06f 0202 	mvn.w	r2, #2
 800557e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fab5 	bl	8005b04 <HAL_TIM_IC_CaptureCallback>
 800559a:	e005      	b.n	80055a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 faa7 	bl	8005af0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fab8 	bl	8005b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d122      	bne.n	8005602 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d11b      	bne.n	8005602 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f06f 0204 	mvn.w	r2, #4
 80055d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fa8b 	bl	8005b04 <HAL_TIM_IC_CaptureCallback>
 80055ee:	e005      	b.n	80055fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fa7d 	bl	8005af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fa8e 	bl	8005b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b08      	cmp	r3, #8
 800560e:	d122      	bne.n	8005656 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f003 0308 	and.w	r3, r3, #8
 800561a:	2b08      	cmp	r3, #8
 800561c:	d11b      	bne.n	8005656 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f06f 0208 	mvn.w	r2, #8
 8005626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2204      	movs	r2, #4
 800562c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fa61 	bl	8005b04 <HAL_TIM_IC_CaptureCallback>
 8005642:	e005      	b.n	8005650 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fa53 	bl	8005af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fa64 	bl	8005b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f003 0310 	and.w	r3, r3, #16
 8005660:	2b10      	cmp	r3, #16
 8005662:	d122      	bne.n	80056aa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	2b10      	cmp	r3, #16
 8005670:	d11b      	bne.n	80056aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f06f 0210 	mvn.w	r2, #16
 800567a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2208      	movs	r2, #8
 8005680:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fa37 	bl	8005b04 <HAL_TIM_IC_CaptureCallback>
 8005696:	e005      	b.n	80056a4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fa29 	bl	8005af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fa3a 	bl	8005b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d10e      	bne.n	80056d6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d107      	bne.n	80056d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f06f 0201 	mvn.w	r2, #1
 80056ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7fc f855 	bl	8001780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e0:	2b80      	cmp	r3, #128	; 0x80
 80056e2:	d10e      	bne.n	8005702 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ee:	2b80      	cmp	r3, #128	; 0x80
 80056f0:	d107      	bne.n	8005702 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 ffeb 	bl	80066d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005710:	d10e      	bne.n	8005730 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571c:	2b80      	cmp	r3, #128	; 0x80
 800571e:	d107      	bne.n	8005730 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 ffde 	bl	80066ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573a:	2b40      	cmp	r3, #64	; 0x40
 800573c:	d10e      	bne.n	800575c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005748:	2b40      	cmp	r3, #64	; 0x40
 800574a:	d107      	bne.n	800575c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f9e8 	bl	8005b2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b20      	cmp	r3, #32
 8005768:	d10e      	bne.n	8005788 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f003 0320 	and.w	r3, r3, #32
 8005774:	2b20      	cmp	r3, #32
 8005776:	d107      	bne.n	8005788 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0220 	mvn.w	r2, #32
 8005780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 ff9e 	bl	80066c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005788:	bf00      	nop
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d101      	bne.n	80057ae <HAL_TIM_IC_ConfigChannel+0x1e>
 80057aa:	2302      	movs	r3, #2
 80057ac:	e088      	b.n	80058c0 <HAL_TIM_IC_ConfigChannel+0x130>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d11b      	bne.n	80057f4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6818      	ldr	r0, [r3, #0]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	6819      	ldr	r1, [r3, #0]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f000 fccc 	bl	8006168 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699a      	ldr	r2, [r3, #24]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 020c 	bic.w	r2, r2, #12
 80057de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6999      	ldr	r1, [r3, #24]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	619a      	str	r2, [r3, #24]
 80057f2:	e060      	b.n	80058b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b04      	cmp	r3, #4
 80057f8:	d11c      	bne.n	8005834 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6819      	ldr	r1, [r3, #0]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f000 fd03 	bl	8006214 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800581c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6999      	ldr	r1, [r3, #24]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	021a      	lsls	r2, r3, #8
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	619a      	str	r2, [r3, #24]
 8005832:	e040      	b.n	80058b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b08      	cmp	r3, #8
 8005838:	d11b      	bne.n	8005872 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6818      	ldr	r0, [r3, #0]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	6819      	ldr	r1, [r3, #0]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f000 fd20 	bl	800628e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69da      	ldr	r2, [r3, #28]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 020c 	bic.w	r2, r2, #12
 800585c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69d9      	ldr	r1, [r3, #28]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	61da      	str	r2, [r3, #28]
 8005870:	e021      	b.n	80058b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b0c      	cmp	r3, #12
 8005876:	d11c      	bne.n	80058b2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6818      	ldr	r0, [r3, #0]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	6819      	ldr	r1, [r3, #0]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f000 fd3d 	bl	8006306 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	69da      	ldr	r2, [r3, #28]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800589a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	69d9      	ldr	r1, [r3, #28]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	021a      	lsls	r2, r3, #8
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	61da      	str	r2, [r3, #28]
 80058b0:	e001      	b.n	80058b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058be:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d101      	bne.n	80058e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058e2:	2302      	movs	r3, #2
 80058e4:	e0ff      	b.n	8005ae6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b14      	cmp	r3, #20
 80058f2:	f200 80f0 	bhi.w	8005ad6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058f6:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fc:	08005951 	.word	0x08005951
 8005900:	08005ad7 	.word	0x08005ad7
 8005904:	08005ad7 	.word	0x08005ad7
 8005908:	08005ad7 	.word	0x08005ad7
 800590c:	08005991 	.word	0x08005991
 8005910:	08005ad7 	.word	0x08005ad7
 8005914:	08005ad7 	.word	0x08005ad7
 8005918:	08005ad7 	.word	0x08005ad7
 800591c:	080059d3 	.word	0x080059d3
 8005920:	08005ad7 	.word	0x08005ad7
 8005924:	08005ad7 	.word	0x08005ad7
 8005928:	08005ad7 	.word	0x08005ad7
 800592c:	08005a13 	.word	0x08005a13
 8005930:	08005ad7 	.word	0x08005ad7
 8005934:	08005ad7 	.word	0x08005ad7
 8005938:	08005ad7 	.word	0x08005ad7
 800593c:	08005a55 	.word	0x08005a55
 8005940:	08005ad7 	.word	0x08005ad7
 8005944:	08005ad7 	.word	0x08005ad7
 8005948:	08005ad7 	.word	0x08005ad7
 800594c:	08005a95 	.word	0x08005a95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	4618      	mov	r0, r3
 8005958:	f000 f960 	bl	8005c1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699a      	ldr	r2, [r3, #24]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0208 	orr.w	r2, r2, #8
 800596a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0204 	bic.w	r2, r2, #4
 800597a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6999      	ldr	r1, [r3, #24]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	691a      	ldr	r2, [r3, #16]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	619a      	str	r2, [r3, #24]
      break;
 800598e:	e0a5      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68b9      	ldr	r1, [r7, #8]
 8005996:	4618      	mov	r0, r3
 8005998:	f000 f9c6 	bl	8005d28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6999      	ldr	r1, [r3, #24]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	021a      	lsls	r2, r3, #8
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	619a      	str	r2, [r3, #24]
      break;
 80059d0:	e084      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 fa25 	bl	8005e28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0208 	orr.w	r2, r2, #8
 80059ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69da      	ldr	r2, [r3, #28]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0204 	bic.w	r2, r2, #4
 80059fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69d9      	ldr	r1, [r3, #28]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	691a      	ldr	r2, [r3, #16]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	61da      	str	r2, [r3, #28]
      break;
 8005a10:	e064      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fa83 	bl	8005f24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69d9      	ldr	r1, [r3, #28]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	021a      	lsls	r2, r3, #8
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	61da      	str	r2, [r3, #28]
      break;
 8005a52:	e043      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68b9      	ldr	r1, [r7, #8]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fac6 	bl	8005fec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0208 	orr.w	r2, r2, #8
 8005a6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0204 	bic.w	r2, r2, #4
 8005a7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	691a      	ldr	r2, [r3, #16]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a92:	e023      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68b9      	ldr	r1, [r7, #8]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fb04 	bl	80060a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005abe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	021a      	lsls	r2, r3, #8
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ad4:	e002      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8005ada:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop

08005af0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a2e      	ldr	r2, [pc, #184]	; (8005c0c <TIM_Base_SetConfig+0xcc>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d003      	beq.n	8005b60 <TIM_Base_SetConfig+0x20>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b5e:	d108      	bne.n	8005b72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a25      	ldr	r2, [pc, #148]	; (8005c0c <TIM_Base_SetConfig+0xcc>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d00f      	beq.n	8005b9a <TIM_Base_SetConfig+0x5a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b80:	d00b      	beq.n	8005b9a <TIM_Base_SetConfig+0x5a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a22      	ldr	r2, [pc, #136]	; (8005c10 <TIM_Base_SetConfig+0xd0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d007      	beq.n	8005b9a <TIM_Base_SetConfig+0x5a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a21      	ldr	r2, [pc, #132]	; (8005c14 <TIM_Base_SetConfig+0xd4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d003      	beq.n	8005b9a <TIM_Base_SetConfig+0x5a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a20      	ldr	r2, [pc, #128]	; (8005c18 <TIM_Base_SetConfig+0xd8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d108      	bne.n	8005bac <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a0e      	ldr	r2, [pc, #56]	; (8005c0c <TIM_Base_SetConfig+0xcc>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00b      	beq.n	8005bf0 <TIM_Base_SetConfig+0xb0>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a0d      	ldr	r2, [pc, #52]	; (8005c10 <TIM_Base_SetConfig+0xd0>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d007      	beq.n	8005bf0 <TIM_Base_SetConfig+0xb0>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a0c      	ldr	r2, [pc, #48]	; (8005c14 <TIM_Base_SetConfig+0xd4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_Base_SetConfig+0xb0>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a0b      	ldr	r2, [pc, #44]	; (8005c18 <TIM_Base_SetConfig+0xd8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d103      	bne.n	8005bf8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	691a      	ldr	r2, [r3, #16]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	615a      	str	r2, [r3, #20]
}
 8005bfe:	bf00      	nop
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40012c00 	.word	0x40012c00
 8005c10:	40014000 	.word	0x40014000
 8005c14:	40014400 	.word	0x40014400
 8005c18:	40014800 	.word	0x40014800

08005c1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f023 0201 	bic.w	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0303 	bic.w	r3, r3, #3
 8005c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f023 0302 	bic.w	r3, r3, #2
 8005c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a28      	ldr	r2, [pc, #160]	; (8005d18 <TIM_OC1_SetConfig+0xfc>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00b      	beq.n	8005c94 <TIM_OC1_SetConfig+0x78>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a27      	ldr	r2, [pc, #156]	; (8005d1c <TIM_OC1_SetConfig+0x100>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d007      	beq.n	8005c94 <TIM_OC1_SetConfig+0x78>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a26      	ldr	r2, [pc, #152]	; (8005d20 <TIM_OC1_SetConfig+0x104>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d003      	beq.n	8005c94 <TIM_OC1_SetConfig+0x78>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a25      	ldr	r2, [pc, #148]	; (8005d24 <TIM_OC1_SetConfig+0x108>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d10c      	bne.n	8005cae <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f023 0308 	bic.w	r3, r3, #8
 8005c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f023 0304 	bic.w	r3, r3, #4
 8005cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a19      	ldr	r2, [pc, #100]	; (8005d18 <TIM_OC1_SetConfig+0xfc>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00b      	beq.n	8005cce <TIM_OC1_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a18      	ldr	r2, [pc, #96]	; (8005d1c <TIM_OC1_SetConfig+0x100>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d007      	beq.n	8005cce <TIM_OC1_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a17      	ldr	r2, [pc, #92]	; (8005d20 <TIM_OC1_SetConfig+0x104>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d003      	beq.n	8005cce <TIM_OC1_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a16      	ldr	r2, [pc, #88]	; (8005d24 <TIM_OC1_SetConfig+0x108>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d111      	bne.n	8005cf2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	621a      	str	r2, [r3, #32]
}
 8005d0c:	bf00      	nop
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	40012c00 	.word	0x40012c00
 8005d1c:	40014000 	.word	0x40014000
 8005d20:	40014400 	.word	0x40014400
 8005d24:	40014800 	.word	0x40014800

08005d28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	f023 0210 	bic.w	r2, r3, #16
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	021b      	lsls	r3, r3, #8
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f023 0320 	bic.w	r3, r3, #32
 8005d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a24      	ldr	r2, [pc, #144]	; (8005e18 <TIM_OC2_SetConfig+0xf0>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d10d      	bne.n	8005da8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005da6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a1b      	ldr	r2, [pc, #108]	; (8005e18 <TIM_OC2_SetConfig+0xf0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00b      	beq.n	8005dc8 <TIM_OC2_SetConfig+0xa0>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a1a      	ldr	r2, [pc, #104]	; (8005e1c <TIM_OC2_SetConfig+0xf4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d007      	beq.n	8005dc8 <TIM_OC2_SetConfig+0xa0>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a19      	ldr	r2, [pc, #100]	; (8005e20 <TIM_OC2_SetConfig+0xf8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d003      	beq.n	8005dc8 <TIM_OC2_SetConfig+0xa0>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a18      	ldr	r2, [pc, #96]	; (8005e24 <TIM_OC2_SetConfig+0xfc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d113      	bne.n	8005df0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dce:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dd6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	40012c00 	.word	0x40012c00
 8005e1c:	40014000 	.word	0x40014000
 8005e20:	40014400 	.word	0x40014400
 8005e24:	40014800 	.word	0x40014800

08005e28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0303 	bic.w	r3, r3, #3
 8005e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	021b      	lsls	r3, r3, #8
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a23      	ldr	r2, [pc, #140]	; (8005f14 <TIM_OC3_SetConfig+0xec>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d10d      	bne.n	8005ea6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	021b      	lsls	r3, r3, #8
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ea4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a1a      	ldr	r2, [pc, #104]	; (8005f14 <TIM_OC3_SetConfig+0xec>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00b      	beq.n	8005ec6 <TIM_OC3_SetConfig+0x9e>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a19      	ldr	r2, [pc, #100]	; (8005f18 <TIM_OC3_SetConfig+0xf0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d007      	beq.n	8005ec6 <TIM_OC3_SetConfig+0x9e>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a18      	ldr	r2, [pc, #96]	; (8005f1c <TIM_OC3_SetConfig+0xf4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d003      	beq.n	8005ec6 <TIM_OC3_SetConfig+0x9e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a17      	ldr	r2, [pc, #92]	; (8005f20 <TIM_OC3_SetConfig+0xf8>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d113      	bne.n	8005eee <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	011b      	lsls	r3, r3, #4
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	621a      	str	r2, [r3, #32]
}
 8005f08:	bf00      	nop
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	40012c00 	.word	0x40012c00
 8005f18:	40014000 	.word	0x40014000
 8005f1c:	40014400 	.word	0x40014400
 8005f20:	40014800 	.word	0x40014800

08005f24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	031b      	lsls	r3, r3, #12
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a16      	ldr	r2, [pc, #88]	; (8005fdc <TIM_OC4_SetConfig+0xb8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00b      	beq.n	8005fa0 <TIM_OC4_SetConfig+0x7c>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a15      	ldr	r2, [pc, #84]	; (8005fe0 <TIM_OC4_SetConfig+0xbc>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d007      	beq.n	8005fa0 <TIM_OC4_SetConfig+0x7c>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a14      	ldr	r2, [pc, #80]	; (8005fe4 <TIM_OC4_SetConfig+0xc0>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d003      	beq.n	8005fa0 <TIM_OC4_SetConfig+0x7c>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a13      	ldr	r2, [pc, #76]	; (8005fe8 <TIM_OC4_SetConfig+0xc4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d109      	bne.n	8005fb4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	019b      	lsls	r3, r3, #6
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	621a      	str	r2, [r3, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40012c00 	.word	0x40012c00
 8005fe0:	40014000 	.word	0x40014000
 8005fe4:	40014400 	.word	0x40014400
 8005fe8:	40014800 	.word	0x40014800

08005fec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800601a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006030:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	041b      	lsls	r3, r3, #16
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	4313      	orrs	r3, r2
 800603c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a15      	ldr	r2, [pc, #84]	; (8006098 <TIM_OC5_SetConfig+0xac>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00b      	beq.n	800605e <TIM_OC5_SetConfig+0x72>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a14      	ldr	r2, [pc, #80]	; (800609c <TIM_OC5_SetConfig+0xb0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d007      	beq.n	800605e <TIM_OC5_SetConfig+0x72>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a13      	ldr	r2, [pc, #76]	; (80060a0 <TIM_OC5_SetConfig+0xb4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d003      	beq.n	800605e <TIM_OC5_SetConfig+0x72>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a12      	ldr	r2, [pc, #72]	; (80060a4 <TIM_OC5_SetConfig+0xb8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d109      	bne.n	8006072 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006064:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	021b      	lsls	r3, r3, #8
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	621a      	str	r2, [r3, #32]
}
 800608c:	bf00      	nop
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	40012c00 	.word	0x40012c00
 800609c:	40014000 	.word	0x40014000
 80060a0:	40014400 	.word	0x40014400
 80060a4:	40014800 	.word	0x40014800

080060a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	021b      	lsls	r3, r3, #8
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	051b      	lsls	r3, r3, #20
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a16      	ldr	r2, [pc, #88]	; (8006158 <TIM_OC6_SetConfig+0xb0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00b      	beq.n	800611c <TIM_OC6_SetConfig+0x74>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a15      	ldr	r2, [pc, #84]	; (800615c <TIM_OC6_SetConfig+0xb4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d007      	beq.n	800611c <TIM_OC6_SetConfig+0x74>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a14      	ldr	r2, [pc, #80]	; (8006160 <TIM_OC6_SetConfig+0xb8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d003      	beq.n	800611c <TIM_OC6_SetConfig+0x74>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a13      	ldr	r2, [pc, #76]	; (8006164 <TIM_OC6_SetConfig+0xbc>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d109      	bne.n	8006130 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006122:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	029b      	lsls	r3, r3, #10
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	4313      	orrs	r3, r2
 800612e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	621a      	str	r2, [r3, #32]
}
 800614a:	bf00      	nop
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40012c00 	.word	0x40012c00
 800615c:	40014000 	.word	0x40014000
 8006160:	40014400 	.word	0x40014400
 8006164:	40014800 	.word	0x40014800

08006168 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	f023 0201 	bic.w	r2, r3, #1
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	4a1e      	ldr	r2, [pc, #120]	; (800620c <TIM_TI1_SetConfig+0xa4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d007      	beq.n	80061a6 <TIM_TI1_SetConfig+0x3e>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800619c:	d003      	beq.n	80061a6 <TIM_TI1_SetConfig+0x3e>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4a1b      	ldr	r2, [pc, #108]	; (8006210 <TIM_TI1_SetConfig+0xa8>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d101      	bne.n	80061aa <TIM_TI1_SetConfig+0x42>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e000      	b.n	80061ac <TIM_TI1_SetConfig+0x44>
 80061aa:	2300      	movs	r3, #0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d008      	beq.n	80061c2 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f023 0303 	bic.w	r3, r3, #3
 80061b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	e003      	b.n	80061ca <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f043 0301 	orr.w	r3, r3, #1
 80061c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	4313      	orrs	r3, r2
 80061dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f023 030a 	bic.w	r3, r3, #10
 80061e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	f003 030a 	and.w	r3, r3, #10
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	621a      	str	r2, [r3, #32]
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	40012c00 	.word	0x40012c00
 8006210:	40014000 	.word	0x40014000

08006214 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	f023 0210 	bic.w	r2, r3, #16
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	021b      	lsls	r3, r3, #8
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4313      	orrs	r3, r2
 800624a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006252:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	031b      	lsls	r3, r3, #12
 8006258:	b29b      	uxth	r3, r3
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	4313      	orrs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006266:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	011b      	lsls	r3, r3, #4
 800626c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	621a      	str	r2, [r3, #32]
}
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800628e:	b480      	push	{r7}
 8006290:	b087      	sub	sp, #28
 8006292:	af00      	add	r7, sp, #0
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	607a      	str	r2, [r7, #4]
 800629a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f023 0303 	bic.w	r3, r3, #3
 80062ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80062de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	621a      	str	r2, [r3, #32]
}
 80062fa:	bf00      	nop
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006306:	b480      	push	{r7}
 8006308:	b087      	sub	sp, #28
 800630a:	af00      	add	r7, sp, #0
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	607a      	str	r2, [r7, #4]
 8006312:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006332:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	021b      	lsls	r3, r3, #8
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	4313      	orrs	r3, r2
 800633c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006344:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	031b      	lsls	r3, r3, #12
 800634a:	b29b      	uxth	r3, r3
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	4313      	orrs	r3, r2
 8006350:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006358:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	031b      	lsls	r3, r3, #12
 800635e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4313      	orrs	r3, r2
 8006366:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	621a      	str	r2, [r3, #32]
}
 8006374:	bf00      	nop
 8006376:	371c      	adds	r7, #28
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006380:	b480      	push	{r7}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	f003 031f 	and.w	r3, r3, #31
 8006392:	2201      	movs	r2, #1
 8006394:	fa02 f303 	lsl.w	r3, r2, r3
 8006398:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a1a      	ldr	r2, [r3, #32]
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	43db      	mvns	r3, r3
 80063a2:	401a      	ands	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6a1a      	ldr	r2, [r3, #32]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	fa01 f303 	lsl.w	r3, r1, r3
 80063b8:	431a      	orrs	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	621a      	str	r2, [r3, #32]
}
 80063be:	bf00      	nop
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
	...

080063cc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d109      	bne.n	80063f0 <HAL_TIMEx_PWMN_Start+0x24>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	bf14      	ite	ne
 80063e8:	2301      	movne	r3, #1
 80063ea:	2300      	moveq	r3, #0
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	e022      	b.n	8006436 <HAL_TIMEx_PWMN_Start+0x6a>
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d109      	bne.n	800640a <HAL_TIMEx_PWMN_Start+0x3e>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b01      	cmp	r3, #1
 8006400:	bf14      	ite	ne
 8006402:	2301      	movne	r3, #1
 8006404:	2300      	moveq	r3, #0
 8006406:	b2db      	uxtb	r3, r3
 8006408:	e015      	b.n	8006436 <HAL_TIMEx_PWMN_Start+0x6a>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b08      	cmp	r3, #8
 800640e:	d109      	bne.n	8006424 <HAL_TIMEx_PWMN_Start+0x58>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b01      	cmp	r3, #1
 800641a:	bf14      	ite	ne
 800641c:	2301      	movne	r3, #1
 800641e:	2300      	moveq	r3, #0
 8006420:	b2db      	uxtb	r3, r3
 8006422:	e008      	b.n	8006436 <HAL_TIMEx_PWMN_Start+0x6a>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b01      	cmp	r3, #1
 800642e:	bf14      	ite	ne
 8006430:	2301      	movne	r3, #1
 8006432:	2300      	moveq	r3, #0
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e05a      	b.n	80064f4 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d104      	bne.n	800644e <HAL_TIMEx_PWMN_Start+0x82>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800644c:	e013      	b.n	8006476 <HAL_TIMEx_PWMN_Start+0xaa>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b04      	cmp	r3, #4
 8006452:	d104      	bne.n	800645e <HAL_TIMEx_PWMN_Start+0x92>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800645c:	e00b      	b.n	8006476 <HAL_TIMEx_PWMN_Start+0xaa>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b08      	cmp	r3, #8
 8006462:	d104      	bne.n	800646e <HAL_TIMEx_PWMN_Start+0xa2>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800646c:	e003      	b.n	8006476 <HAL_TIMEx_PWMN_Start+0xaa>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2202      	movs	r2, #2
 8006472:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2204      	movs	r2, #4
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	4618      	mov	r0, r3
 8006480:	f000 f93e 	bl	8006700 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006492:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a18      	ldr	r2, [pc, #96]	; (80064fc <HAL_TIMEx_PWMN_Start+0x130>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d009      	beq.n	80064b2 <HAL_TIMEx_PWMN_Start+0xe6>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a6:	d004      	beq.n	80064b2 <HAL_TIMEx_PWMN_Start+0xe6>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a14      	ldr	r2, [pc, #80]	; (8006500 <HAL_TIMEx_PWMN_Start+0x134>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d115      	bne.n	80064de <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	4b12      	ldr	r3, [pc, #72]	; (8006504 <HAL_TIMEx_PWMN_Start+0x138>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b06      	cmp	r3, #6
 80064c2:	d015      	beq.n	80064f0 <HAL_TIMEx_PWMN_Start+0x124>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ca:	d011      	beq.n	80064f0 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0201 	orr.w	r2, r2, #1
 80064da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064dc:	e008      	b.n	80064f0 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f042 0201 	orr.w	r2, r2, #1
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	e000      	b.n	80064f2 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40012c00 	.word	0x40012c00
 8006500:	40014000 	.word	0x40014000
 8006504:	00010007 	.word	0x00010007

08006508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800651c:	2302      	movs	r3, #2
 800651e:	e04f      	b.n	80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a21      	ldr	r2, [pc, #132]	; (80065cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d108      	bne.n	800655c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006550:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	4313      	orrs	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a14      	ldr	r2, [pc, #80]	; (80065cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d009      	beq.n	8006594 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006588:	d004      	beq.n	8006594 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a10      	ldr	r2, [pc, #64]	; (80065d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d10c      	bne.n	80065ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800659a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	40014000 	.word	0x40014000

080065d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d101      	bne.n	80065f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065ec:	2302      	movs	r3, #2
 80065ee:	e060      	b.n	80066b2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	4313      	orrs	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	4313      	orrs	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	041b      	lsls	r3, r3, #16
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a14      	ldr	r2, [pc, #80]	; (80066c0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d115      	bne.n	80066a0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	051b      	lsls	r3, r3, #20
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	4313      	orrs	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40012c00 	.word	0x40012c00

080066c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f003 031f 	and.w	r3, r3, #31
 8006712:	2204      	movs	r2, #4
 8006714:	fa02 f303 	lsl.w	r3, r2, r3
 8006718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a1a      	ldr	r2, [r3, #32]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	43db      	mvns	r3, r3
 8006722:	401a      	ands	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a1a      	ldr	r2, [r3, #32]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 031f 	and.w	r3, r3, #31
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	fa01 f303 	lsl.w	r3, r1, r3
 8006738:	431a      	orrs	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	621a      	str	r2, [r3, #32]
}
 800673e:	bf00      	nop
 8006740:	371c      	adds	r7, #28
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b082      	sub	sp, #8
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e040      	b.n	80067de <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006760:	2b00      	cmp	r3, #0
 8006762:	d106      	bne.n	8006772 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7fb fb6b 	bl	8001e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2224      	movs	r2, #36	; 0x24
 8006776:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0201 	bic.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fd23 	bl	80071d4 <UART_SetConfig>
 800678e:	4603      	mov	r3, r0
 8006790:	2b01      	cmp	r3, #1
 8006792:	d101      	bne.n	8006798 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e022      	b.n	80067de <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	2b00      	cmp	r3, #0
 800679e:	d002      	beq.n	80067a6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fe4d 	bl	8007440 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f042 0201 	orr.w	r2, r2, #1
 80067d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fed4 	bl	8007584 <UART_CheckIdleState>
 80067dc:	4603      	mov	r3, r0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b08a      	sub	sp, #40	; 0x28
 80067ea:	af02      	add	r7, sp, #8
 80067ec:	60f8      	str	r0, [r7, #12]
 80067ee:	60b9      	str	r1, [r7, #8]
 80067f0:	603b      	str	r3, [r7, #0]
 80067f2:	4613      	mov	r3, r2
 80067f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067fa:	2b20      	cmp	r3, #32
 80067fc:	d178      	bne.n	80068f0 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <HAL_UART_Transmit+0x24>
 8006804:	88fb      	ldrh	r3, [r7, #6]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e071      	b.n	80068f2 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2221      	movs	r2, #33	; 0x21
 800681a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800681c:	f7fb fd64 	bl	80022e8 <HAL_GetTick>
 8006820:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	88fa      	ldrh	r2, [r7, #6]
 8006826:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	88fa      	ldrh	r2, [r7, #6]
 800682e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800683a:	d108      	bne.n	800684e <HAL_UART_Transmit+0x68>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d104      	bne.n	800684e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006844:	2300      	movs	r3, #0
 8006846:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	61bb      	str	r3, [r7, #24]
 800684c:	e003      	b.n	8006856 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006852:	2300      	movs	r3, #0
 8006854:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006856:	e030      	b.n	80068ba <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	2200      	movs	r2, #0
 8006860:	2180      	movs	r1, #128	; 0x80
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 ff36 	bl	80076d4 <UART_WaitOnFlagUntilTimeout>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d004      	beq.n	8006878 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2220      	movs	r2, #32
 8006872:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e03c      	b.n	80068f2 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10b      	bne.n	8006896 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	881a      	ldrh	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800688a:	b292      	uxth	r2, r2
 800688c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	3302      	adds	r3, #2
 8006892:	61bb      	str	r3, [r7, #24]
 8006894:	e008      	b.n	80068a8 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	781a      	ldrb	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	b292      	uxth	r2, r2
 80068a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	3301      	adds	r3, #1
 80068a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1c8      	bne.n	8006858 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2200      	movs	r2, #0
 80068ce:	2140      	movs	r1, #64	; 0x40
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f000 feff 	bl	80076d4 <UART_WaitOnFlagUntilTimeout>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d004      	beq.n	80068e6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e005      	b.n	80068f2 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2220      	movs	r2, #32
 80068ea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	e000      	b.n	80068f2 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80068f0:	2302      	movs	r3, #2
  }
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3720      	adds	r7, #32
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b08a      	sub	sp, #40	; 0x28
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	4613      	mov	r3, r2
 8006908:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800690e:	2b20      	cmp	r3, #32
 8006910:	d165      	bne.n	80069de <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <HAL_UART_Transmit_DMA+0x22>
 8006918:	88fb      	ldrh	r3, [r7, #6]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e05e      	b.n	80069e0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	88fa      	ldrh	r2, [r7, #6]
 800692c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	88fa      	ldrh	r2, [r7, #6]
 8006934:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2221      	movs	r2, #33	; 0x21
 8006944:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694a:	2b00      	cmp	r3, #0
 800694c:	d027      	beq.n	800699e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006952:	4a25      	ldr	r2, [pc, #148]	; (80069e8 <HAL_UART_Transmit_DMA+0xec>)
 8006954:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695a:	4a24      	ldr	r2, [pc, #144]	; (80069ec <HAL_UART_Transmit_DMA+0xf0>)
 800695c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006962:	4a23      	ldr	r2, [pc, #140]	; (80069f0 <HAL_UART_Transmit_DMA+0xf4>)
 8006964:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696a:	2200      	movs	r2, #0
 800696c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006976:	4619      	mov	r1, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3328      	adds	r3, #40	; 0x28
 800697e:	461a      	mov	r2, r3
 8006980:	88fb      	ldrh	r3, [r7, #6]
 8006982:	f7fc fab7 	bl	8002ef4 <HAL_DMA_Start_IT>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d008      	beq.n	800699e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2210      	movs	r2, #16
 8006990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2220      	movs	r2, #32
 8006998:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e020      	b.n	80069e0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2240      	movs	r2, #64	; 0x40
 80069a4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3308      	adds	r3, #8
 80069ac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	613b      	str	r3, [r7, #16]
   return(result);
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3308      	adds	r3, #8
 80069c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c6:	623a      	str	r2, [r7, #32]
 80069c8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	69f9      	ldr	r1, [r7, #28]
 80069cc:	6a3a      	ldr	r2, [r7, #32]
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e5      	bne.n	80069a6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	e000      	b.n	80069e0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80069de:	2302      	movs	r3, #2
  }
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3728      	adds	r7, #40	; 0x28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	080079f9 	.word	0x080079f9
 80069ec:	08007a8d 	.word	0x08007a8d
 80069f0:	08007c0d 	.word	0x08007c0d

080069f4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08a      	sub	sp, #40	; 0x28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	4613      	mov	r3, r2
 8006a00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	d132      	bne.n	8006a72 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <HAL_UART_Receive_DMA+0x24>
 8006a12:	88fb      	ldrh	r3, [r7, #6]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e02b      	b.n	8006a74 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d018      	beq.n	8006a62 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a44:	627b      	str	r3, [r7, #36]	; 0x24
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	623b      	str	r3, [r7, #32]
 8006a50:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a52:	69f9      	ldr	r1, [r7, #28]
 8006a54:	6a3a      	ldr	r2, [r7, #32]
 8006a56:	e841 2300 	strex	r3, r2, [r1]
 8006a5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1e6      	bne.n	8006a30 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006a62:	88fb      	ldrh	r3, [r7, #6]
 8006a64:	461a      	mov	r2, r3
 8006a66:	68b9      	ldr	r1, [r7, #8]
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 fe9b 	bl	80077a4 <UART_Start_Receive_DMA>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	e000      	b.n	8006a74 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006a72:	2302      	movs	r3, #2
  }
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3728      	adds	r7, #40	; 0x28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b090      	sub	sp, #64	; 0x40
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a88:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a90:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9c:	2b80      	cmp	r3, #128	; 0x80
 8006a9e:	d139      	bne.n	8006b14 <HAL_UART_DMAStop+0x98>
 8006aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa2:	2b21      	cmp	r3, #33	; 0x21
 8006aa4:	d136      	bne.n	8006b14 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3308      	adds	r3, #8
 8006aac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	e853 3f00 	ldrex	r3, [r3]
 8006ab4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006abc:	637b      	str	r3, [r7, #52]	; 0x34
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ace:	e841 2300 	strex	r3, r2, [r1]
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1e5      	bne.n	8006aa6 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d015      	beq.n	8006b0e <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fc fa63 	bl	8002fb2 <HAL_DMA_Abort>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00d      	beq.n	8006b0e <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fc fb75 	bl	80031e6 <HAL_DMA_GetError>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d105      	bne.n	8006b0e <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2210      	movs	r2, #16
 8006b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e044      	b.n	8006b98 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fee8 	bl	80078e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1e:	2b40      	cmp	r3, #64	; 0x40
 8006b20:	d139      	bne.n	8006b96 <HAL_UART_DMAStop+0x11a>
 8006b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b24:	2b22      	cmp	r3, #34	; 0x22
 8006b26:	d136      	bne.n	8006b96 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3308      	adds	r3, #8
 8006b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	e853 3f00 	ldrex	r3, [r3]
 8006b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b3e:	633b      	str	r3, [r7, #48]	; 0x30
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3308      	adds	r3, #8
 8006b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b48:	61ba      	str	r2, [r7, #24]
 8006b4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	6979      	ldr	r1, [r7, #20]
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	e841 2300 	strex	r3, r2, [r1]
 8006b54:	613b      	str	r3, [r7, #16]
   return(result);
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e5      	bne.n	8006b28 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d015      	beq.n	8006b90 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7fc fa22 	bl	8002fb2 <HAL_DMA_Abort>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00d      	beq.n	8006b90 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fc fb34 	bl	80031e6 <HAL_DMA_GetError>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b20      	cmp	r3, #32
 8006b82:	d105      	bne.n	8006b90 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2210      	movs	r2, #16
 8006b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e003      	b.n	8006b98 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fecd 	bl	8007930 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3740      	adds	r7, #64	; 0x40
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b0ba      	sub	sp, #232	; 0xe8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006bc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006bca:	f640 030f 	movw	r3, #2063	; 0x80f
 8006bce:	4013      	ands	r3, r2
 8006bd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006bd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d115      	bne.n	8006c08 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be0:	f003 0320 	and.w	r3, r3, #32
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00f      	beq.n	8006c08 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bec:	f003 0320 	and.w	r3, r3, #32
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d009      	beq.n	8006c08 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 82ab 	beq.w	8007154 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	4798      	blx	r3
      }
      return;
 8006c06:	e2a5      	b.n	8007154 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f000 8117 	beq.w	8006e40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d106      	bne.n	8006c2c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006c1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c22:	4b85      	ldr	r3, [pc, #532]	; (8006e38 <HAL_UART_IRQHandler+0x298>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 810a 	beq.w	8006e40 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d011      	beq.n	8006c5c <HAL_UART_IRQHandler+0xbc>
 8006c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00b      	beq.n	8006c5c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c52:	f043 0201 	orr.w	r2, r3, #1
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d011      	beq.n	8006c8c <HAL_UART_IRQHandler+0xec>
 8006c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00b      	beq.n	8006c8c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2202      	movs	r2, #2
 8006c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c82:	f043 0204 	orr.w	r2, r3, #4
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d011      	beq.n	8006cbc <HAL_UART_IRQHandler+0x11c>
 8006c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00b      	beq.n	8006cbc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2204      	movs	r2, #4
 8006caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cb2:	f043 0202 	orr.w	r2, r3, #2
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d017      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d105      	bne.n	8006ce0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cd8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2208      	movs	r2, #8
 8006ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cee:	f043 0208 	orr.w	r2, r3, #8
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d012      	beq.n	8006d2a <HAL_UART_IRQHandler+0x18a>
 8006d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00c      	beq.n	8006d2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d20:	f043 0220 	orr.w	r2, r3, #32
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 8211 	beq.w	8007158 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00d      	beq.n	8006d5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d007      	beq.n	8006d5e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d005      	beq.n	8006d82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d04f      	beq.n	8006e22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fdd4 	bl	8007930 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d92:	2b40      	cmp	r3, #64	; 0x40
 8006d94:	d141      	bne.n	8006e1a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006dc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006dce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006dda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1d9      	bne.n	8006d96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d013      	beq.n	8006e12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dee:	4a13      	ldr	r2, [pc, #76]	; (8006e3c <HAL_UART_IRQHandler+0x29c>)
 8006df0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fc f914 	bl	8003024 <HAL_DMA_Abort_IT>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d017      	beq.n	8006e32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e10:	e00f      	b.n	8006e32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f9c8 	bl	80071a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e18:	e00b      	b.n	8006e32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f9c4 	bl	80071a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e20:	e007      	b.n	8006e32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f9c0 	bl	80071a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006e30:	e192      	b.n	8007158 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e32:	bf00      	nop
    return;
 8006e34:	e190      	b.n	8007158 <HAL_UART_IRQHandler+0x5b8>
 8006e36:	bf00      	nop
 8006e38:	04000120 	.word	0x04000120
 8006e3c:	08007c8b 	.word	0x08007c8b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	f040 814b 	bne.w	80070e0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e4e:	f003 0310 	and.w	r3, r3, #16
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 8144 	beq.w	80070e0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e5c:	f003 0310 	and.w	r3, r3, #16
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 813d 	beq.w	80070e0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2210      	movs	r2, #16
 8006e6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e78:	2b40      	cmp	r3, #64	; 0x40
 8006e7a:	f040 80b5 	bne.w	8006fe8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 8164 	beq.w	800715c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	f080 815c 	bcs.w	800715c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006eaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	f000 8086 	beq.w	8006fc6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ece:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ed2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ed6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ee4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ee8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ef0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ef4:	e841 2300 	strex	r3, r2, [r1]
 8006ef8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1da      	bne.n	8006eba <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3308      	adds	r3, #8
 8006f0a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f0e:	e853 3f00 	ldrex	r3, [r3]
 8006f12:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f16:	f023 0301 	bic.w	r3, r3, #1
 8006f1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3308      	adds	r3, #8
 8006f24:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f28:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f2c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f30:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e1      	bne.n	8006f04 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3308      	adds	r3, #8
 8006f46:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f4a:	e853 3f00 	ldrex	r3, [r3]
 8006f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3308      	adds	r3, #8
 8006f60:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f64:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e3      	bne.n	8006f40 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f96:	f023 0310 	bic.w	r3, r3, #16
 8006f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fa8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006faa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fb0:	e841 2300 	strex	r3, r2, [r1]
 8006fb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e4      	bne.n	8006f86 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fb fff6 	bl	8002fb2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f8eb 	bl	80071bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fe6:	e0b9      	b.n	800715c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007002:	b29b      	uxth	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 80ab 	beq.w	8007160 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800700a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 80a6 	beq.w	8007160 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701c:	e853 3f00 	ldrex	r3, [r3]
 8007020:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007024:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007028:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	461a      	mov	r2, r3
 8007032:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007036:	647b      	str	r3, [r7, #68]	; 0x44
 8007038:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800703c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800703e:	e841 2300 	strex	r3, r2, [r1]
 8007042:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e4      	bne.n	8007014 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3308      	adds	r3, #8
 8007050:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	623b      	str	r3, [r7, #32]
   return(result);
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	f023 0301 	bic.w	r3, r3, #1
 8007060:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	3308      	adds	r3, #8
 800706a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800706e:	633a      	str	r2, [r7, #48]	; 0x30
 8007070:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e3      	bne.n	800704a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2220      	movs	r2, #32
 8007086:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f023 0310 	bic.w	r3, r3, #16
 80070aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070b8:	61fb      	str	r3, [r7, #28]
 80070ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	69b9      	ldr	r1, [r7, #24]
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	617b      	str	r3, [r7, #20]
   return(result);
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e4      	bne.n	8007096 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f86f 	bl	80071bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070de:	e03f      	b.n	8007160 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00e      	beq.n	800710a <HAL_UART_IRQHandler+0x56a>
 80070ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d008      	beq.n	800710a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007100:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fe01 	bl	8007d0a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007108:	e02d      	b.n	8007166 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800710a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00e      	beq.n	8007134 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800711a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800711e:	2b00      	cmp	r3, #0
 8007120:	d008      	beq.n	8007134 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007126:	2b00      	cmp	r3, #0
 8007128:	d01c      	beq.n	8007164 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
    }
    return;
 8007132:	e017      	b.n	8007164 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713c:	2b00      	cmp	r3, #0
 800713e:	d012      	beq.n	8007166 <HAL_UART_IRQHandler+0x5c6>
 8007140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00c      	beq.n	8007166 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fdb2 	bl	8007cb6 <UART_EndTransmit_IT>
    return;
 8007152:	e008      	b.n	8007166 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007154:	bf00      	nop
 8007156:	e006      	b.n	8007166 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007158:	bf00      	nop
 800715a:	e004      	b.n	8007166 <HAL_UART_IRQHandler+0x5c6>
      return;
 800715c:	bf00      	nop
 800715e:	e002      	b.n	8007166 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007160:	bf00      	nop
 8007162:	e000      	b.n	8007166 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007164:	bf00      	nop
  }

}
 8007166:	37e8      	adds	r7, #232	; 0xe8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	460b      	mov	r3, r1
 80071c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	431a      	orrs	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	431a      	orrs	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	4b8a      	ldr	r3, [pc, #552]	; (8007428 <UART_SetConfig+0x254>)
 8007200:	4013      	ands	r3, r2
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	6812      	ldr	r2, [r2, #0]
 8007206:	6979      	ldr	r1, [r7, #20]
 8007208:	430b      	orrs	r3, r1
 800720a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	68da      	ldr	r2, [r3, #12]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a1b      	ldr	r3, [r3, #32]
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	430a      	orrs	r2, r1
 8007244:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a78      	ldr	r2, [pc, #480]	; (800742c <UART_SetConfig+0x258>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d120      	bne.n	8007292 <UART_SetConfig+0xbe>
 8007250:	4b77      	ldr	r3, [pc, #476]	; (8007430 <UART_SetConfig+0x25c>)
 8007252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007254:	f003 0303 	and.w	r3, r3, #3
 8007258:	2b03      	cmp	r3, #3
 800725a:	d817      	bhi.n	800728c <UART_SetConfig+0xb8>
 800725c:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <UART_SetConfig+0x90>)
 800725e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007262:	bf00      	nop
 8007264:	08007275 	.word	0x08007275
 8007268:	08007281 	.word	0x08007281
 800726c:	08007287 	.word	0x08007287
 8007270:	0800727b 	.word	0x0800727b
 8007274:	2300      	movs	r3, #0
 8007276:	77fb      	strb	r3, [r7, #31]
 8007278:	e01d      	b.n	80072b6 <UART_SetConfig+0xe2>
 800727a:	2302      	movs	r3, #2
 800727c:	77fb      	strb	r3, [r7, #31]
 800727e:	e01a      	b.n	80072b6 <UART_SetConfig+0xe2>
 8007280:	2304      	movs	r3, #4
 8007282:	77fb      	strb	r3, [r7, #31]
 8007284:	e017      	b.n	80072b6 <UART_SetConfig+0xe2>
 8007286:	2308      	movs	r3, #8
 8007288:	77fb      	strb	r3, [r7, #31]
 800728a:	e014      	b.n	80072b6 <UART_SetConfig+0xe2>
 800728c:	2310      	movs	r3, #16
 800728e:	77fb      	strb	r3, [r7, #31]
 8007290:	e011      	b.n	80072b6 <UART_SetConfig+0xe2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a67      	ldr	r2, [pc, #412]	; (8007434 <UART_SetConfig+0x260>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d102      	bne.n	80072a2 <UART_SetConfig+0xce>
 800729c:	2300      	movs	r3, #0
 800729e:	77fb      	strb	r3, [r7, #31]
 80072a0:	e009      	b.n	80072b6 <UART_SetConfig+0xe2>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a64      	ldr	r2, [pc, #400]	; (8007438 <UART_SetConfig+0x264>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d102      	bne.n	80072b2 <UART_SetConfig+0xde>
 80072ac:	2300      	movs	r3, #0
 80072ae:	77fb      	strb	r3, [r7, #31]
 80072b0:	e001      	b.n	80072b6 <UART_SetConfig+0xe2>
 80072b2:	2310      	movs	r3, #16
 80072b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072be:	d15a      	bne.n	8007376 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80072c0:	7ffb      	ldrb	r3, [r7, #31]
 80072c2:	2b08      	cmp	r3, #8
 80072c4:	d827      	bhi.n	8007316 <UART_SetConfig+0x142>
 80072c6:	a201      	add	r2, pc, #4	; (adr r2, 80072cc <UART_SetConfig+0xf8>)
 80072c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072cc:	080072f1 	.word	0x080072f1
 80072d0:	080072f9 	.word	0x080072f9
 80072d4:	08007301 	.word	0x08007301
 80072d8:	08007317 	.word	0x08007317
 80072dc:	08007307 	.word	0x08007307
 80072e0:	08007317 	.word	0x08007317
 80072e4:	08007317 	.word	0x08007317
 80072e8:	08007317 	.word	0x08007317
 80072ec:	0800730f 	.word	0x0800730f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072f0:	f7fd fb8e 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 80072f4:	61b8      	str	r0, [r7, #24]
        break;
 80072f6:	e013      	b.n	8007320 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072f8:	f7fd fbac 	bl	8004a54 <HAL_RCC_GetPCLK2Freq>
 80072fc:	61b8      	str	r0, [r7, #24]
        break;
 80072fe:	e00f      	b.n	8007320 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007300:	4b4e      	ldr	r3, [pc, #312]	; (800743c <UART_SetConfig+0x268>)
 8007302:	61bb      	str	r3, [r7, #24]
        break;
 8007304:	e00c      	b.n	8007320 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007306:	f7fd fb0d 	bl	8004924 <HAL_RCC_GetSysClockFreq>
 800730a:	61b8      	str	r0, [r7, #24]
        break;
 800730c:	e008      	b.n	8007320 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800730e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007312:	61bb      	str	r3, [r7, #24]
        break;
 8007314:	e004      	b.n	8007320 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	77bb      	strb	r3, [r7, #30]
        break;
 800731e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d074      	beq.n	8007410 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	005a      	lsls	r2, r3, #1
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	085b      	lsrs	r3, r3, #1
 8007330:	441a      	add	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	fbb2 f3f3 	udiv	r3, r2, r3
 800733a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	2b0f      	cmp	r3, #15
 8007340:	d916      	bls.n	8007370 <UART_SetConfig+0x19c>
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007348:	d212      	bcs.n	8007370 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	b29b      	uxth	r3, r3
 800734e:	f023 030f 	bic.w	r3, r3, #15
 8007352:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	085b      	lsrs	r3, r3, #1
 8007358:	b29b      	uxth	r3, r3
 800735a:	f003 0307 	and.w	r3, r3, #7
 800735e:	b29a      	uxth	r2, r3
 8007360:	89fb      	ldrh	r3, [r7, #14]
 8007362:	4313      	orrs	r3, r2
 8007364:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	89fa      	ldrh	r2, [r7, #14]
 800736c:	60da      	str	r2, [r3, #12]
 800736e:	e04f      	b.n	8007410 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	77bb      	strb	r3, [r7, #30]
 8007374:	e04c      	b.n	8007410 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007376:	7ffb      	ldrb	r3, [r7, #31]
 8007378:	2b08      	cmp	r3, #8
 800737a:	d828      	bhi.n	80073ce <UART_SetConfig+0x1fa>
 800737c:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <UART_SetConfig+0x1b0>)
 800737e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007382:	bf00      	nop
 8007384:	080073a9 	.word	0x080073a9
 8007388:	080073b1 	.word	0x080073b1
 800738c:	080073b9 	.word	0x080073b9
 8007390:	080073cf 	.word	0x080073cf
 8007394:	080073bf 	.word	0x080073bf
 8007398:	080073cf 	.word	0x080073cf
 800739c:	080073cf 	.word	0x080073cf
 80073a0:	080073cf 	.word	0x080073cf
 80073a4:	080073c7 	.word	0x080073c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073a8:	f7fd fb32 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 80073ac:	61b8      	str	r0, [r7, #24]
        break;
 80073ae:	e013      	b.n	80073d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073b0:	f7fd fb50 	bl	8004a54 <HAL_RCC_GetPCLK2Freq>
 80073b4:	61b8      	str	r0, [r7, #24]
        break;
 80073b6:	e00f      	b.n	80073d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073b8:	4b20      	ldr	r3, [pc, #128]	; (800743c <UART_SetConfig+0x268>)
 80073ba:	61bb      	str	r3, [r7, #24]
        break;
 80073bc:	e00c      	b.n	80073d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073be:	f7fd fab1 	bl	8004924 <HAL_RCC_GetSysClockFreq>
 80073c2:	61b8      	str	r0, [r7, #24]
        break;
 80073c4:	e008      	b.n	80073d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ca:	61bb      	str	r3, [r7, #24]
        break;
 80073cc:	e004      	b.n	80073d8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	77bb      	strb	r3, [r7, #30]
        break;
 80073d6:	bf00      	nop
    }

    if (pclk != 0U)
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d018      	beq.n	8007410 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	085a      	lsrs	r2, r3, #1
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	441a      	add	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	2b0f      	cmp	r3, #15
 80073f6:	d909      	bls.n	800740c <UART_SetConfig+0x238>
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073fe:	d205      	bcs.n	800740c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	b29a      	uxth	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	60da      	str	r2, [r3, #12]
 800740a:	e001      	b.n	8007410 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800741c:	7fbb      	ldrb	r3, [r7, #30]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3720      	adds	r7, #32
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	efff69f3 	.word	0xefff69f3
 800742c:	40013800 	.word	0x40013800
 8007430:	40021000 	.word	0x40021000
 8007434:	40004400 	.word	0x40004400
 8007438:	40004800 	.word	0x40004800
 800743c:	007a1200 	.word	0x007a1200

08007440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00a      	beq.n	800746a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	430a      	orrs	r2, r1
 8007468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	f003 0302 	and.w	r3, r3, #2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00a      	beq.n	800748c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	430a      	orrs	r2, r1
 800748a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00a      	beq.n	80074ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	f003 0308 	and.w	r3, r3, #8
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00a      	beq.n	80074d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	f003 0310 	and.w	r3, r3, #16
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00a      	beq.n	80074f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	f003 0320 	and.w	r3, r3, #32
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00a      	beq.n	8007514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	430a      	orrs	r2, r1
 8007512:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01a      	beq.n	8007556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800753e:	d10a      	bne.n	8007556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	605a      	str	r2, [r3, #4]
  }
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b098      	sub	sp, #96	; 0x60
 8007588:	af02      	add	r7, sp, #8
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007594:	f7fa fea8 	bl	80022e8 <HAL_GetTick>
 8007598:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0308 	and.w	r3, r3, #8
 80075a4:	2b08      	cmp	r3, #8
 80075a6:	d12e      	bne.n	8007606 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075b0:	2200      	movs	r2, #0
 80075b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f88c 	bl	80076d4 <UART_WaitOnFlagUntilTimeout>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d021      	beq.n	8007606 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ca:	e853 3f00 	ldrex	r3, [r3]
 80075ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075d6:	653b      	str	r3, [r7, #80]	; 0x50
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	461a      	mov	r2, r3
 80075de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075e0:	647b      	str	r3, [r7, #68]	; 0x44
 80075e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075e8:	e841 2300 	strex	r3, r2, [r1]
 80075ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e6      	bne.n	80075c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2220      	movs	r2, #32
 80075f8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e062      	b.n	80076cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b04      	cmp	r3, #4
 8007612:	d149      	bne.n	80076a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007614:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800761c:	2200      	movs	r2, #0
 800761e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f856 	bl	80076d4 <UART_WaitOnFlagUntilTimeout>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d03c      	beq.n	80076a8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	623b      	str	r3, [r7, #32]
   return(result);
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	461a      	mov	r2, r3
 800764a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800764c:	633b      	str	r3, [r7, #48]	; 0x30
 800764e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e6      	bne.n	800762e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3308      	adds	r3, #8
 8007666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	e853 3f00 	ldrex	r3, [r3]
 800766e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f023 0301 	bic.w	r3, r3, #1
 8007676:	64bb      	str	r3, [r7, #72]	; 0x48
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3308      	adds	r3, #8
 800767e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007680:	61fa      	str	r2, [r7, #28]
 8007682:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007684:	69b9      	ldr	r1, [r7, #24]
 8007686:	69fa      	ldr	r2, [r7, #28]
 8007688:	e841 2300 	strex	r3, r2, [r1]
 800768c:	617b      	str	r3, [r7, #20]
   return(result);
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1e5      	bne.n	8007660 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2220      	movs	r2, #32
 8007698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e011      	b.n	80076cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2220      	movs	r2, #32
 80076ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2220      	movs	r2, #32
 80076b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3758      	adds	r7, #88	; 0x58
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	603b      	str	r3, [r7, #0]
 80076e0:	4613      	mov	r3, r2
 80076e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076e4:	e049      	b.n	800777a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ec:	d045      	beq.n	800777a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ee:	f7fa fdfb 	bl	80022e8 <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d302      	bcc.n	8007704 <UART_WaitOnFlagUntilTimeout+0x30>
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e048      	b.n	800779a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0304 	and.w	r3, r3, #4
 8007712:	2b00      	cmp	r3, #0
 8007714:	d031      	beq.n	800777a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	f003 0308 	and.w	r3, r3, #8
 8007720:	2b08      	cmp	r3, #8
 8007722:	d110      	bne.n	8007746 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2208      	movs	r2, #8
 800772a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 f8ff 	bl	8007930 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2208      	movs	r2, #8
 8007736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e029      	b.n	800779a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007754:	d111      	bne.n	800777a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800775e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 f8e5 	bl	8007930 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2220      	movs	r2, #32
 800776a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e00f      	b.n	800779a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69da      	ldr	r2, [r3, #28]
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	4013      	ands	r3, r2
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	429a      	cmp	r2, r3
 8007788:	bf0c      	ite	eq
 800778a:	2301      	moveq	r3, #1
 800778c:	2300      	movne	r3, #0
 800778e:	b2db      	uxtb	r3, r3
 8007790:	461a      	mov	r2, r3
 8007792:	79fb      	ldrb	r3, [r7, #7]
 8007794:	429a      	cmp	r2, r3
 8007796:	d0a6      	beq.n	80076e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
	...

080077a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b096      	sub	sp, #88	; 0x58
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	4613      	mov	r3, r2
 80077b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	88fa      	ldrh	r2, [r7, #6]
 80077bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2222      	movs	r2, #34	; 0x22
 80077cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d028      	beq.n	800782a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077dc:	4a3e      	ldr	r2, [pc, #248]	; (80078d8 <UART_Start_Receive_DMA+0x134>)
 80077de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077e4:	4a3d      	ldr	r2, [pc, #244]	; (80078dc <UART_Start_Receive_DMA+0x138>)
 80077e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077ec:	4a3c      	ldr	r2, [pc, #240]	; (80078e0 <UART_Start_Receive_DMA+0x13c>)
 80077ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077f4:	2200      	movs	r2, #0
 80077f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3324      	adds	r3, #36	; 0x24
 8007802:	4619      	mov	r1, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007808:	461a      	mov	r2, r3
 800780a:	88fb      	ldrh	r3, [r7, #6]
 800780c:	f7fb fb72 	bl	8002ef4 <HAL_DMA_Start_IT>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d009      	beq.n	800782a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2210      	movs	r2, #16
 800781a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2220      	movs	r2, #32
 8007822:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e051      	b.n	80078ce <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d018      	beq.n	8007864 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007846:	657b      	str	r3, [r7, #84]	; 0x54
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007850:	64bb      	str	r3, [r7, #72]	; 0x48
 8007852:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800785e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e6      	bne.n	8007832 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3308      	adds	r3, #8
 800786a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786e:	e853 3f00 	ldrex	r3, [r3]
 8007872:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	f043 0301 	orr.w	r3, r3, #1
 800787a:	653b      	str	r3, [r7, #80]	; 0x50
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3308      	adds	r3, #8
 8007882:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007884:	637a      	str	r2, [r7, #52]	; 0x34
 8007886:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007888:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800788a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800788c:	e841 2300 	strex	r3, r2, [r1]
 8007890:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e5      	bne.n	8007864 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3308      	adds	r3, #8
 800789e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	e853 3f00 	ldrex	r3, [r3]
 80078a6:	613b      	str	r3, [r7, #16]
   return(result);
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3308      	adds	r3, #8
 80078b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078b8:	623a      	str	r2, [r7, #32]
 80078ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078bc:	69f9      	ldr	r1, [r7, #28]
 80078be:	6a3a      	ldr	r2, [r7, #32]
 80078c0:	e841 2300 	strex	r3, r2, [r1]
 80078c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1e5      	bne.n	8007898 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3758      	adds	r7, #88	; 0x58
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	08007aa9 	.word	0x08007aa9
 80078dc:	08007bcf 	.word	0x08007bcf
 80078e0:	08007c0d 	.word	0x08007c0d

080078e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b089      	sub	sp, #36	; 0x24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	e853 3f00 	ldrex	r3, [r3]
 80078f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007900:	61fb      	str	r3, [r7, #28]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	461a      	mov	r2, r3
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	61bb      	str	r3, [r7, #24]
 800790c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790e:	6979      	ldr	r1, [r7, #20]
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	613b      	str	r3, [r7, #16]
   return(result);
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1e6      	bne.n	80078ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2220      	movs	r2, #32
 8007922:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8007924:	bf00      	nop
 8007926:	3724      	adds	r7, #36	; 0x24
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007930:	b480      	push	{r7}
 8007932:	b095      	sub	sp, #84	; 0x54
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007948:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800794c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007956:	643b      	str	r3, [r7, #64]	; 0x40
 8007958:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800795c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e6      	bne.n	8007938 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3308      	adds	r3, #8
 8007970:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	61fb      	str	r3, [r7, #28]
   return(result);
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	f023 0301 	bic.w	r3, r3, #1
 8007980:	64bb      	str	r3, [r7, #72]	; 0x48
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3308      	adds	r3, #8
 8007988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800798a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800798c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e5      	bne.n	800796a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d118      	bne.n	80079d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f023 0310 	bic.w	r3, r3, #16
 80079ba:	647b      	str	r3, [r7, #68]	; 0x44
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079c4:	61bb      	str	r3, [r7, #24]
 80079c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	6979      	ldr	r1, [r7, #20]
 80079ca:	69ba      	ldr	r2, [r7, #24]
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	613b      	str	r3, [r7, #16]
   return(result);
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e6      	bne.n	80079a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2220      	movs	r2, #32
 80079dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	669a      	str	r2, [r3, #104]	; 0x68
}
 80079ec:	bf00      	nop
 80079ee:	3754      	adds	r7, #84	; 0x54
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b090      	sub	sp, #64	; 0x40
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a04:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	2b20      	cmp	r3, #32
 8007a0c:	d037      	beq.n	8007a7e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8007a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a10:	2200      	movs	r2, #0
 8007a12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3308      	adds	r3, #8
 8007a1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	623b      	str	r3, [r7, #32]
   return(result);
 8007a26:	6a3b      	ldr	r3, [r7, #32]
 8007a28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3308      	adds	r3, #8
 8007a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a36:	633a      	str	r2, [r7, #48]	; 0x30
 8007a38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e5      	bne.n	8007a16 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	e853 3f00 	ldrex	r3, [r3]
 8007a56:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	461a      	mov	r2, r3
 8007a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a68:	61fb      	str	r3, [r7, #28]
 8007a6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6c:	69b9      	ldr	r1, [r7, #24]
 8007a6e:	69fa      	ldr	r2, [r7, #28]
 8007a70:	e841 2300 	strex	r3, r2, [r1]
 8007a74:	617b      	str	r3, [r7, #20]
   return(result);
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1e6      	bne.n	8007a4a <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a7c:	e002      	b.n	8007a84 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8007a7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007a80:	f7f9 fe4a 	bl	8001718 <HAL_UART_TxCpltCallback>
}
 8007a84:	bf00      	nop
 8007a86:	3740      	adds	r7, #64	; 0x40
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f7ff fb66 	bl	800716c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007aa0:	bf00      	nop
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b09c      	sub	sp, #112	; 0x70
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	2b20      	cmp	r3, #32
 8007abc:	d071      	beq.n	8007ba2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8007abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ace:	e853 3f00 	ldrex	r3, [r3]
 8007ad2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ada:	66bb      	str	r3, [r7, #104]	; 0x68
 8007adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ae4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ae6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007aea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007aec:	e841 2300 	strex	r3, r2, [r1]
 8007af0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1e6      	bne.n	8007ac6 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3308      	adds	r3, #8
 8007afe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b02:	e853 3f00 	ldrex	r3, [r3]
 8007b06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b0a:	f023 0301 	bic.w	r3, r3, #1
 8007b0e:	667b      	str	r3, [r7, #100]	; 0x64
 8007b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3308      	adds	r3, #8
 8007b16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b18:	647a      	str	r2, [r7, #68]	; 0x44
 8007b1a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b20:	e841 2300 	strex	r3, r2, [r1]
 8007b24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1e5      	bne.n	8007af8 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3308      	adds	r3, #8
 8007b32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	623b      	str	r3, [r7, #32]
   return(result);
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b42:	663b      	str	r3, [r7, #96]	; 0x60
 8007b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3308      	adds	r3, #8
 8007b4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b4c:	633a      	str	r2, [r7, #48]	; 0x30
 8007b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b54:	e841 2300 	strex	r3, r2, [r1]
 8007b58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e5      	bne.n	8007b2c <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b62:	2220      	movs	r2, #32
 8007b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d118      	bne.n	8007ba2 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f023 0310 	bic.w	r3, r3, #16
 8007b84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b8e:	61fb      	str	r3, [r7, #28]
 8007b90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	69b9      	ldr	r1, [r7, #24]
 8007b94:	69fa      	ldr	r2, [r7, #28]
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	617b      	str	r3, [r7, #20]
   return(result);
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e6      	bne.n	8007b70 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d107      	bne.n	8007bc0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007bba:	f7ff faff 	bl	80071bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bbe:	e002      	b.n	8007bc6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007bc0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007bc2:	f7ff fadd 	bl	8007180 <HAL_UART_RxCpltCallback>
}
 8007bc6:	bf00      	nop
 8007bc8:	3770      	adds	r7, #112	; 0x70
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b084      	sub	sp, #16
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d109      	bne.n	8007bfe <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007bf0:	085b      	lsrs	r3, r3, #1
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7ff fae0 	bl	80071bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bfc:	e002      	b.n	8007c04 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f7ff fac8 	bl	8007194 <HAL_UART_RxHalfCpltCallback>
}
 8007c04:	bf00      	nop
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c1e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c32:	2b80      	cmp	r3, #128	; 0x80
 8007c34:	d109      	bne.n	8007c4a <UART_DMAError+0x3e>
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	2b21      	cmp	r3, #33	; 0x21
 8007c3a:	d106      	bne.n	8007c4a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007c44:	6978      	ldr	r0, [r7, #20]
 8007c46:	f7ff fe4d 	bl	80078e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c54:	2b40      	cmp	r3, #64	; 0x40
 8007c56:	d109      	bne.n	8007c6c <UART_DMAError+0x60>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b22      	cmp	r3, #34	; 0x22
 8007c5c:	d106      	bne.n	8007c6c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007c66:	6978      	ldr	r0, [r7, #20]
 8007c68:	f7ff fe62 	bl	8007930 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c72:	f043 0210 	orr.w	r2, r3, #16
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c7c:	6978      	ldr	r0, [r7, #20]
 8007c7e:	f7ff fa93 	bl	80071a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c82:	bf00      	nop
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b084      	sub	sp, #16
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f7ff fa7d 	bl	80071a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cae:	bf00      	nop
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b088      	sub	sp, #32
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd2:	61fb      	str	r3, [r7, #28]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	61bb      	str	r3, [r7, #24]
 8007cde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce0:	6979      	ldr	r1, [r7, #20]
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	e841 2300 	strex	r3, r2, [r1]
 8007ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1e6      	bne.n	8007cbe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7f9 fd0b 	bl	8001718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d02:	bf00      	nop
 8007d04:	3720      	adds	r7, #32
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d12:	bf00      	nop
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
	...

08007d20 <__errno>:
 8007d20:	4b01      	ldr	r3, [pc, #4]	; (8007d28 <__errno+0x8>)
 8007d22:	6818      	ldr	r0, [r3, #0]
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	2000002c 	.word	0x2000002c

08007d2c <__libc_init_array>:
 8007d2c:	b570      	push	{r4, r5, r6, lr}
 8007d2e:	4d0d      	ldr	r5, [pc, #52]	; (8007d64 <__libc_init_array+0x38>)
 8007d30:	4c0d      	ldr	r4, [pc, #52]	; (8007d68 <__libc_init_array+0x3c>)
 8007d32:	1b64      	subs	r4, r4, r5
 8007d34:	10a4      	asrs	r4, r4, #2
 8007d36:	2600      	movs	r6, #0
 8007d38:	42a6      	cmp	r6, r4
 8007d3a:	d109      	bne.n	8007d50 <__libc_init_array+0x24>
 8007d3c:	4d0b      	ldr	r5, [pc, #44]	; (8007d6c <__libc_init_array+0x40>)
 8007d3e:	4c0c      	ldr	r4, [pc, #48]	; (8007d70 <__libc_init_array+0x44>)
 8007d40:	f001 fa78 	bl	8009234 <_init>
 8007d44:	1b64      	subs	r4, r4, r5
 8007d46:	10a4      	asrs	r4, r4, #2
 8007d48:	2600      	movs	r6, #0
 8007d4a:	42a6      	cmp	r6, r4
 8007d4c:	d105      	bne.n	8007d5a <__libc_init_array+0x2e>
 8007d4e:	bd70      	pop	{r4, r5, r6, pc}
 8007d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d54:	4798      	blx	r3
 8007d56:	3601      	adds	r6, #1
 8007d58:	e7ee      	b.n	8007d38 <__libc_init_array+0xc>
 8007d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d5e:	4798      	blx	r3
 8007d60:	3601      	adds	r6, #1
 8007d62:	e7f2      	b.n	8007d4a <__libc_init_array+0x1e>
 8007d64:	080096a8 	.word	0x080096a8
 8007d68:	080096a8 	.word	0x080096a8
 8007d6c:	080096a8 	.word	0x080096a8
 8007d70:	080096ac 	.word	0x080096ac

08007d74 <memset>:
 8007d74:	4402      	add	r2, r0
 8007d76:	4603      	mov	r3, r0
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d100      	bne.n	8007d7e <memset+0xa>
 8007d7c:	4770      	bx	lr
 8007d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d82:	e7f9      	b.n	8007d78 <memset+0x4>

08007d84 <siprintf>:
 8007d84:	b40e      	push	{r1, r2, r3}
 8007d86:	b500      	push	{lr}
 8007d88:	b09c      	sub	sp, #112	; 0x70
 8007d8a:	ab1d      	add	r3, sp, #116	; 0x74
 8007d8c:	9002      	str	r0, [sp, #8]
 8007d8e:	9006      	str	r0, [sp, #24]
 8007d90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d94:	4809      	ldr	r0, [pc, #36]	; (8007dbc <siprintf+0x38>)
 8007d96:	9107      	str	r1, [sp, #28]
 8007d98:	9104      	str	r1, [sp, #16]
 8007d9a:	4909      	ldr	r1, [pc, #36]	; (8007dc0 <siprintf+0x3c>)
 8007d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007da0:	9105      	str	r1, [sp, #20]
 8007da2:	6800      	ldr	r0, [r0, #0]
 8007da4:	9301      	str	r3, [sp, #4]
 8007da6:	a902      	add	r1, sp, #8
 8007da8:	f000 f868 	bl	8007e7c <_svfiprintf_r>
 8007dac:	9b02      	ldr	r3, [sp, #8]
 8007dae:	2200      	movs	r2, #0
 8007db0:	701a      	strb	r2, [r3, #0]
 8007db2:	b01c      	add	sp, #112	; 0x70
 8007db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007db8:	b003      	add	sp, #12
 8007dba:	4770      	bx	lr
 8007dbc:	2000002c 	.word	0x2000002c
 8007dc0:	ffff0208 	.word	0xffff0208

08007dc4 <__ssputs_r>:
 8007dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc8:	688e      	ldr	r6, [r1, #8]
 8007dca:	429e      	cmp	r6, r3
 8007dcc:	4682      	mov	sl, r0
 8007dce:	460c      	mov	r4, r1
 8007dd0:	4690      	mov	r8, r2
 8007dd2:	461f      	mov	r7, r3
 8007dd4:	d838      	bhi.n	8007e48 <__ssputs_r+0x84>
 8007dd6:	898a      	ldrh	r2, [r1, #12]
 8007dd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ddc:	d032      	beq.n	8007e44 <__ssputs_r+0x80>
 8007dde:	6825      	ldr	r5, [r4, #0]
 8007de0:	6909      	ldr	r1, [r1, #16]
 8007de2:	eba5 0901 	sub.w	r9, r5, r1
 8007de6:	6965      	ldr	r5, [r4, #20]
 8007de8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007df0:	3301      	adds	r3, #1
 8007df2:	444b      	add	r3, r9
 8007df4:	106d      	asrs	r5, r5, #1
 8007df6:	429d      	cmp	r5, r3
 8007df8:	bf38      	it	cc
 8007dfa:	461d      	movcc	r5, r3
 8007dfc:	0553      	lsls	r3, r2, #21
 8007dfe:	d531      	bpl.n	8007e64 <__ssputs_r+0xa0>
 8007e00:	4629      	mov	r1, r5
 8007e02:	f000 fb63 	bl	80084cc <_malloc_r>
 8007e06:	4606      	mov	r6, r0
 8007e08:	b950      	cbnz	r0, 8007e20 <__ssputs_r+0x5c>
 8007e0a:	230c      	movs	r3, #12
 8007e0c:	f8ca 3000 	str.w	r3, [sl]
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e16:	81a3      	strh	r3, [r4, #12]
 8007e18:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e20:	6921      	ldr	r1, [r4, #16]
 8007e22:	464a      	mov	r2, r9
 8007e24:	f000 fabe 	bl	80083a4 <memcpy>
 8007e28:	89a3      	ldrh	r3, [r4, #12]
 8007e2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e32:	81a3      	strh	r3, [r4, #12]
 8007e34:	6126      	str	r6, [r4, #16]
 8007e36:	6165      	str	r5, [r4, #20]
 8007e38:	444e      	add	r6, r9
 8007e3a:	eba5 0509 	sub.w	r5, r5, r9
 8007e3e:	6026      	str	r6, [r4, #0]
 8007e40:	60a5      	str	r5, [r4, #8]
 8007e42:	463e      	mov	r6, r7
 8007e44:	42be      	cmp	r6, r7
 8007e46:	d900      	bls.n	8007e4a <__ssputs_r+0x86>
 8007e48:	463e      	mov	r6, r7
 8007e4a:	6820      	ldr	r0, [r4, #0]
 8007e4c:	4632      	mov	r2, r6
 8007e4e:	4641      	mov	r1, r8
 8007e50:	f000 fab6 	bl	80083c0 <memmove>
 8007e54:	68a3      	ldr	r3, [r4, #8]
 8007e56:	1b9b      	subs	r3, r3, r6
 8007e58:	60a3      	str	r3, [r4, #8]
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	4433      	add	r3, r6
 8007e5e:	6023      	str	r3, [r4, #0]
 8007e60:	2000      	movs	r0, #0
 8007e62:	e7db      	b.n	8007e1c <__ssputs_r+0x58>
 8007e64:	462a      	mov	r2, r5
 8007e66:	f000 fba5 	bl	80085b4 <_realloc_r>
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d1e1      	bne.n	8007e34 <__ssputs_r+0x70>
 8007e70:	6921      	ldr	r1, [r4, #16]
 8007e72:	4650      	mov	r0, sl
 8007e74:	f000 fabe 	bl	80083f4 <_free_r>
 8007e78:	e7c7      	b.n	8007e0a <__ssputs_r+0x46>
	...

08007e7c <_svfiprintf_r>:
 8007e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e80:	4698      	mov	r8, r3
 8007e82:	898b      	ldrh	r3, [r1, #12]
 8007e84:	061b      	lsls	r3, r3, #24
 8007e86:	b09d      	sub	sp, #116	; 0x74
 8007e88:	4607      	mov	r7, r0
 8007e8a:	460d      	mov	r5, r1
 8007e8c:	4614      	mov	r4, r2
 8007e8e:	d50e      	bpl.n	8007eae <_svfiprintf_r+0x32>
 8007e90:	690b      	ldr	r3, [r1, #16]
 8007e92:	b963      	cbnz	r3, 8007eae <_svfiprintf_r+0x32>
 8007e94:	2140      	movs	r1, #64	; 0x40
 8007e96:	f000 fb19 	bl	80084cc <_malloc_r>
 8007e9a:	6028      	str	r0, [r5, #0]
 8007e9c:	6128      	str	r0, [r5, #16]
 8007e9e:	b920      	cbnz	r0, 8007eaa <_svfiprintf_r+0x2e>
 8007ea0:	230c      	movs	r3, #12
 8007ea2:	603b      	str	r3, [r7, #0]
 8007ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea8:	e0d1      	b.n	800804e <_svfiprintf_r+0x1d2>
 8007eaa:	2340      	movs	r3, #64	; 0x40
 8007eac:	616b      	str	r3, [r5, #20]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb2:	2320      	movs	r3, #32
 8007eb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007eb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ebc:	2330      	movs	r3, #48	; 0x30
 8007ebe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008068 <_svfiprintf_r+0x1ec>
 8007ec2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ec6:	f04f 0901 	mov.w	r9, #1
 8007eca:	4623      	mov	r3, r4
 8007ecc:	469a      	mov	sl, r3
 8007ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ed2:	b10a      	cbz	r2, 8007ed8 <_svfiprintf_r+0x5c>
 8007ed4:	2a25      	cmp	r2, #37	; 0x25
 8007ed6:	d1f9      	bne.n	8007ecc <_svfiprintf_r+0x50>
 8007ed8:	ebba 0b04 	subs.w	fp, sl, r4
 8007edc:	d00b      	beq.n	8007ef6 <_svfiprintf_r+0x7a>
 8007ede:	465b      	mov	r3, fp
 8007ee0:	4622      	mov	r2, r4
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	4638      	mov	r0, r7
 8007ee6:	f7ff ff6d 	bl	8007dc4 <__ssputs_r>
 8007eea:	3001      	adds	r0, #1
 8007eec:	f000 80aa 	beq.w	8008044 <_svfiprintf_r+0x1c8>
 8007ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ef2:	445a      	add	r2, fp
 8007ef4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 80a2 	beq.w	8008044 <_svfiprintf_r+0x1c8>
 8007f00:	2300      	movs	r3, #0
 8007f02:	f04f 32ff 	mov.w	r2, #4294967295
 8007f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f0a:	f10a 0a01 	add.w	sl, sl, #1
 8007f0e:	9304      	str	r3, [sp, #16]
 8007f10:	9307      	str	r3, [sp, #28]
 8007f12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f16:	931a      	str	r3, [sp, #104]	; 0x68
 8007f18:	4654      	mov	r4, sl
 8007f1a:	2205      	movs	r2, #5
 8007f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f20:	4851      	ldr	r0, [pc, #324]	; (8008068 <_svfiprintf_r+0x1ec>)
 8007f22:	f7f8 f95d 	bl	80001e0 <memchr>
 8007f26:	9a04      	ldr	r2, [sp, #16]
 8007f28:	b9d8      	cbnz	r0, 8007f62 <_svfiprintf_r+0xe6>
 8007f2a:	06d0      	lsls	r0, r2, #27
 8007f2c:	bf44      	itt	mi
 8007f2e:	2320      	movmi	r3, #32
 8007f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f34:	0711      	lsls	r1, r2, #28
 8007f36:	bf44      	itt	mi
 8007f38:	232b      	movmi	r3, #43	; 0x2b
 8007f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8007f42:	2b2a      	cmp	r3, #42	; 0x2a
 8007f44:	d015      	beq.n	8007f72 <_svfiprintf_r+0xf6>
 8007f46:	9a07      	ldr	r2, [sp, #28]
 8007f48:	4654      	mov	r4, sl
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	f04f 0c0a 	mov.w	ip, #10
 8007f50:	4621      	mov	r1, r4
 8007f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f56:	3b30      	subs	r3, #48	; 0x30
 8007f58:	2b09      	cmp	r3, #9
 8007f5a:	d94e      	bls.n	8007ffa <_svfiprintf_r+0x17e>
 8007f5c:	b1b0      	cbz	r0, 8007f8c <_svfiprintf_r+0x110>
 8007f5e:	9207      	str	r2, [sp, #28]
 8007f60:	e014      	b.n	8007f8c <_svfiprintf_r+0x110>
 8007f62:	eba0 0308 	sub.w	r3, r0, r8
 8007f66:	fa09 f303 	lsl.w	r3, r9, r3
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	9304      	str	r3, [sp, #16]
 8007f6e:	46a2      	mov	sl, r4
 8007f70:	e7d2      	b.n	8007f18 <_svfiprintf_r+0x9c>
 8007f72:	9b03      	ldr	r3, [sp, #12]
 8007f74:	1d19      	adds	r1, r3, #4
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	9103      	str	r1, [sp, #12]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	bfbb      	ittet	lt
 8007f7e:	425b      	neglt	r3, r3
 8007f80:	f042 0202 	orrlt.w	r2, r2, #2
 8007f84:	9307      	strge	r3, [sp, #28]
 8007f86:	9307      	strlt	r3, [sp, #28]
 8007f88:	bfb8      	it	lt
 8007f8a:	9204      	strlt	r2, [sp, #16]
 8007f8c:	7823      	ldrb	r3, [r4, #0]
 8007f8e:	2b2e      	cmp	r3, #46	; 0x2e
 8007f90:	d10c      	bne.n	8007fac <_svfiprintf_r+0x130>
 8007f92:	7863      	ldrb	r3, [r4, #1]
 8007f94:	2b2a      	cmp	r3, #42	; 0x2a
 8007f96:	d135      	bne.n	8008004 <_svfiprintf_r+0x188>
 8007f98:	9b03      	ldr	r3, [sp, #12]
 8007f9a:	1d1a      	adds	r2, r3, #4
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	9203      	str	r2, [sp, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	bfb8      	it	lt
 8007fa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fa8:	3402      	adds	r4, #2
 8007faa:	9305      	str	r3, [sp, #20]
 8007fac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008078 <_svfiprintf_r+0x1fc>
 8007fb0:	7821      	ldrb	r1, [r4, #0]
 8007fb2:	2203      	movs	r2, #3
 8007fb4:	4650      	mov	r0, sl
 8007fb6:	f7f8 f913 	bl	80001e0 <memchr>
 8007fba:	b140      	cbz	r0, 8007fce <_svfiprintf_r+0x152>
 8007fbc:	2340      	movs	r3, #64	; 0x40
 8007fbe:	eba0 000a 	sub.w	r0, r0, sl
 8007fc2:	fa03 f000 	lsl.w	r0, r3, r0
 8007fc6:	9b04      	ldr	r3, [sp, #16]
 8007fc8:	4303      	orrs	r3, r0
 8007fca:	3401      	adds	r4, #1
 8007fcc:	9304      	str	r3, [sp, #16]
 8007fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd2:	4826      	ldr	r0, [pc, #152]	; (800806c <_svfiprintf_r+0x1f0>)
 8007fd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fd8:	2206      	movs	r2, #6
 8007fda:	f7f8 f901 	bl	80001e0 <memchr>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d038      	beq.n	8008054 <_svfiprintf_r+0x1d8>
 8007fe2:	4b23      	ldr	r3, [pc, #140]	; (8008070 <_svfiprintf_r+0x1f4>)
 8007fe4:	bb1b      	cbnz	r3, 800802e <_svfiprintf_r+0x1b2>
 8007fe6:	9b03      	ldr	r3, [sp, #12]
 8007fe8:	3307      	adds	r3, #7
 8007fea:	f023 0307 	bic.w	r3, r3, #7
 8007fee:	3308      	adds	r3, #8
 8007ff0:	9303      	str	r3, [sp, #12]
 8007ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff4:	4433      	add	r3, r6
 8007ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ff8:	e767      	b.n	8007eca <_svfiprintf_r+0x4e>
 8007ffa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ffe:	460c      	mov	r4, r1
 8008000:	2001      	movs	r0, #1
 8008002:	e7a5      	b.n	8007f50 <_svfiprintf_r+0xd4>
 8008004:	2300      	movs	r3, #0
 8008006:	3401      	adds	r4, #1
 8008008:	9305      	str	r3, [sp, #20]
 800800a:	4619      	mov	r1, r3
 800800c:	f04f 0c0a 	mov.w	ip, #10
 8008010:	4620      	mov	r0, r4
 8008012:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008016:	3a30      	subs	r2, #48	; 0x30
 8008018:	2a09      	cmp	r2, #9
 800801a:	d903      	bls.n	8008024 <_svfiprintf_r+0x1a8>
 800801c:	2b00      	cmp	r3, #0
 800801e:	d0c5      	beq.n	8007fac <_svfiprintf_r+0x130>
 8008020:	9105      	str	r1, [sp, #20]
 8008022:	e7c3      	b.n	8007fac <_svfiprintf_r+0x130>
 8008024:	fb0c 2101 	mla	r1, ip, r1, r2
 8008028:	4604      	mov	r4, r0
 800802a:	2301      	movs	r3, #1
 800802c:	e7f0      	b.n	8008010 <_svfiprintf_r+0x194>
 800802e:	ab03      	add	r3, sp, #12
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	462a      	mov	r2, r5
 8008034:	4b0f      	ldr	r3, [pc, #60]	; (8008074 <_svfiprintf_r+0x1f8>)
 8008036:	a904      	add	r1, sp, #16
 8008038:	4638      	mov	r0, r7
 800803a:	f3af 8000 	nop.w
 800803e:	1c42      	adds	r2, r0, #1
 8008040:	4606      	mov	r6, r0
 8008042:	d1d6      	bne.n	8007ff2 <_svfiprintf_r+0x176>
 8008044:	89ab      	ldrh	r3, [r5, #12]
 8008046:	065b      	lsls	r3, r3, #25
 8008048:	f53f af2c 	bmi.w	8007ea4 <_svfiprintf_r+0x28>
 800804c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800804e:	b01d      	add	sp, #116	; 0x74
 8008050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008054:	ab03      	add	r3, sp, #12
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	462a      	mov	r2, r5
 800805a:	4b06      	ldr	r3, [pc, #24]	; (8008074 <_svfiprintf_r+0x1f8>)
 800805c:	a904      	add	r1, sp, #16
 800805e:	4638      	mov	r0, r7
 8008060:	f000 f87a 	bl	8008158 <_printf_i>
 8008064:	e7eb      	b.n	800803e <_svfiprintf_r+0x1c2>
 8008066:	bf00      	nop
 8008068:	08009290 	.word	0x08009290
 800806c:	0800929a 	.word	0x0800929a
 8008070:	00000000 	.word	0x00000000
 8008074:	08007dc5 	.word	0x08007dc5
 8008078:	08009296 	.word	0x08009296

0800807c <_printf_common>:
 800807c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008080:	4616      	mov	r6, r2
 8008082:	4699      	mov	r9, r3
 8008084:	688a      	ldr	r2, [r1, #8]
 8008086:	690b      	ldr	r3, [r1, #16]
 8008088:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800808c:	4293      	cmp	r3, r2
 800808e:	bfb8      	it	lt
 8008090:	4613      	movlt	r3, r2
 8008092:	6033      	str	r3, [r6, #0]
 8008094:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008098:	4607      	mov	r7, r0
 800809a:	460c      	mov	r4, r1
 800809c:	b10a      	cbz	r2, 80080a2 <_printf_common+0x26>
 800809e:	3301      	adds	r3, #1
 80080a0:	6033      	str	r3, [r6, #0]
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	0699      	lsls	r1, r3, #26
 80080a6:	bf42      	ittt	mi
 80080a8:	6833      	ldrmi	r3, [r6, #0]
 80080aa:	3302      	addmi	r3, #2
 80080ac:	6033      	strmi	r3, [r6, #0]
 80080ae:	6825      	ldr	r5, [r4, #0]
 80080b0:	f015 0506 	ands.w	r5, r5, #6
 80080b4:	d106      	bne.n	80080c4 <_printf_common+0x48>
 80080b6:	f104 0a19 	add.w	sl, r4, #25
 80080ba:	68e3      	ldr	r3, [r4, #12]
 80080bc:	6832      	ldr	r2, [r6, #0]
 80080be:	1a9b      	subs	r3, r3, r2
 80080c0:	42ab      	cmp	r3, r5
 80080c2:	dc26      	bgt.n	8008112 <_printf_common+0x96>
 80080c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080c8:	1e13      	subs	r3, r2, #0
 80080ca:	6822      	ldr	r2, [r4, #0]
 80080cc:	bf18      	it	ne
 80080ce:	2301      	movne	r3, #1
 80080d0:	0692      	lsls	r2, r2, #26
 80080d2:	d42b      	bmi.n	800812c <_printf_common+0xb0>
 80080d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080d8:	4649      	mov	r1, r9
 80080da:	4638      	mov	r0, r7
 80080dc:	47c0      	blx	r8
 80080de:	3001      	adds	r0, #1
 80080e0:	d01e      	beq.n	8008120 <_printf_common+0xa4>
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	68e5      	ldr	r5, [r4, #12]
 80080e6:	6832      	ldr	r2, [r6, #0]
 80080e8:	f003 0306 	and.w	r3, r3, #6
 80080ec:	2b04      	cmp	r3, #4
 80080ee:	bf08      	it	eq
 80080f0:	1aad      	subeq	r5, r5, r2
 80080f2:	68a3      	ldr	r3, [r4, #8]
 80080f4:	6922      	ldr	r2, [r4, #16]
 80080f6:	bf0c      	ite	eq
 80080f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080fc:	2500      	movne	r5, #0
 80080fe:	4293      	cmp	r3, r2
 8008100:	bfc4      	itt	gt
 8008102:	1a9b      	subgt	r3, r3, r2
 8008104:	18ed      	addgt	r5, r5, r3
 8008106:	2600      	movs	r6, #0
 8008108:	341a      	adds	r4, #26
 800810a:	42b5      	cmp	r5, r6
 800810c:	d11a      	bne.n	8008144 <_printf_common+0xc8>
 800810e:	2000      	movs	r0, #0
 8008110:	e008      	b.n	8008124 <_printf_common+0xa8>
 8008112:	2301      	movs	r3, #1
 8008114:	4652      	mov	r2, sl
 8008116:	4649      	mov	r1, r9
 8008118:	4638      	mov	r0, r7
 800811a:	47c0      	blx	r8
 800811c:	3001      	adds	r0, #1
 800811e:	d103      	bne.n	8008128 <_printf_common+0xac>
 8008120:	f04f 30ff 	mov.w	r0, #4294967295
 8008124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008128:	3501      	adds	r5, #1
 800812a:	e7c6      	b.n	80080ba <_printf_common+0x3e>
 800812c:	18e1      	adds	r1, r4, r3
 800812e:	1c5a      	adds	r2, r3, #1
 8008130:	2030      	movs	r0, #48	; 0x30
 8008132:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008136:	4422      	add	r2, r4
 8008138:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800813c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008140:	3302      	adds	r3, #2
 8008142:	e7c7      	b.n	80080d4 <_printf_common+0x58>
 8008144:	2301      	movs	r3, #1
 8008146:	4622      	mov	r2, r4
 8008148:	4649      	mov	r1, r9
 800814a:	4638      	mov	r0, r7
 800814c:	47c0      	blx	r8
 800814e:	3001      	adds	r0, #1
 8008150:	d0e6      	beq.n	8008120 <_printf_common+0xa4>
 8008152:	3601      	adds	r6, #1
 8008154:	e7d9      	b.n	800810a <_printf_common+0x8e>
	...

08008158 <_printf_i>:
 8008158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800815c:	7e0f      	ldrb	r7, [r1, #24]
 800815e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008160:	2f78      	cmp	r7, #120	; 0x78
 8008162:	4691      	mov	r9, r2
 8008164:	4680      	mov	r8, r0
 8008166:	460c      	mov	r4, r1
 8008168:	469a      	mov	sl, r3
 800816a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800816e:	d807      	bhi.n	8008180 <_printf_i+0x28>
 8008170:	2f62      	cmp	r7, #98	; 0x62
 8008172:	d80a      	bhi.n	800818a <_printf_i+0x32>
 8008174:	2f00      	cmp	r7, #0
 8008176:	f000 80d8 	beq.w	800832a <_printf_i+0x1d2>
 800817a:	2f58      	cmp	r7, #88	; 0x58
 800817c:	f000 80a3 	beq.w	80082c6 <_printf_i+0x16e>
 8008180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008184:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008188:	e03a      	b.n	8008200 <_printf_i+0xa8>
 800818a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800818e:	2b15      	cmp	r3, #21
 8008190:	d8f6      	bhi.n	8008180 <_printf_i+0x28>
 8008192:	a101      	add	r1, pc, #4	; (adr r1, 8008198 <_printf_i+0x40>)
 8008194:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008198:	080081f1 	.word	0x080081f1
 800819c:	08008205 	.word	0x08008205
 80081a0:	08008181 	.word	0x08008181
 80081a4:	08008181 	.word	0x08008181
 80081a8:	08008181 	.word	0x08008181
 80081ac:	08008181 	.word	0x08008181
 80081b0:	08008205 	.word	0x08008205
 80081b4:	08008181 	.word	0x08008181
 80081b8:	08008181 	.word	0x08008181
 80081bc:	08008181 	.word	0x08008181
 80081c0:	08008181 	.word	0x08008181
 80081c4:	08008311 	.word	0x08008311
 80081c8:	08008235 	.word	0x08008235
 80081cc:	080082f3 	.word	0x080082f3
 80081d0:	08008181 	.word	0x08008181
 80081d4:	08008181 	.word	0x08008181
 80081d8:	08008333 	.word	0x08008333
 80081dc:	08008181 	.word	0x08008181
 80081e0:	08008235 	.word	0x08008235
 80081e4:	08008181 	.word	0x08008181
 80081e8:	08008181 	.word	0x08008181
 80081ec:	080082fb 	.word	0x080082fb
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	1d1a      	adds	r2, r3, #4
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	602a      	str	r2, [r5, #0]
 80081f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008200:	2301      	movs	r3, #1
 8008202:	e0a3      	b.n	800834c <_printf_i+0x1f4>
 8008204:	6820      	ldr	r0, [r4, #0]
 8008206:	6829      	ldr	r1, [r5, #0]
 8008208:	0606      	lsls	r6, r0, #24
 800820a:	f101 0304 	add.w	r3, r1, #4
 800820e:	d50a      	bpl.n	8008226 <_printf_i+0xce>
 8008210:	680e      	ldr	r6, [r1, #0]
 8008212:	602b      	str	r3, [r5, #0]
 8008214:	2e00      	cmp	r6, #0
 8008216:	da03      	bge.n	8008220 <_printf_i+0xc8>
 8008218:	232d      	movs	r3, #45	; 0x2d
 800821a:	4276      	negs	r6, r6
 800821c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008220:	485e      	ldr	r0, [pc, #376]	; (800839c <_printf_i+0x244>)
 8008222:	230a      	movs	r3, #10
 8008224:	e019      	b.n	800825a <_printf_i+0x102>
 8008226:	680e      	ldr	r6, [r1, #0]
 8008228:	602b      	str	r3, [r5, #0]
 800822a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800822e:	bf18      	it	ne
 8008230:	b236      	sxthne	r6, r6
 8008232:	e7ef      	b.n	8008214 <_printf_i+0xbc>
 8008234:	682b      	ldr	r3, [r5, #0]
 8008236:	6820      	ldr	r0, [r4, #0]
 8008238:	1d19      	adds	r1, r3, #4
 800823a:	6029      	str	r1, [r5, #0]
 800823c:	0601      	lsls	r1, r0, #24
 800823e:	d501      	bpl.n	8008244 <_printf_i+0xec>
 8008240:	681e      	ldr	r6, [r3, #0]
 8008242:	e002      	b.n	800824a <_printf_i+0xf2>
 8008244:	0646      	lsls	r6, r0, #25
 8008246:	d5fb      	bpl.n	8008240 <_printf_i+0xe8>
 8008248:	881e      	ldrh	r6, [r3, #0]
 800824a:	4854      	ldr	r0, [pc, #336]	; (800839c <_printf_i+0x244>)
 800824c:	2f6f      	cmp	r7, #111	; 0x6f
 800824e:	bf0c      	ite	eq
 8008250:	2308      	moveq	r3, #8
 8008252:	230a      	movne	r3, #10
 8008254:	2100      	movs	r1, #0
 8008256:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800825a:	6865      	ldr	r5, [r4, #4]
 800825c:	60a5      	str	r5, [r4, #8]
 800825e:	2d00      	cmp	r5, #0
 8008260:	bfa2      	ittt	ge
 8008262:	6821      	ldrge	r1, [r4, #0]
 8008264:	f021 0104 	bicge.w	r1, r1, #4
 8008268:	6021      	strge	r1, [r4, #0]
 800826a:	b90e      	cbnz	r6, 8008270 <_printf_i+0x118>
 800826c:	2d00      	cmp	r5, #0
 800826e:	d04d      	beq.n	800830c <_printf_i+0x1b4>
 8008270:	4615      	mov	r5, r2
 8008272:	fbb6 f1f3 	udiv	r1, r6, r3
 8008276:	fb03 6711 	mls	r7, r3, r1, r6
 800827a:	5dc7      	ldrb	r7, [r0, r7]
 800827c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008280:	4637      	mov	r7, r6
 8008282:	42bb      	cmp	r3, r7
 8008284:	460e      	mov	r6, r1
 8008286:	d9f4      	bls.n	8008272 <_printf_i+0x11a>
 8008288:	2b08      	cmp	r3, #8
 800828a:	d10b      	bne.n	80082a4 <_printf_i+0x14c>
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	07de      	lsls	r6, r3, #31
 8008290:	d508      	bpl.n	80082a4 <_printf_i+0x14c>
 8008292:	6923      	ldr	r3, [r4, #16]
 8008294:	6861      	ldr	r1, [r4, #4]
 8008296:	4299      	cmp	r1, r3
 8008298:	bfde      	ittt	le
 800829a:	2330      	movle	r3, #48	; 0x30
 800829c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082a4:	1b52      	subs	r2, r2, r5
 80082a6:	6122      	str	r2, [r4, #16]
 80082a8:	f8cd a000 	str.w	sl, [sp]
 80082ac:	464b      	mov	r3, r9
 80082ae:	aa03      	add	r2, sp, #12
 80082b0:	4621      	mov	r1, r4
 80082b2:	4640      	mov	r0, r8
 80082b4:	f7ff fee2 	bl	800807c <_printf_common>
 80082b8:	3001      	adds	r0, #1
 80082ba:	d14c      	bne.n	8008356 <_printf_i+0x1fe>
 80082bc:	f04f 30ff 	mov.w	r0, #4294967295
 80082c0:	b004      	add	sp, #16
 80082c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c6:	4835      	ldr	r0, [pc, #212]	; (800839c <_printf_i+0x244>)
 80082c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80082cc:	6829      	ldr	r1, [r5, #0]
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80082d4:	6029      	str	r1, [r5, #0]
 80082d6:	061d      	lsls	r5, r3, #24
 80082d8:	d514      	bpl.n	8008304 <_printf_i+0x1ac>
 80082da:	07df      	lsls	r7, r3, #31
 80082dc:	bf44      	itt	mi
 80082de:	f043 0320 	orrmi.w	r3, r3, #32
 80082e2:	6023      	strmi	r3, [r4, #0]
 80082e4:	b91e      	cbnz	r6, 80082ee <_printf_i+0x196>
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	f023 0320 	bic.w	r3, r3, #32
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	2310      	movs	r3, #16
 80082f0:	e7b0      	b.n	8008254 <_printf_i+0xfc>
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	f043 0320 	orr.w	r3, r3, #32
 80082f8:	6023      	str	r3, [r4, #0]
 80082fa:	2378      	movs	r3, #120	; 0x78
 80082fc:	4828      	ldr	r0, [pc, #160]	; (80083a0 <_printf_i+0x248>)
 80082fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008302:	e7e3      	b.n	80082cc <_printf_i+0x174>
 8008304:	0659      	lsls	r1, r3, #25
 8008306:	bf48      	it	mi
 8008308:	b2b6      	uxthmi	r6, r6
 800830a:	e7e6      	b.n	80082da <_printf_i+0x182>
 800830c:	4615      	mov	r5, r2
 800830e:	e7bb      	b.n	8008288 <_printf_i+0x130>
 8008310:	682b      	ldr	r3, [r5, #0]
 8008312:	6826      	ldr	r6, [r4, #0]
 8008314:	6961      	ldr	r1, [r4, #20]
 8008316:	1d18      	adds	r0, r3, #4
 8008318:	6028      	str	r0, [r5, #0]
 800831a:	0635      	lsls	r5, r6, #24
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	d501      	bpl.n	8008324 <_printf_i+0x1cc>
 8008320:	6019      	str	r1, [r3, #0]
 8008322:	e002      	b.n	800832a <_printf_i+0x1d2>
 8008324:	0670      	lsls	r0, r6, #25
 8008326:	d5fb      	bpl.n	8008320 <_printf_i+0x1c8>
 8008328:	8019      	strh	r1, [r3, #0]
 800832a:	2300      	movs	r3, #0
 800832c:	6123      	str	r3, [r4, #16]
 800832e:	4615      	mov	r5, r2
 8008330:	e7ba      	b.n	80082a8 <_printf_i+0x150>
 8008332:	682b      	ldr	r3, [r5, #0]
 8008334:	1d1a      	adds	r2, r3, #4
 8008336:	602a      	str	r2, [r5, #0]
 8008338:	681d      	ldr	r5, [r3, #0]
 800833a:	6862      	ldr	r2, [r4, #4]
 800833c:	2100      	movs	r1, #0
 800833e:	4628      	mov	r0, r5
 8008340:	f7f7 ff4e 	bl	80001e0 <memchr>
 8008344:	b108      	cbz	r0, 800834a <_printf_i+0x1f2>
 8008346:	1b40      	subs	r0, r0, r5
 8008348:	6060      	str	r0, [r4, #4]
 800834a:	6863      	ldr	r3, [r4, #4]
 800834c:	6123      	str	r3, [r4, #16]
 800834e:	2300      	movs	r3, #0
 8008350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008354:	e7a8      	b.n	80082a8 <_printf_i+0x150>
 8008356:	6923      	ldr	r3, [r4, #16]
 8008358:	462a      	mov	r2, r5
 800835a:	4649      	mov	r1, r9
 800835c:	4640      	mov	r0, r8
 800835e:	47d0      	blx	sl
 8008360:	3001      	adds	r0, #1
 8008362:	d0ab      	beq.n	80082bc <_printf_i+0x164>
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	079b      	lsls	r3, r3, #30
 8008368:	d413      	bmi.n	8008392 <_printf_i+0x23a>
 800836a:	68e0      	ldr	r0, [r4, #12]
 800836c:	9b03      	ldr	r3, [sp, #12]
 800836e:	4298      	cmp	r0, r3
 8008370:	bfb8      	it	lt
 8008372:	4618      	movlt	r0, r3
 8008374:	e7a4      	b.n	80082c0 <_printf_i+0x168>
 8008376:	2301      	movs	r3, #1
 8008378:	4632      	mov	r2, r6
 800837a:	4649      	mov	r1, r9
 800837c:	4640      	mov	r0, r8
 800837e:	47d0      	blx	sl
 8008380:	3001      	adds	r0, #1
 8008382:	d09b      	beq.n	80082bc <_printf_i+0x164>
 8008384:	3501      	adds	r5, #1
 8008386:	68e3      	ldr	r3, [r4, #12]
 8008388:	9903      	ldr	r1, [sp, #12]
 800838a:	1a5b      	subs	r3, r3, r1
 800838c:	42ab      	cmp	r3, r5
 800838e:	dcf2      	bgt.n	8008376 <_printf_i+0x21e>
 8008390:	e7eb      	b.n	800836a <_printf_i+0x212>
 8008392:	2500      	movs	r5, #0
 8008394:	f104 0619 	add.w	r6, r4, #25
 8008398:	e7f5      	b.n	8008386 <_printf_i+0x22e>
 800839a:	bf00      	nop
 800839c:	080092a1 	.word	0x080092a1
 80083a0:	080092b2 	.word	0x080092b2

080083a4 <memcpy>:
 80083a4:	440a      	add	r2, r1
 80083a6:	4291      	cmp	r1, r2
 80083a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80083ac:	d100      	bne.n	80083b0 <memcpy+0xc>
 80083ae:	4770      	bx	lr
 80083b0:	b510      	push	{r4, lr}
 80083b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083ba:	4291      	cmp	r1, r2
 80083bc:	d1f9      	bne.n	80083b2 <memcpy+0xe>
 80083be:	bd10      	pop	{r4, pc}

080083c0 <memmove>:
 80083c0:	4288      	cmp	r0, r1
 80083c2:	b510      	push	{r4, lr}
 80083c4:	eb01 0402 	add.w	r4, r1, r2
 80083c8:	d902      	bls.n	80083d0 <memmove+0x10>
 80083ca:	4284      	cmp	r4, r0
 80083cc:	4623      	mov	r3, r4
 80083ce:	d807      	bhi.n	80083e0 <memmove+0x20>
 80083d0:	1e43      	subs	r3, r0, #1
 80083d2:	42a1      	cmp	r1, r4
 80083d4:	d008      	beq.n	80083e8 <memmove+0x28>
 80083d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083de:	e7f8      	b.n	80083d2 <memmove+0x12>
 80083e0:	4402      	add	r2, r0
 80083e2:	4601      	mov	r1, r0
 80083e4:	428a      	cmp	r2, r1
 80083e6:	d100      	bne.n	80083ea <memmove+0x2a>
 80083e8:	bd10      	pop	{r4, pc}
 80083ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083f2:	e7f7      	b.n	80083e4 <memmove+0x24>

080083f4 <_free_r>:
 80083f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083f6:	2900      	cmp	r1, #0
 80083f8:	d044      	beq.n	8008484 <_free_r+0x90>
 80083fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083fe:	9001      	str	r0, [sp, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	f1a1 0404 	sub.w	r4, r1, #4
 8008406:	bfb8      	it	lt
 8008408:	18e4      	addlt	r4, r4, r3
 800840a:	f000 f913 	bl	8008634 <__malloc_lock>
 800840e:	4a1e      	ldr	r2, [pc, #120]	; (8008488 <_free_r+0x94>)
 8008410:	9801      	ldr	r0, [sp, #4]
 8008412:	6813      	ldr	r3, [r2, #0]
 8008414:	b933      	cbnz	r3, 8008424 <_free_r+0x30>
 8008416:	6063      	str	r3, [r4, #4]
 8008418:	6014      	str	r4, [r2, #0]
 800841a:	b003      	add	sp, #12
 800841c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008420:	f000 b90e 	b.w	8008640 <__malloc_unlock>
 8008424:	42a3      	cmp	r3, r4
 8008426:	d908      	bls.n	800843a <_free_r+0x46>
 8008428:	6825      	ldr	r5, [r4, #0]
 800842a:	1961      	adds	r1, r4, r5
 800842c:	428b      	cmp	r3, r1
 800842e:	bf01      	itttt	eq
 8008430:	6819      	ldreq	r1, [r3, #0]
 8008432:	685b      	ldreq	r3, [r3, #4]
 8008434:	1949      	addeq	r1, r1, r5
 8008436:	6021      	streq	r1, [r4, #0]
 8008438:	e7ed      	b.n	8008416 <_free_r+0x22>
 800843a:	461a      	mov	r2, r3
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	b10b      	cbz	r3, 8008444 <_free_r+0x50>
 8008440:	42a3      	cmp	r3, r4
 8008442:	d9fa      	bls.n	800843a <_free_r+0x46>
 8008444:	6811      	ldr	r1, [r2, #0]
 8008446:	1855      	adds	r5, r2, r1
 8008448:	42a5      	cmp	r5, r4
 800844a:	d10b      	bne.n	8008464 <_free_r+0x70>
 800844c:	6824      	ldr	r4, [r4, #0]
 800844e:	4421      	add	r1, r4
 8008450:	1854      	adds	r4, r2, r1
 8008452:	42a3      	cmp	r3, r4
 8008454:	6011      	str	r1, [r2, #0]
 8008456:	d1e0      	bne.n	800841a <_free_r+0x26>
 8008458:	681c      	ldr	r4, [r3, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	6053      	str	r3, [r2, #4]
 800845e:	4421      	add	r1, r4
 8008460:	6011      	str	r1, [r2, #0]
 8008462:	e7da      	b.n	800841a <_free_r+0x26>
 8008464:	d902      	bls.n	800846c <_free_r+0x78>
 8008466:	230c      	movs	r3, #12
 8008468:	6003      	str	r3, [r0, #0]
 800846a:	e7d6      	b.n	800841a <_free_r+0x26>
 800846c:	6825      	ldr	r5, [r4, #0]
 800846e:	1961      	adds	r1, r4, r5
 8008470:	428b      	cmp	r3, r1
 8008472:	bf04      	itt	eq
 8008474:	6819      	ldreq	r1, [r3, #0]
 8008476:	685b      	ldreq	r3, [r3, #4]
 8008478:	6063      	str	r3, [r4, #4]
 800847a:	bf04      	itt	eq
 800847c:	1949      	addeq	r1, r1, r5
 800847e:	6021      	streq	r1, [r4, #0]
 8008480:	6054      	str	r4, [r2, #4]
 8008482:	e7ca      	b.n	800841a <_free_r+0x26>
 8008484:	b003      	add	sp, #12
 8008486:	bd30      	pop	{r4, r5, pc}
 8008488:	20000d00 	.word	0x20000d00

0800848c <sbrk_aligned>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	4e0e      	ldr	r6, [pc, #56]	; (80084c8 <sbrk_aligned+0x3c>)
 8008490:	460c      	mov	r4, r1
 8008492:	6831      	ldr	r1, [r6, #0]
 8008494:	4605      	mov	r5, r0
 8008496:	b911      	cbnz	r1, 800849e <sbrk_aligned+0x12>
 8008498:	f000 f8bc 	bl	8008614 <_sbrk_r>
 800849c:	6030      	str	r0, [r6, #0]
 800849e:	4621      	mov	r1, r4
 80084a0:	4628      	mov	r0, r5
 80084a2:	f000 f8b7 	bl	8008614 <_sbrk_r>
 80084a6:	1c43      	adds	r3, r0, #1
 80084a8:	d00a      	beq.n	80084c0 <sbrk_aligned+0x34>
 80084aa:	1cc4      	adds	r4, r0, #3
 80084ac:	f024 0403 	bic.w	r4, r4, #3
 80084b0:	42a0      	cmp	r0, r4
 80084b2:	d007      	beq.n	80084c4 <sbrk_aligned+0x38>
 80084b4:	1a21      	subs	r1, r4, r0
 80084b6:	4628      	mov	r0, r5
 80084b8:	f000 f8ac 	bl	8008614 <_sbrk_r>
 80084bc:	3001      	adds	r0, #1
 80084be:	d101      	bne.n	80084c4 <sbrk_aligned+0x38>
 80084c0:	f04f 34ff 	mov.w	r4, #4294967295
 80084c4:	4620      	mov	r0, r4
 80084c6:	bd70      	pop	{r4, r5, r6, pc}
 80084c8:	20000d04 	.word	0x20000d04

080084cc <_malloc_r>:
 80084cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d0:	1ccd      	adds	r5, r1, #3
 80084d2:	f025 0503 	bic.w	r5, r5, #3
 80084d6:	3508      	adds	r5, #8
 80084d8:	2d0c      	cmp	r5, #12
 80084da:	bf38      	it	cc
 80084dc:	250c      	movcc	r5, #12
 80084de:	2d00      	cmp	r5, #0
 80084e0:	4607      	mov	r7, r0
 80084e2:	db01      	blt.n	80084e8 <_malloc_r+0x1c>
 80084e4:	42a9      	cmp	r1, r5
 80084e6:	d905      	bls.n	80084f4 <_malloc_r+0x28>
 80084e8:	230c      	movs	r3, #12
 80084ea:	603b      	str	r3, [r7, #0]
 80084ec:	2600      	movs	r6, #0
 80084ee:	4630      	mov	r0, r6
 80084f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084f4:	4e2e      	ldr	r6, [pc, #184]	; (80085b0 <_malloc_r+0xe4>)
 80084f6:	f000 f89d 	bl	8008634 <__malloc_lock>
 80084fa:	6833      	ldr	r3, [r6, #0]
 80084fc:	461c      	mov	r4, r3
 80084fe:	bb34      	cbnz	r4, 800854e <_malloc_r+0x82>
 8008500:	4629      	mov	r1, r5
 8008502:	4638      	mov	r0, r7
 8008504:	f7ff ffc2 	bl	800848c <sbrk_aligned>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	4604      	mov	r4, r0
 800850c:	d14d      	bne.n	80085aa <_malloc_r+0xde>
 800850e:	6834      	ldr	r4, [r6, #0]
 8008510:	4626      	mov	r6, r4
 8008512:	2e00      	cmp	r6, #0
 8008514:	d140      	bne.n	8008598 <_malloc_r+0xcc>
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	4631      	mov	r1, r6
 800851a:	4638      	mov	r0, r7
 800851c:	eb04 0803 	add.w	r8, r4, r3
 8008520:	f000 f878 	bl	8008614 <_sbrk_r>
 8008524:	4580      	cmp	r8, r0
 8008526:	d13a      	bne.n	800859e <_malloc_r+0xd2>
 8008528:	6821      	ldr	r1, [r4, #0]
 800852a:	3503      	adds	r5, #3
 800852c:	1a6d      	subs	r5, r5, r1
 800852e:	f025 0503 	bic.w	r5, r5, #3
 8008532:	3508      	adds	r5, #8
 8008534:	2d0c      	cmp	r5, #12
 8008536:	bf38      	it	cc
 8008538:	250c      	movcc	r5, #12
 800853a:	4629      	mov	r1, r5
 800853c:	4638      	mov	r0, r7
 800853e:	f7ff ffa5 	bl	800848c <sbrk_aligned>
 8008542:	3001      	adds	r0, #1
 8008544:	d02b      	beq.n	800859e <_malloc_r+0xd2>
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	442b      	add	r3, r5
 800854a:	6023      	str	r3, [r4, #0]
 800854c:	e00e      	b.n	800856c <_malloc_r+0xa0>
 800854e:	6822      	ldr	r2, [r4, #0]
 8008550:	1b52      	subs	r2, r2, r5
 8008552:	d41e      	bmi.n	8008592 <_malloc_r+0xc6>
 8008554:	2a0b      	cmp	r2, #11
 8008556:	d916      	bls.n	8008586 <_malloc_r+0xba>
 8008558:	1961      	adds	r1, r4, r5
 800855a:	42a3      	cmp	r3, r4
 800855c:	6025      	str	r5, [r4, #0]
 800855e:	bf18      	it	ne
 8008560:	6059      	strne	r1, [r3, #4]
 8008562:	6863      	ldr	r3, [r4, #4]
 8008564:	bf08      	it	eq
 8008566:	6031      	streq	r1, [r6, #0]
 8008568:	5162      	str	r2, [r4, r5]
 800856a:	604b      	str	r3, [r1, #4]
 800856c:	4638      	mov	r0, r7
 800856e:	f104 060b 	add.w	r6, r4, #11
 8008572:	f000 f865 	bl	8008640 <__malloc_unlock>
 8008576:	f026 0607 	bic.w	r6, r6, #7
 800857a:	1d23      	adds	r3, r4, #4
 800857c:	1af2      	subs	r2, r6, r3
 800857e:	d0b6      	beq.n	80084ee <_malloc_r+0x22>
 8008580:	1b9b      	subs	r3, r3, r6
 8008582:	50a3      	str	r3, [r4, r2]
 8008584:	e7b3      	b.n	80084ee <_malloc_r+0x22>
 8008586:	6862      	ldr	r2, [r4, #4]
 8008588:	42a3      	cmp	r3, r4
 800858a:	bf0c      	ite	eq
 800858c:	6032      	streq	r2, [r6, #0]
 800858e:	605a      	strne	r2, [r3, #4]
 8008590:	e7ec      	b.n	800856c <_malloc_r+0xa0>
 8008592:	4623      	mov	r3, r4
 8008594:	6864      	ldr	r4, [r4, #4]
 8008596:	e7b2      	b.n	80084fe <_malloc_r+0x32>
 8008598:	4634      	mov	r4, r6
 800859a:	6876      	ldr	r6, [r6, #4]
 800859c:	e7b9      	b.n	8008512 <_malloc_r+0x46>
 800859e:	230c      	movs	r3, #12
 80085a0:	603b      	str	r3, [r7, #0]
 80085a2:	4638      	mov	r0, r7
 80085a4:	f000 f84c 	bl	8008640 <__malloc_unlock>
 80085a8:	e7a1      	b.n	80084ee <_malloc_r+0x22>
 80085aa:	6025      	str	r5, [r4, #0]
 80085ac:	e7de      	b.n	800856c <_malloc_r+0xa0>
 80085ae:	bf00      	nop
 80085b0:	20000d00 	.word	0x20000d00

080085b4 <_realloc_r>:
 80085b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085b8:	4680      	mov	r8, r0
 80085ba:	4614      	mov	r4, r2
 80085bc:	460e      	mov	r6, r1
 80085be:	b921      	cbnz	r1, 80085ca <_realloc_r+0x16>
 80085c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085c4:	4611      	mov	r1, r2
 80085c6:	f7ff bf81 	b.w	80084cc <_malloc_r>
 80085ca:	b92a      	cbnz	r2, 80085d8 <_realloc_r+0x24>
 80085cc:	f7ff ff12 	bl	80083f4 <_free_r>
 80085d0:	4625      	mov	r5, r4
 80085d2:	4628      	mov	r0, r5
 80085d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085d8:	f000 f838 	bl	800864c <_malloc_usable_size_r>
 80085dc:	4284      	cmp	r4, r0
 80085de:	4607      	mov	r7, r0
 80085e0:	d802      	bhi.n	80085e8 <_realloc_r+0x34>
 80085e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80085e6:	d812      	bhi.n	800860e <_realloc_r+0x5a>
 80085e8:	4621      	mov	r1, r4
 80085ea:	4640      	mov	r0, r8
 80085ec:	f7ff ff6e 	bl	80084cc <_malloc_r>
 80085f0:	4605      	mov	r5, r0
 80085f2:	2800      	cmp	r0, #0
 80085f4:	d0ed      	beq.n	80085d2 <_realloc_r+0x1e>
 80085f6:	42bc      	cmp	r4, r7
 80085f8:	4622      	mov	r2, r4
 80085fa:	4631      	mov	r1, r6
 80085fc:	bf28      	it	cs
 80085fe:	463a      	movcs	r2, r7
 8008600:	f7ff fed0 	bl	80083a4 <memcpy>
 8008604:	4631      	mov	r1, r6
 8008606:	4640      	mov	r0, r8
 8008608:	f7ff fef4 	bl	80083f4 <_free_r>
 800860c:	e7e1      	b.n	80085d2 <_realloc_r+0x1e>
 800860e:	4635      	mov	r5, r6
 8008610:	e7df      	b.n	80085d2 <_realloc_r+0x1e>
	...

08008614 <_sbrk_r>:
 8008614:	b538      	push	{r3, r4, r5, lr}
 8008616:	4d06      	ldr	r5, [pc, #24]	; (8008630 <_sbrk_r+0x1c>)
 8008618:	2300      	movs	r3, #0
 800861a:	4604      	mov	r4, r0
 800861c:	4608      	mov	r0, r1
 800861e:	602b      	str	r3, [r5, #0]
 8008620:	f7f9 fd96 	bl	8002150 <_sbrk>
 8008624:	1c43      	adds	r3, r0, #1
 8008626:	d102      	bne.n	800862e <_sbrk_r+0x1a>
 8008628:	682b      	ldr	r3, [r5, #0]
 800862a:	b103      	cbz	r3, 800862e <_sbrk_r+0x1a>
 800862c:	6023      	str	r3, [r4, #0]
 800862e:	bd38      	pop	{r3, r4, r5, pc}
 8008630:	20000d08 	.word	0x20000d08

08008634 <__malloc_lock>:
 8008634:	4801      	ldr	r0, [pc, #4]	; (800863c <__malloc_lock+0x8>)
 8008636:	f000 b811 	b.w	800865c <__retarget_lock_acquire_recursive>
 800863a:	bf00      	nop
 800863c:	20000d0c 	.word	0x20000d0c

08008640 <__malloc_unlock>:
 8008640:	4801      	ldr	r0, [pc, #4]	; (8008648 <__malloc_unlock+0x8>)
 8008642:	f000 b80c 	b.w	800865e <__retarget_lock_release_recursive>
 8008646:	bf00      	nop
 8008648:	20000d0c 	.word	0x20000d0c

0800864c <_malloc_usable_size_r>:
 800864c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008650:	1f18      	subs	r0, r3, #4
 8008652:	2b00      	cmp	r3, #0
 8008654:	bfbc      	itt	lt
 8008656:	580b      	ldrlt	r3, [r1, r0]
 8008658:	18c0      	addlt	r0, r0, r3
 800865a:	4770      	bx	lr

0800865c <__retarget_lock_acquire_recursive>:
 800865c:	4770      	bx	lr

0800865e <__retarget_lock_release_recursive>:
 800865e:	4770      	bx	lr

08008660 <rint>:
 8008660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008662:	ec51 0b10 	vmov	r0, r1, d0
 8008666:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800866a:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 800866e:	2d13      	cmp	r5, #19
 8008670:	ee10 3a10 	vmov	r3, s0
 8008674:	460c      	mov	r4, r1
 8008676:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800867a:	dc5b      	bgt.n	8008734 <rint+0xd4>
 800867c:	2d00      	cmp	r5, #0
 800867e:	da2d      	bge.n	80086dc <rint+0x7c>
 8008680:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008684:	4302      	orrs	r2, r0
 8008686:	d025      	beq.n	80086d4 <rint+0x74>
 8008688:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800868c:	4302      	orrs	r2, r0
 800868e:	4253      	negs	r3, r2
 8008690:	4313      	orrs	r3, r2
 8008692:	0b1b      	lsrs	r3, r3, #12
 8008694:	0c4a      	lsrs	r2, r1, #17
 8008696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800869a:	0452      	lsls	r2, r2, #17
 800869c:	ea43 0102 	orr.w	r1, r3, r2
 80086a0:	460b      	mov	r3, r1
 80086a2:	4934      	ldr	r1, [pc, #208]	; (8008774 <rint+0x114>)
 80086a4:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80086a8:	e9d6 6700 	ldrd	r6, r7, [r6]
 80086ac:	4602      	mov	r2, r0
 80086ae:	4639      	mov	r1, r7
 80086b0:	4630      	mov	r0, r6
 80086b2:	f7f7 fdeb 	bl	800028c <__adddf3>
 80086b6:	e9cd 0100 	strd	r0, r1, [sp]
 80086ba:	463b      	mov	r3, r7
 80086bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086c0:	4632      	mov	r2, r6
 80086c2:	f7f7 fde1 	bl	8000288 <__aeabi_dsub>
 80086c6:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 80086ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80086ce:	ea43 0704 	orr.w	r7, r3, r4
 80086d2:	4639      	mov	r1, r7
 80086d4:	ec41 0b10 	vmov	d0, r0, r1
 80086d8:	b003      	add	sp, #12
 80086da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086dc:	4a26      	ldr	r2, [pc, #152]	; (8008778 <rint+0x118>)
 80086de:	412a      	asrs	r2, r5
 80086e0:	ea01 0702 	and.w	r7, r1, r2
 80086e4:	4307      	orrs	r7, r0
 80086e6:	d0f5      	beq.n	80086d4 <rint+0x74>
 80086e8:	0851      	lsrs	r1, r2, #1
 80086ea:	ea04 0252 	and.w	r2, r4, r2, lsr #1
 80086ee:	4313      	orrs	r3, r2
 80086f0:	d00c      	beq.n	800870c <rint+0xac>
 80086f2:	ea24 0201 	bic.w	r2, r4, r1
 80086f6:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80086fa:	2d13      	cmp	r5, #19
 80086fc:	fa44 f505 	asr.w	r5, r4, r5
 8008700:	bf0c      	ite	eq
 8008702:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
 8008706:	2300      	movne	r3, #0
 8008708:	ea42 0405 	orr.w	r4, r2, r5
 800870c:	4919      	ldr	r1, [pc, #100]	; (8008774 <rint+0x114>)
 800870e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8008712:	461a      	mov	r2, r3
 8008714:	4623      	mov	r3, r4
 8008716:	e9d6 4500 	ldrd	r4, r5, [r6]
 800871a:	4620      	mov	r0, r4
 800871c:	4629      	mov	r1, r5
 800871e:	f7f7 fdb5 	bl	800028c <__adddf3>
 8008722:	e9cd 0100 	strd	r0, r1, [sp]
 8008726:	e9dd 0100 	ldrd	r0, r1, [sp]
 800872a:	4622      	mov	r2, r4
 800872c:	462b      	mov	r3, r5
 800872e:	f7f7 fdab 	bl	8000288 <__aeabi_dsub>
 8008732:	e7cf      	b.n	80086d4 <rint+0x74>
 8008734:	2d33      	cmp	r5, #51	; 0x33
 8008736:	dd08      	ble.n	800874a <rint+0xea>
 8008738:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800873c:	d1ca      	bne.n	80086d4 <rint+0x74>
 800873e:	ee10 2a10 	vmov	r2, s0
 8008742:	460b      	mov	r3, r1
 8008744:	f7f7 fda2 	bl	800028c <__adddf3>
 8008748:	e7c4      	b.n	80086d4 <rint+0x74>
 800874a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800874e:	f04f 35ff 	mov.w	r5, #4294967295
 8008752:	40d5      	lsrs	r5, r2
 8008754:	4228      	tst	r0, r5
 8008756:	d0bd      	beq.n	80086d4 <rint+0x74>
 8008758:	ea13 0055 	ands.w	r0, r3, r5, lsr #1
 800875c:	ea4f 0155 	mov.w	r1, r5, lsr #1
 8008760:	bf1f      	itttt	ne
 8008762:	ea23 0101 	bicne.w	r1, r3, r1
 8008766:	f04f 4380 	movne.w	r3, #1073741824	; 0x40000000
 800876a:	fa43 f202 	asrne.w	r2, r3, r2
 800876e:	ea41 0302 	orrne.w	r3, r1, r2
 8008772:	e7cb      	b.n	800870c <rint+0xac>
 8008774:	080092c8 	.word	0x080092c8
 8008778:	000fffff 	.word	0x000fffff

0800877c <sinf>:
 800877c:	ee10 3a10 	vmov	r3, s0
 8008780:	b507      	push	{r0, r1, r2, lr}
 8008782:	4a1f      	ldr	r2, [pc, #124]	; (8008800 <sinf+0x84>)
 8008784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008788:	4293      	cmp	r3, r2
 800878a:	dc07      	bgt.n	800879c <sinf+0x20>
 800878c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8008804 <sinf+0x88>
 8008790:	2000      	movs	r0, #0
 8008792:	b003      	add	sp, #12
 8008794:	f85d eb04 	ldr.w	lr, [sp], #4
 8008798:	f000 bc48 	b.w	800902c <__kernel_sinf>
 800879c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80087a0:	db04      	blt.n	80087ac <sinf+0x30>
 80087a2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80087a6:	b003      	add	sp, #12
 80087a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80087ac:	4668      	mov	r0, sp
 80087ae:	f000 f82b 	bl	8008808 <__ieee754_rem_pio2f>
 80087b2:	f000 0003 	and.w	r0, r0, #3
 80087b6:	2801      	cmp	r0, #1
 80087b8:	d00a      	beq.n	80087d0 <sinf+0x54>
 80087ba:	2802      	cmp	r0, #2
 80087bc:	d00f      	beq.n	80087de <sinf+0x62>
 80087be:	b9c0      	cbnz	r0, 80087f2 <sinf+0x76>
 80087c0:	eddd 0a01 	vldr	s1, [sp, #4]
 80087c4:	ed9d 0a00 	vldr	s0, [sp]
 80087c8:	2001      	movs	r0, #1
 80087ca:	f000 fc2f 	bl	800902c <__kernel_sinf>
 80087ce:	e7ea      	b.n	80087a6 <sinf+0x2a>
 80087d0:	eddd 0a01 	vldr	s1, [sp, #4]
 80087d4:	ed9d 0a00 	vldr	s0, [sp]
 80087d8:	f000 f952 	bl	8008a80 <__kernel_cosf>
 80087dc:	e7e3      	b.n	80087a6 <sinf+0x2a>
 80087de:	eddd 0a01 	vldr	s1, [sp, #4]
 80087e2:	ed9d 0a00 	vldr	s0, [sp]
 80087e6:	2001      	movs	r0, #1
 80087e8:	f000 fc20 	bl	800902c <__kernel_sinf>
 80087ec:	eeb1 0a40 	vneg.f32	s0, s0
 80087f0:	e7d9      	b.n	80087a6 <sinf+0x2a>
 80087f2:	eddd 0a01 	vldr	s1, [sp, #4]
 80087f6:	ed9d 0a00 	vldr	s0, [sp]
 80087fa:	f000 f941 	bl	8008a80 <__kernel_cosf>
 80087fe:	e7f5      	b.n	80087ec <sinf+0x70>
 8008800:	3f490fd8 	.word	0x3f490fd8
 8008804:	00000000 	.word	0x00000000

08008808 <__ieee754_rem_pio2f>:
 8008808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800880a:	ee10 6a10 	vmov	r6, s0
 800880e:	4b8e      	ldr	r3, [pc, #568]	; (8008a48 <__ieee754_rem_pio2f+0x240>)
 8008810:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008814:	429d      	cmp	r5, r3
 8008816:	b087      	sub	sp, #28
 8008818:	eef0 7a40 	vmov.f32	s15, s0
 800881c:	4604      	mov	r4, r0
 800881e:	dc05      	bgt.n	800882c <__ieee754_rem_pio2f+0x24>
 8008820:	2300      	movs	r3, #0
 8008822:	ed80 0a00 	vstr	s0, [r0]
 8008826:	6043      	str	r3, [r0, #4]
 8008828:	2000      	movs	r0, #0
 800882a:	e01a      	b.n	8008862 <__ieee754_rem_pio2f+0x5a>
 800882c:	4b87      	ldr	r3, [pc, #540]	; (8008a4c <__ieee754_rem_pio2f+0x244>)
 800882e:	429d      	cmp	r5, r3
 8008830:	dc46      	bgt.n	80088c0 <__ieee754_rem_pio2f+0xb8>
 8008832:	2e00      	cmp	r6, #0
 8008834:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8008a50 <__ieee754_rem_pio2f+0x248>
 8008838:	4b86      	ldr	r3, [pc, #536]	; (8008a54 <__ieee754_rem_pio2f+0x24c>)
 800883a:	f025 050f 	bic.w	r5, r5, #15
 800883e:	dd1f      	ble.n	8008880 <__ieee754_rem_pio2f+0x78>
 8008840:	429d      	cmp	r5, r3
 8008842:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008846:	d00e      	beq.n	8008866 <__ieee754_rem_pio2f+0x5e>
 8008848:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8008a58 <__ieee754_rem_pio2f+0x250>
 800884c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8008850:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008854:	ed80 0a00 	vstr	s0, [r0]
 8008858:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800885c:	2001      	movs	r0, #1
 800885e:	edc4 7a01 	vstr	s15, [r4, #4]
 8008862:	b007      	add	sp, #28
 8008864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008866:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8008a5c <__ieee754_rem_pio2f+0x254>
 800886a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008a60 <__ieee754_rem_pio2f+0x258>
 800886e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008872:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008876:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800887a:	edc0 6a00 	vstr	s13, [r0]
 800887e:	e7eb      	b.n	8008858 <__ieee754_rem_pio2f+0x50>
 8008880:	429d      	cmp	r5, r3
 8008882:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008886:	d00e      	beq.n	80088a6 <__ieee754_rem_pio2f+0x9e>
 8008888:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008a58 <__ieee754_rem_pio2f+0x250>
 800888c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8008890:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008894:	ed80 0a00 	vstr	s0, [r0]
 8008898:	ee77 7a87 	vadd.f32	s15, s15, s14
 800889c:	f04f 30ff 	mov.w	r0, #4294967295
 80088a0:	edc4 7a01 	vstr	s15, [r4, #4]
 80088a4:	e7dd      	b.n	8008862 <__ieee754_rem_pio2f+0x5a>
 80088a6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8008a5c <__ieee754_rem_pio2f+0x254>
 80088aa:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8008a60 <__ieee754_rem_pio2f+0x258>
 80088ae:	ee77 7a80 	vadd.f32	s15, s15, s0
 80088b2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80088b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80088ba:	edc0 6a00 	vstr	s13, [r0]
 80088be:	e7eb      	b.n	8008898 <__ieee754_rem_pio2f+0x90>
 80088c0:	4b68      	ldr	r3, [pc, #416]	; (8008a64 <__ieee754_rem_pio2f+0x25c>)
 80088c2:	429d      	cmp	r5, r3
 80088c4:	dc72      	bgt.n	80089ac <__ieee754_rem_pio2f+0x1a4>
 80088c6:	f000 fbf9 	bl	80090bc <fabsf>
 80088ca:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008a68 <__ieee754_rem_pio2f+0x260>
 80088ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80088d2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80088d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80088de:	ee17 0a90 	vmov	r0, s15
 80088e2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008a50 <__ieee754_rem_pio2f+0x248>
 80088e6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80088ea:	281f      	cmp	r0, #31
 80088ec:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008a58 <__ieee754_rem_pio2f+0x250>
 80088f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f4:	eeb1 6a47 	vneg.f32	s12, s14
 80088f8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80088fc:	ee16 2a90 	vmov	r2, s13
 8008900:	dc1c      	bgt.n	800893c <__ieee754_rem_pio2f+0x134>
 8008902:	495a      	ldr	r1, [pc, #360]	; (8008a6c <__ieee754_rem_pio2f+0x264>)
 8008904:	1e47      	subs	r7, r0, #1
 8008906:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800890a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800890e:	428b      	cmp	r3, r1
 8008910:	d014      	beq.n	800893c <__ieee754_rem_pio2f+0x134>
 8008912:	6022      	str	r2, [r4, #0]
 8008914:	ed94 7a00 	vldr	s14, [r4]
 8008918:	ee30 0a47 	vsub.f32	s0, s0, s14
 800891c:	2e00      	cmp	r6, #0
 800891e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008922:	ed84 0a01 	vstr	s0, [r4, #4]
 8008926:	da9c      	bge.n	8008862 <__ieee754_rem_pio2f+0x5a>
 8008928:	eeb1 7a47 	vneg.f32	s14, s14
 800892c:	eeb1 0a40 	vneg.f32	s0, s0
 8008930:	ed84 7a00 	vstr	s14, [r4]
 8008934:	ed84 0a01 	vstr	s0, [r4, #4]
 8008938:	4240      	negs	r0, r0
 800893a:	e792      	b.n	8008862 <__ieee754_rem_pio2f+0x5a>
 800893c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008940:	15eb      	asrs	r3, r5, #23
 8008942:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8008946:	2d08      	cmp	r5, #8
 8008948:	dde3      	ble.n	8008912 <__ieee754_rem_pio2f+0x10a>
 800894a:	eddf 7a44 	vldr	s15, [pc, #272]	; 8008a5c <__ieee754_rem_pio2f+0x254>
 800894e:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008a60 <__ieee754_rem_pio2f+0x258>
 8008952:	eef0 6a40 	vmov.f32	s13, s0
 8008956:	eee6 6a27 	vfma.f32	s13, s12, s15
 800895a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800895e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8008962:	eef0 7a40 	vmov.f32	s15, s0
 8008966:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800896a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800896e:	ee15 2a90 	vmov	r2, s11
 8008972:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008976:	1a5b      	subs	r3, r3, r1
 8008978:	2b19      	cmp	r3, #25
 800897a:	dc04      	bgt.n	8008986 <__ieee754_rem_pio2f+0x17e>
 800897c:	edc4 5a00 	vstr	s11, [r4]
 8008980:	eeb0 0a66 	vmov.f32	s0, s13
 8008984:	e7c6      	b.n	8008914 <__ieee754_rem_pio2f+0x10c>
 8008986:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008a70 <__ieee754_rem_pio2f+0x268>
 800898a:	eeb0 0a66 	vmov.f32	s0, s13
 800898e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008992:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008996:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008a74 <__ieee754_rem_pio2f+0x26c>
 800899a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800899e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80089a2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80089a6:	ed84 7a00 	vstr	s14, [r4]
 80089aa:	e7b3      	b.n	8008914 <__ieee754_rem_pio2f+0x10c>
 80089ac:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80089b0:	db06      	blt.n	80089c0 <__ieee754_rem_pio2f+0x1b8>
 80089b2:	ee70 7a40 	vsub.f32	s15, s0, s0
 80089b6:	edc0 7a01 	vstr	s15, [r0, #4]
 80089ba:	edc0 7a00 	vstr	s15, [r0]
 80089be:	e733      	b.n	8008828 <__ieee754_rem_pio2f+0x20>
 80089c0:	15ea      	asrs	r2, r5, #23
 80089c2:	3a86      	subs	r2, #134	; 0x86
 80089c4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80089c8:	ee07 3a90 	vmov	s15, r3
 80089cc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80089d0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008a78 <__ieee754_rem_pio2f+0x270>
 80089d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80089d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089dc:	ed8d 7a03 	vstr	s14, [sp, #12]
 80089e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80089e4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80089e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80089ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089f0:	ed8d 7a04 	vstr	s14, [sp, #16]
 80089f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80089f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80089fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a00:	edcd 7a05 	vstr	s15, [sp, #20]
 8008a04:	d11e      	bne.n	8008a44 <__ieee754_rem_pio2f+0x23c>
 8008a06:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a0e:	bf14      	ite	ne
 8008a10:	2302      	movne	r3, #2
 8008a12:	2301      	moveq	r3, #1
 8008a14:	4919      	ldr	r1, [pc, #100]	; (8008a7c <__ieee754_rem_pio2f+0x274>)
 8008a16:	9101      	str	r1, [sp, #4]
 8008a18:	2102      	movs	r1, #2
 8008a1a:	9100      	str	r1, [sp, #0]
 8008a1c:	a803      	add	r0, sp, #12
 8008a1e:	4621      	mov	r1, r4
 8008a20:	f000 f88e 	bl	8008b40 <__kernel_rem_pio2f>
 8008a24:	2e00      	cmp	r6, #0
 8008a26:	f6bf af1c 	bge.w	8008862 <__ieee754_rem_pio2f+0x5a>
 8008a2a:	edd4 7a00 	vldr	s15, [r4]
 8008a2e:	eef1 7a67 	vneg.f32	s15, s15
 8008a32:	edc4 7a00 	vstr	s15, [r4]
 8008a36:	edd4 7a01 	vldr	s15, [r4, #4]
 8008a3a:	eef1 7a67 	vneg.f32	s15, s15
 8008a3e:	edc4 7a01 	vstr	s15, [r4, #4]
 8008a42:	e779      	b.n	8008938 <__ieee754_rem_pio2f+0x130>
 8008a44:	2303      	movs	r3, #3
 8008a46:	e7e5      	b.n	8008a14 <__ieee754_rem_pio2f+0x20c>
 8008a48:	3f490fd8 	.word	0x3f490fd8
 8008a4c:	4016cbe3 	.word	0x4016cbe3
 8008a50:	3fc90f80 	.word	0x3fc90f80
 8008a54:	3fc90fd0 	.word	0x3fc90fd0
 8008a58:	37354443 	.word	0x37354443
 8008a5c:	37354400 	.word	0x37354400
 8008a60:	2e85a308 	.word	0x2e85a308
 8008a64:	43490f80 	.word	0x43490f80
 8008a68:	3f22f984 	.word	0x3f22f984
 8008a6c:	080092d8 	.word	0x080092d8
 8008a70:	2e85a300 	.word	0x2e85a300
 8008a74:	248d3132 	.word	0x248d3132
 8008a78:	43800000 	.word	0x43800000
 8008a7c:	08009358 	.word	0x08009358

08008a80 <__kernel_cosf>:
 8008a80:	ee10 3a10 	vmov	r3, s0
 8008a84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a88:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008a8c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008a90:	da05      	bge.n	8008a9e <__kernel_cosf+0x1e>
 8008a92:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008a96:	ee17 2a90 	vmov	r2, s15
 8008a9a:	2a00      	cmp	r2, #0
 8008a9c:	d03d      	beq.n	8008b1a <__kernel_cosf+0x9a>
 8008a9e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8008aa2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008b20 <__kernel_cosf+0xa0>
 8008aa6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008b24 <__kernel_cosf+0xa4>
 8008aaa:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008b28 <__kernel_cosf+0xa8>
 8008aae:	4a1f      	ldr	r2, [pc, #124]	; (8008b2c <__kernel_cosf+0xac>)
 8008ab0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008b30 <__kernel_cosf+0xb0>
 8008aba:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008abe:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008b34 <__kernel_cosf+0xb4>
 8008ac2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008ac6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008b38 <__kernel_cosf+0xb8>
 8008aca:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008ace:	eeb0 7a66 	vmov.f32	s14, s13
 8008ad2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008ad6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008ada:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8008ade:	ee67 6a25 	vmul.f32	s13, s14, s11
 8008ae2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8008ae6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008aea:	dc04      	bgt.n	8008af6 <__kernel_cosf+0x76>
 8008aec:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008af0:	ee36 0a47 	vsub.f32	s0, s12, s14
 8008af4:	4770      	bx	lr
 8008af6:	4a11      	ldr	r2, [pc, #68]	; (8008b3c <__kernel_cosf+0xbc>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	bfda      	itte	le
 8008afc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008b00:	ee06 3a90 	vmovle	s13, r3
 8008b04:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8008b08:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b0c:	ee36 0a66 	vsub.f32	s0, s12, s13
 8008b10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b14:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008b18:	4770      	bx	lr
 8008b1a:	eeb0 0a46 	vmov.f32	s0, s12
 8008b1e:	4770      	bx	lr
 8008b20:	ad47d74e 	.word	0xad47d74e
 8008b24:	310f74f6 	.word	0x310f74f6
 8008b28:	3d2aaaab 	.word	0x3d2aaaab
 8008b2c:	3e999999 	.word	0x3e999999
 8008b30:	b493f27c 	.word	0xb493f27c
 8008b34:	37d00d01 	.word	0x37d00d01
 8008b38:	bab60b61 	.word	0xbab60b61
 8008b3c:	3f480000 	.word	0x3f480000

08008b40 <__kernel_rem_pio2f>:
 8008b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b44:	ed2d 8b04 	vpush	{d8-d9}
 8008b48:	b0d9      	sub	sp, #356	; 0x164
 8008b4a:	4688      	mov	r8, r1
 8008b4c:	9002      	str	r0, [sp, #8]
 8008b4e:	49bb      	ldr	r1, [pc, #748]	; (8008e3c <__kernel_rem_pio2f+0x2fc>)
 8008b50:	9866      	ldr	r0, [sp, #408]	; 0x198
 8008b52:	9301      	str	r3, [sp, #4]
 8008b54:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008b58:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8008b5c:	1e59      	subs	r1, r3, #1
 8008b5e:	1d13      	adds	r3, r2, #4
 8008b60:	db27      	blt.n	8008bb2 <__kernel_rem_pio2f+0x72>
 8008b62:	f1b2 0b03 	subs.w	fp, r2, #3
 8008b66:	bf48      	it	mi
 8008b68:	f102 0b04 	addmi.w	fp, r2, #4
 8008b6c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8008b70:	1c45      	adds	r5, r0, #1
 8008b72:	00ec      	lsls	r4, r5, #3
 8008b74:	1a47      	subs	r7, r0, r1
 8008b76:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8008e4c <__kernel_rem_pio2f+0x30c>
 8008b7a:	9403      	str	r4, [sp, #12]
 8008b7c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8008b80:	eb0a 0c01 	add.w	ip, sl, r1
 8008b84:	ae1c      	add	r6, sp, #112	; 0x70
 8008b86:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8008b8a:	2400      	movs	r4, #0
 8008b8c:	4564      	cmp	r4, ip
 8008b8e:	dd12      	ble.n	8008bb6 <__kernel_rem_pio2f+0x76>
 8008b90:	9b01      	ldr	r3, [sp, #4]
 8008b92:	ac1c      	add	r4, sp, #112	; 0x70
 8008b94:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008b98:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8008b9c:	f04f 0c00 	mov.w	ip, #0
 8008ba0:	45d4      	cmp	ip, sl
 8008ba2:	dc27      	bgt.n	8008bf4 <__kernel_rem_pio2f+0xb4>
 8008ba4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008ba8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008e4c <__kernel_rem_pio2f+0x30c>
 8008bac:	4627      	mov	r7, r4
 8008bae:	2600      	movs	r6, #0
 8008bb0:	e016      	b.n	8008be0 <__kernel_rem_pio2f+0xa0>
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	e7dc      	b.n	8008b70 <__kernel_rem_pio2f+0x30>
 8008bb6:	42e7      	cmn	r7, r4
 8008bb8:	bf5d      	ittte	pl
 8008bba:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8008bbe:	ee07 3a90 	vmovpl	s15, r3
 8008bc2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008bc6:	eef0 7a47 	vmovmi.f32	s15, s14
 8008bca:	ece6 7a01 	vstmia	r6!, {s15}
 8008bce:	3401      	adds	r4, #1
 8008bd0:	e7dc      	b.n	8008b8c <__kernel_rem_pio2f+0x4c>
 8008bd2:	ecf9 6a01 	vldmia	r9!, {s13}
 8008bd6:	ed97 7a00 	vldr	s14, [r7]
 8008bda:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008bde:	3601      	adds	r6, #1
 8008be0:	428e      	cmp	r6, r1
 8008be2:	f1a7 0704 	sub.w	r7, r7, #4
 8008be6:	ddf4      	ble.n	8008bd2 <__kernel_rem_pio2f+0x92>
 8008be8:	eceb 7a01 	vstmia	fp!, {s15}
 8008bec:	f10c 0c01 	add.w	ip, ip, #1
 8008bf0:	3404      	adds	r4, #4
 8008bf2:	e7d5      	b.n	8008ba0 <__kernel_rem_pio2f+0x60>
 8008bf4:	ab08      	add	r3, sp, #32
 8008bf6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008bfa:	eddf 8a93 	vldr	s17, [pc, #588]	; 8008e48 <__kernel_rem_pio2f+0x308>
 8008bfe:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8008e44 <__kernel_rem_pio2f+0x304>
 8008c02:	9304      	str	r3, [sp, #16]
 8008c04:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8008c08:	4656      	mov	r6, sl
 8008c0a:	00b3      	lsls	r3, r6, #2
 8008c0c:	9305      	str	r3, [sp, #20]
 8008c0e:	ab58      	add	r3, sp, #352	; 0x160
 8008c10:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008c14:	ac08      	add	r4, sp, #32
 8008c16:	ab44      	add	r3, sp, #272	; 0x110
 8008c18:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8008c1c:	46a4      	mov	ip, r4
 8008c1e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008c22:	4637      	mov	r7, r6
 8008c24:	2f00      	cmp	r7, #0
 8008c26:	f1a0 0004 	sub.w	r0, r0, #4
 8008c2a:	dc4f      	bgt.n	8008ccc <__kernel_rem_pio2f+0x18c>
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008c32:	f000 fa8d 	bl	8009150 <scalbnf>
 8008c36:	eeb0 8a40 	vmov.f32	s16, s0
 8008c3a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008c3e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008c42:	f000 fa43 	bl	80090cc <floorf>
 8008c46:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008c4a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008c4e:	2d00      	cmp	r5, #0
 8008c50:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008c54:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008c58:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8008c5c:	ee17 9a90 	vmov	r9, s15
 8008c60:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008c64:	dd44      	ble.n	8008cf0 <__kernel_rem_pio2f+0x1b0>
 8008c66:	f106 3cff 	add.w	ip, r6, #4294967295
 8008c6a:	ab08      	add	r3, sp, #32
 8008c6c:	f1c5 0e08 	rsb	lr, r5, #8
 8008c70:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8008c74:	fa47 f00e 	asr.w	r0, r7, lr
 8008c78:	4481      	add	r9, r0
 8008c7a:	fa00 f00e 	lsl.w	r0, r0, lr
 8008c7e:	1a3f      	subs	r7, r7, r0
 8008c80:	f1c5 0007 	rsb	r0, r5, #7
 8008c84:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8008c88:	4107      	asrs	r7, r0
 8008c8a:	2f00      	cmp	r7, #0
 8008c8c:	dd3f      	ble.n	8008d0e <__kernel_rem_pio2f+0x1ce>
 8008c8e:	f04f 0e00 	mov.w	lr, #0
 8008c92:	f109 0901 	add.w	r9, r9, #1
 8008c96:	4673      	mov	r3, lr
 8008c98:	4576      	cmp	r6, lr
 8008c9a:	dc6b      	bgt.n	8008d74 <__kernel_rem_pio2f+0x234>
 8008c9c:	2d00      	cmp	r5, #0
 8008c9e:	dd04      	ble.n	8008caa <__kernel_rem_pio2f+0x16a>
 8008ca0:	2d01      	cmp	r5, #1
 8008ca2:	d078      	beq.n	8008d96 <__kernel_rem_pio2f+0x256>
 8008ca4:	2d02      	cmp	r5, #2
 8008ca6:	f000 8081 	beq.w	8008dac <__kernel_rem_pio2f+0x26c>
 8008caa:	2f02      	cmp	r7, #2
 8008cac:	d12f      	bne.n	8008d0e <__kernel_rem_pio2f+0x1ce>
 8008cae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008cb2:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008cb6:	b353      	cbz	r3, 8008d0e <__kernel_rem_pio2f+0x1ce>
 8008cb8:	4628      	mov	r0, r5
 8008cba:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008cbe:	f000 fa47 	bl	8009150 <scalbnf>
 8008cc2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008cc6:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008cca:	e020      	b.n	8008d0e <__kernel_rem_pio2f+0x1ce>
 8008ccc:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008cd0:	3f01      	subs	r7, #1
 8008cd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cda:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008cde:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008ce2:	ecac 0a01 	vstmia	ip!, {s0}
 8008ce6:	ed90 0a00 	vldr	s0, [r0]
 8008cea:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008cee:	e799      	b.n	8008c24 <__kernel_rem_pio2f+0xe4>
 8008cf0:	d105      	bne.n	8008cfe <__kernel_rem_pio2f+0x1be>
 8008cf2:	1e70      	subs	r0, r6, #1
 8008cf4:	ab08      	add	r3, sp, #32
 8008cf6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8008cfa:	11ff      	asrs	r7, r7, #7
 8008cfc:	e7c5      	b.n	8008c8a <__kernel_rem_pio2f+0x14a>
 8008cfe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008d02:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d0a:	da31      	bge.n	8008d70 <__kernel_rem_pio2f+0x230>
 8008d0c:	2700      	movs	r7, #0
 8008d0e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d16:	f040 809b 	bne.w	8008e50 <__kernel_rem_pio2f+0x310>
 8008d1a:	1e74      	subs	r4, r6, #1
 8008d1c:	46a4      	mov	ip, r4
 8008d1e:	2000      	movs	r0, #0
 8008d20:	45d4      	cmp	ip, sl
 8008d22:	da4a      	bge.n	8008dba <__kernel_rem_pio2f+0x27a>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d07a      	beq.n	8008e1e <__kernel_rem_pio2f+0x2de>
 8008d28:	ab08      	add	r3, sp, #32
 8008d2a:	3d08      	subs	r5, #8
 8008d2c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f000 8081 	beq.w	8008e38 <__kernel_rem_pio2f+0x2f8>
 8008d36:	4628      	mov	r0, r5
 8008d38:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008d3c:	00a5      	lsls	r5, r4, #2
 8008d3e:	f000 fa07 	bl	8009150 <scalbnf>
 8008d42:	aa44      	add	r2, sp, #272	; 0x110
 8008d44:	1d2b      	adds	r3, r5, #4
 8008d46:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008e48 <__kernel_rem_pio2f+0x308>
 8008d4a:	18d1      	adds	r1, r2, r3
 8008d4c:	4622      	mov	r2, r4
 8008d4e:	2a00      	cmp	r2, #0
 8008d50:	f280 80ae 	bge.w	8008eb0 <__kernel_rem_pio2f+0x370>
 8008d54:	4622      	mov	r2, r4
 8008d56:	2a00      	cmp	r2, #0
 8008d58:	f2c0 80cc 	blt.w	8008ef4 <__kernel_rem_pio2f+0x3b4>
 8008d5c:	a944      	add	r1, sp, #272	; 0x110
 8008d5e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8008d62:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8008e40 <__kernel_rem_pio2f+0x300>
 8008d66:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008e4c <__kernel_rem_pio2f+0x30c>
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	1aa1      	subs	r1, r4, r2
 8008d6e:	e0b6      	b.n	8008ede <__kernel_rem_pio2f+0x39e>
 8008d70:	2702      	movs	r7, #2
 8008d72:	e78c      	b.n	8008c8e <__kernel_rem_pio2f+0x14e>
 8008d74:	6820      	ldr	r0, [r4, #0]
 8008d76:	b94b      	cbnz	r3, 8008d8c <__kernel_rem_pio2f+0x24c>
 8008d78:	b118      	cbz	r0, 8008d82 <__kernel_rem_pio2f+0x242>
 8008d7a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8008d7e:	6020      	str	r0, [r4, #0]
 8008d80:	2001      	movs	r0, #1
 8008d82:	f10e 0e01 	add.w	lr, lr, #1
 8008d86:	3404      	adds	r4, #4
 8008d88:	4603      	mov	r3, r0
 8008d8a:	e785      	b.n	8008c98 <__kernel_rem_pio2f+0x158>
 8008d8c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8008d90:	6020      	str	r0, [r4, #0]
 8008d92:	4618      	mov	r0, r3
 8008d94:	e7f5      	b.n	8008d82 <__kernel_rem_pio2f+0x242>
 8008d96:	1e74      	subs	r4, r6, #1
 8008d98:	a808      	add	r0, sp, #32
 8008d9a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008d9e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008da2:	f10d 0c20 	add.w	ip, sp, #32
 8008da6:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8008daa:	e77e      	b.n	8008caa <__kernel_rem_pio2f+0x16a>
 8008dac:	1e74      	subs	r4, r6, #1
 8008dae:	a808      	add	r0, sp, #32
 8008db0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008db4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008db8:	e7f3      	b.n	8008da2 <__kernel_rem_pio2f+0x262>
 8008dba:	ab08      	add	r3, sp, #32
 8008dbc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8008dc0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008dc4:	4318      	orrs	r0, r3
 8008dc6:	e7ab      	b.n	8008d20 <__kernel_rem_pio2f+0x1e0>
 8008dc8:	f10c 0c01 	add.w	ip, ip, #1
 8008dcc:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8008dd0:	2c00      	cmp	r4, #0
 8008dd2:	d0f9      	beq.n	8008dc8 <__kernel_rem_pio2f+0x288>
 8008dd4:	9b05      	ldr	r3, [sp, #20]
 8008dd6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008dda:	eb0d 0003 	add.w	r0, sp, r3
 8008dde:	9b01      	ldr	r3, [sp, #4]
 8008de0:	18f4      	adds	r4, r6, r3
 8008de2:	ab1c      	add	r3, sp, #112	; 0x70
 8008de4:	1c77      	adds	r7, r6, #1
 8008de6:	384c      	subs	r0, #76	; 0x4c
 8008de8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008dec:	4466      	add	r6, ip
 8008dee:	42be      	cmp	r6, r7
 8008df0:	f6ff af0b 	blt.w	8008c0a <__kernel_rem_pio2f+0xca>
 8008df4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8008df8:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008dfc:	ee07 3a90 	vmov	s15, r3
 8008e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e04:	f04f 0c00 	mov.w	ip, #0
 8008e08:	ece4 7a01 	vstmia	r4!, {s15}
 8008e0c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008e4c <__kernel_rem_pio2f+0x30c>
 8008e10:	46a1      	mov	r9, r4
 8008e12:	458c      	cmp	ip, r1
 8008e14:	dd07      	ble.n	8008e26 <__kernel_rem_pio2f+0x2e6>
 8008e16:	ece0 7a01 	vstmia	r0!, {s15}
 8008e1a:	3701      	adds	r7, #1
 8008e1c:	e7e7      	b.n	8008dee <__kernel_rem_pio2f+0x2ae>
 8008e1e:	9804      	ldr	r0, [sp, #16]
 8008e20:	f04f 0c01 	mov.w	ip, #1
 8008e24:	e7d2      	b.n	8008dcc <__kernel_rem_pio2f+0x28c>
 8008e26:	ecfe 6a01 	vldmia	lr!, {s13}
 8008e2a:	ed39 7a01 	vldmdb	r9!, {s14}
 8008e2e:	f10c 0c01 	add.w	ip, ip, #1
 8008e32:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008e36:	e7ec      	b.n	8008e12 <__kernel_rem_pio2f+0x2d2>
 8008e38:	3c01      	subs	r4, #1
 8008e3a:	e775      	b.n	8008d28 <__kernel_rem_pio2f+0x1e8>
 8008e3c:	0800969c 	.word	0x0800969c
 8008e40:	08009670 	.word	0x08009670
 8008e44:	43800000 	.word	0x43800000
 8008e48:	3b800000 	.word	0x3b800000
 8008e4c:	00000000 	.word	0x00000000
 8008e50:	9b03      	ldr	r3, [sp, #12]
 8008e52:	eeb0 0a48 	vmov.f32	s0, s16
 8008e56:	1a98      	subs	r0, r3, r2
 8008e58:	f000 f97a 	bl	8009150 <scalbnf>
 8008e5c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008e44 <__kernel_rem_pio2f+0x304>
 8008e60:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e68:	db19      	blt.n	8008e9e <__kernel_rem_pio2f+0x35e>
 8008e6a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008e48 <__kernel_rem_pio2f+0x308>
 8008e6e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008e72:	aa08      	add	r2, sp, #32
 8008e74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e78:	1c74      	adds	r4, r6, #1
 8008e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e7e:	3508      	adds	r5, #8
 8008e80:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008e84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008e8c:	ee10 3a10 	vmov	r3, s0
 8008e90:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008e94:	ee17 3a90 	vmov	r3, s15
 8008e98:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008e9c:	e74b      	b.n	8008d36 <__kernel_rem_pio2f+0x1f6>
 8008e9e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008ea2:	aa08      	add	r2, sp, #32
 8008ea4:	ee10 3a10 	vmov	r3, s0
 8008ea8:	4634      	mov	r4, r6
 8008eaa:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008eae:	e742      	b.n	8008d36 <__kernel_rem_pio2f+0x1f6>
 8008eb0:	a808      	add	r0, sp, #32
 8008eb2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8008eb6:	9001      	str	r0, [sp, #4]
 8008eb8:	ee07 0a90 	vmov	s15, r0
 8008ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ec0:	3a01      	subs	r2, #1
 8008ec2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008ec6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008eca:	ed61 7a01 	vstmdb	r1!, {s15}
 8008ece:	e73e      	b.n	8008d4e <__kernel_rem_pio2f+0x20e>
 8008ed0:	ecfc 6a01 	vldmia	ip!, {s13}
 8008ed4:	ecb6 7a01 	vldmia	r6!, {s14}
 8008ed8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008edc:	3001      	adds	r0, #1
 8008ede:	4550      	cmp	r0, sl
 8008ee0:	dc01      	bgt.n	8008ee6 <__kernel_rem_pio2f+0x3a6>
 8008ee2:	4288      	cmp	r0, r1
 8008ee4:	ddf4      	ble.n	8008ed0 <__kernel_rem_pio2f+0x390>
 8008ee6:	a858      	add	r0, sp, #352	; 0x160
 8008ee8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008eec:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8008ef0:	3a01      	subs	r2, #1
 8008ef2:	e730      	b.n	8008d56 <__kernel_rem_pio2f+0x216>
 8008ef4:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8008ef6:	2a02      	cmp	r2, #2
 8008ef8:	dc09      	bgt.n	8008f0e <__kernel_rem_pio2f+0x3ce>
 8008efa:	2a00      	cmp	r2, #0
 8008efc:	dc2a      	bgt.n	8008f54 <__kernel_rem_pio2f+0x414>
 8008efe:	d043      	beq.n	8008f88 <__kernel_rem_pio2f+0x448>
 8008f00:	f009 0007 	and.w	r0, r9, #7
 8008f04:	b059      	add	sp, #356	; 0x164
 8008f06:	ecbd 8b04 	vpop	{d8-d9}
 8008f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8008f10:	2b03      	cmp	r3, #3
 8008f12:	d1f5      	bne.n	8008f00 <__kernel_rem_pio2f+0x3c0>
 8008f14:	ab30      	add	r3, sp, #192	; 0xc0
 8008f16:	442b      	add	r3, r5
 8008f18:	461a      	mov	r2, r3
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f1a1 0104 	sub.w	r1, r1, #4
 8008f24:	dc51      	bgt.n	8008fca <__kernel_rem_pio2f+0x48a>
 8008f26:	4621      	mov	r1, r4
 8008f28:	2901      	cmp	r1, #1
 8008f2a:	f1a2 0204 	sub.w	r2, r2, #4
 8008f2e:	dc5c      	bgt.n	8008fea <__kernel_rem_pio2f+0x4aa>
 8008f30:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008e4c <__kernel_rem_pio2f+0x30c>
 8008f34:	3304      	adds	r3, #4
 8008f36:	2c01      	cmp	r4, #1
 8008f38:	dc67      	bgt.n	800900a <__kernel_rem_pio2f+0x4ca>
 8008f3a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8008f3e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8008f42:	2f00      	cmp	r7, #0
 8008f44:	d167      	bne.n	8009016 <__kernel_rem_pio2f+0x4d6>
 8008f46:	edc8 6a00 	vstr	s13, [r8]
 8008f4a:	ed88 7a01 	vstr	s14, [r8, #4]
 8008f4e:	edc8 7a02 	vstr	s15, [r8, #8]
 8008f52:	e7d5      	b.n	8008f00 <__kernel_rem_pio2f+0x3c0>
 8008f54:	aa30      	add	r2, sp, #192	; 0xc0
 8008f56:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8008e4c <__kernel_rem_pio2f+0x30c>
 8008f5a:	4413      	add	r3, r2
 8008f5c:	4622      	mov	r2, r4
 8008f5e:	2a00      	cmp	r2, #0
 8008f60:	da24      	bge.n	8008fac <__kernel_rem_pio2f+0x46c>
 8008f62:	b34f      	cbz	r7, 8008fb8 <__kernel_rem_pio2f+0x478>
 8008f64:	eef1 7a47 	vneg.f32	s15, s14
 8008f68:	edc8 7a00 	vstr	s15, [r8]
 8008f6c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8008f70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f74:	aa31      	add	r2, sp, #196	; 0xc4
 8008f76:	2301      	movs	r3, #1
 8008f78:	429c      	cmp	r4, r3
 8008f7a:	da20      	bge.n	8008fbe <__kernel_rem_pio2f+0x47e>
 8008f7c:	b10f      	cbz	r7, 8008f82 <__kernel_rem_pio2f+0x442>
 8008f7e:	eef1 7a67 	vneg.f32	s15, s15
 8008f82:	edc8 7a01 	vstr	s15, [r8, #4]
 8008f86:	e7bb      	b.n	8008f00 <__kernel_rem_pio2f+0x3c0>
 8008f88:	aa30      	add	r2, sp, #192	; 0xc0
 8008f8a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8008e4c <__kernel_rem_pio2f+0x30c>
 8008f8e:	4413      	add	r3, r2
 8008f90:	2c00      	cmp	r4, #0
 8008f92:	da05      	bge.n	8008fa0 <__kernel_rem_pio2f+0x460>
 8008f94:	b10f      	cbz	r7, 8008f9a <__kernel_rem_pio2f+0x45a>
 8008f96:	eef1 7a67 	vneg.f32	s15, s15
 8008f9a:	edc8 7a00 	vstr	s15, [r8]
 8008f9e:	e7af      	b.n	8008f00 <__kernel_rem_pio2f+0x3c0>
 8008fa0:	ed33 7a01 	vldmdb	r3!, {s14}
 8008fa4:	3c01      	subs	r4, #1
 8008fa6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008faa:	e7f1      	b.n	8008f90 <__kernel_rem_pio2f+0x450>
 8008fac:	ed73 7a01 	vldmdb	r3!, {s15}
 8008fb0:	3a01      	subs	r2, #1
 8008fb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008fb6:	e7d2      	b.n	8008f5e <__kernel_rem_pio2f+0x41e>
 8008fb8:	eef0 7a47 	vmov.f32	s15, s14
 8008fbc:	e7d4      	b.n	8008f68 <__kernel_rem_pio2f+0x428>
 8008fbe:	ecb2 7a01 	vldmia	r2!, {s14}
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008fc8:	e7d6      	b.n	8008f78 <__kernel_rem_pio2f+0x438>
 8008fca:	edd1 7a00 	vldr	s15, [r1]
 8008fce:	edd1 6a01 	vldr	s13, [r1, #4]
 8008fd2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008fd6:	3801      	subs	r0, #1
 8008fd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008fdc:	ed81 7a00 	vstr	s14, [r1]
 8008fe0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fe4:	edc1 7a01 	vstr	s15, [r1, #4]
 8008fe8:	e799      	b.n	8008f1e <__kernel_rem_pio2f+0x3de>
 8008fea:	edd2 7a00 	vldr	s15, [r2]
 8008fee:	edd2 6a01 	vldr	s13, [r2, #4]
 8008ff2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008ff6:	3901      	subs	r1, #1
 8008ff8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ffc:	ed82 7a00 	vstr	s14, [r2]
 8009000:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009004:	edc2 7a01 	vstr	s15, [r2, #4]
 8009008:	e78e      	b.n	8008f28 <__kernel_rem_pio2f+0x3e8>
 800900a:	ed33 7a01 	vldmdb	r3!, {s14}
 800900e:	3c01      	subs	r4, #1
 8009010:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009014:	e78f      	b.n	8008f36 <__kernel_rem_pio2f+0x3f6>
 8009016:	eef1 6a66 	vneg.f32	s13, s13
 800901a:	eeb1 7a47 	vneg.f32	s14, s14
 800901e:	edc8 6a00 	vstr	s13, [r8]
 8009022:	ed88 7a01 	vstr	s14, [r8, #4]
 8009026:	eef1 7a67 	vneg.f32	s15, s15
 800902a:	e790      	b.n	8008f4e <__kernel_rem_pio2f+0x40e>

0800902c <__kernel_sinf>:
 800902c:	ee10 3a10 	vmov	r3, s0
 8009030:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009034:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009038:	da04      	bge.n	8009044 <__kernel_sinf+0x18>
 800903a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800903e:	ee17 3a90 	vmov	r3, s15
 8009042:	b35b      	cbz	r3, 800909c <__kernel_sinf+0x70>
 8009044:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009048:	eddf 7a15 	vldr	s15, [pc, #84]	; 80090a0 <__kernel_sinf+0x74>
 800904c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80090a4 <__kernel_sinf+0x78>
 8009050:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009054:	eddf 7a14 	vldr	s15, [pc, #80]	; 80090a8 <__kernel_sinf+0x7c>
 8009058:	eee6 7a07 	vfma.f32	s15, s12, s14
 800905c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80090ac <__kernel_sinf+0x80>
 8009060:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009064:	eddf 7a12 	vldr	s15, [pc, #72]	; 80090b0 <__kernel_sinf+0x84>
 8009068:	ee60 6a07 	vmul.f32	s13, s0, s14
 800906c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009070:	b930      	cbnz	r0, 8009080 <__kernel_sinf+0x54>
 8009072:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80090b4 <__kernel_sinf+0x88>
 8009076:	eea7 6a27 	vfma.f32	s12, s14, s15
 800907a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800907e:	4770      	bx	lr
 8009080:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009084:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009088:	eee0 7a86 	vfma.f32	s15, s1, s12
 800908c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009090:	eddf 7a09 	vldr	s15, [pc, #36]	; 80090b8 <__kernel_sinf+0x8c>
 8009094:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009098:	ee30 0a60 	vsub.f32	s0, s0, s1
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	2f2ec9d3 	.word	0x2f2ec9d3
 80090a4:	b2d72f34 	.word	0xb2d72f34
 80090a8:	3638ef1b 	.word	0x3638ef1b
 80090ac:	b9500d01 	.word	0xb9500d01
 80090b0:	3c088889 	.word	0x3c088889
 80090b4:	be2aaaab 	.word	0xbe2aaaab
 80090b8:	3e2aaaab 	.word	0x3e2aaaab

080090bc <fabsf>:
 80090bc:	ee10 3a10 	vmov	r3, s0
 80090c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090c4:	ee00 3a10 	vmov	s0, r3
 80090c8:	4770      	bx	lr
	...

080090cc <floorf>:
 80090cc:	ee10 3a10 	vmov	r3, s0
 80090d0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80090d4:	3a7f      	subs	r2, #127	; 0x7f
 80090d6:	2a16      	cmp	r2, #22
 80090d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80090dc:	dc2a      	bgt.n	8009134 <floorf+0x68>
 80090de:	2a00      	cmp	r2, #0
 80090e0:	da11      	bge.n	8009106 <floorf+0x3a>
 80090e2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009144 <floorf+0x78>
 80090e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80090ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80090ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090f2:	dd05      	ble.n	8009100 <floorf+0x34>
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	da23      	bge.n	8009140 <floorf+0x74>
 80090f8:	4a13      	ldr	r2, [pc, #76]	; (8009148 <floorf+0x7c>)
 80090fa:	2900      	cmp	r1, #0
 80090fc:	bf18      	it	ne
 80090fe:	4613      	movne	r3, r2
 8009100:	ee00 3a10 	vmov	s0, r3
 8009104:	4770      	bx	lr
 8009106:	4911      	ldr	r1, [pc, #68]	; (800914c <floorf+0x80>)
 8009108:	4111      	asrs	r1, r2
 800910a:	420b      	tst	r3, r1
 800910c:	d0fa      	beq.n	8009104 <floorf+0x38>
 800910e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009144 <floorf+0x78>
 8009112:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009116:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800911a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800911e:	ddef      	ble.n	8009100 <floorf+0x34>
 8009120:	2b00      	cmp	r3, #0
 8009122:	bfbe      	ittt	lt
 8009124:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8009128:	fa40 f202 	asrlt.w	r2, r0, r2
 800912c:	189b      	addlt	r3, r3, r2
 800912e:	ea23 0301 	bic.w	r3, r3, r1
 8009132:	e7e5      	b.n	8009100 <floorf+0x34>
 8009134:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009138:	d3e4      	bcc.n	8009104 <floorf+0x38>
 800913a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800913e:	4770      	bx	lr
 8009140:	2300      	movs	r3, #0
 8009142:	e7dd      	b.n	8009100 <floorf+0x34>
 8009144:	7149f2ca 	.word	0x7149f2ca
 8009148:	bf800000 	.word	0xbf800000
 800914c:	007fffff 	.word	0x007fffff

08009150 <scalbnf>:
 8009150:	ee10 3a10 	vmov	r3, s0
 8009154:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009158:	d025      	beq.n	80091a6 <scalbnf+0x56>
 800915a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800915e:	d302      	bcc.n	8009166 <scalbnf+0x16>
 8009160:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009164:	4770      	bx	lr
 8009166:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800916a:	d122      	bne.n	80091b2 <scalbnf+0x62>
 800916c:	4b2a      	ldr	r3, [pc, #168]	; (8009218 <scalbnf+0xc8>)
 800916e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800921c <scalbnf+0xcc>
 8009172:	4298      	cmp	r0, r3
 8009174:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009178:	db16      	blt.n	80091a8 <scalbnf+0x58>
 800917a:	ee10 3a10 	vmov	r3, s0
 800917e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009182:	3a19      	subs	r2, #25
 8009184:	4402      	add	r2, r0
 8009186:	2afe      	cmp	r2, #254	; 0xfe
 8009188:	dd15      	ble.n	80091b6 <scalbnf+0x66>
 800918a:	ee10 3a10 	vmov	r3, s0
 800918e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8009220 <scalbnf+0xd0>
 8009192:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009224 <scalbnf+0xd4>
 8009196:	2b00      	cmp	r3, #0
 8009198:	eeb0 7a67 	vmov.f32	s14, s15
 800919c:	bfb8      	it	lt
 800919e:	eef0 7a66 	vmovlt.f32	s15, s13
 80091a2:	ee27 0a27 	vmul.f32	s0, s14, s15
 80091a6:	4770      	bx	lr
 80091a8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009228 <scalbnf+0xd8>
 80091ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 80091b0:	4770      	bx	lr
 80091b2:	0dd2      	lsrs	r2, r2, #23
 80091b4:	e7e6      	b.n	8009184 <scalbnf+0x34>
 80091b6:	2a00      	cmp	r2, #0
 80091b8:	dd06      	ble.n	80091c8 <scalbnf+0x78>
 80091ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80091be:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80091c2:	ee00 3a10 	vmov	s0, r3
 80091c6:	4770      	bx	lr
 80091c8:	f112 0f16 	cmn.w	r2, #22
 80091cc:	da1a      	bge.n	8009204 <scalbnf+0xb4>
 80091ce:	f24c 3350 	movw	r3, #50000	; 0xc350
 80091d2:	4298      	cmp	r0, r3
 80091d4:	ee10 3a10 	vmov	r3, s0
 80091d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091dc:	dd0a      	ble.n	80091f4 <scalbnf+0xa4>
 80091de:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009220 <scalbnf+0xd0>
 80091e2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009224 <scalbnf+0xd4>
 80091e6:	eef0 7a40 	vmov.f32	s15, s0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	bf18      	it	ne
 80091ee:	eeb0 0a47 	vmovne.f32	s0, s14
 80091f2:	e7db      	b.n	80091ac <scalbnf+0x5c>
 80091f4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009228 <scalbnf+0xd8>
 80091f8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800922c <scalbnf+0xdc>
 80091fc:	eef0 7a40 	vmov.f32	s15, s0
 8009200:	2b00      	cmp	r3, #0
 8009202:	e7f3      	b.n	80091ec <scalbnf+0x9c>
 8009204:	3219      	adds	r2, #25
 8009206:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800920a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800920e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009230 <scalbnf+0xe0>
 8009212:	ee07 3a10 	vmov	s14, r3
 8009216:	e7c4      	b.n	80091a2 <scalbnf+0x52>
 8009218:	ffff3cb0 	.word	0xffff3cb0
 800921c:	4c000000 	.word	0x4c000000
 8009220:	7149f2ca 	.word	0x7149f2ca
 8009224:	f149f2ca 	.word	0xf149f2ca
 8009228:	0da24260 	.word	0x0da24260
 800922c:	8da24260 	.word	0x8da24260
 8009230:	33000000 	.word	0x33000000

08009234 <_init>:
 8009234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009236:	bf00      	nop
 8009238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800923a:	bc08      	pop	{r3}
 800923c:	469e      	mov	lr, r3
 800923e:	4770      	bx	lr

08009240 <_fini>:
 8009240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009242:	bf00      	nop
 8009244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009246:	bc08      	pop	{r3}
 8009248:	469e      	mov	lr, r3
 800924a:	4770      	bx	lr
