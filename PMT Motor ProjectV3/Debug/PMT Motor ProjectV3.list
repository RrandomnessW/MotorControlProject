
PMT Motor ProjectV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b28  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08006cb0  08006cb0  00016cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eec  08006eec  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08006eec  08006eec  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006eec  08006eec  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eec  08006eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ef0  08006ef0  00016ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08006ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000091c  20000034  08006f28  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000950  08006f28  00020950  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107b9  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020da  00000000  00000000  0003081d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  000328f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00033640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0f2  00000000  00000000  000342d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fea7  00000000  00000000  0004f3c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a262a  00000000  00000000  0005f269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101893  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000390c  00000000  00000000  001018e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006c98 	.word	0x08006c98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	08006c98 	.word	0x08006c98

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0a:	f001 fa1f 	bl	8001e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0e:	f000 fb7f 	bl	8001110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a12:	f000 fd6d 	bl	80014f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a16:	f000 fd45 	bl	80014a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a1a:	f000 fd13 	bl	8001444 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a1e:	f000 fbd1 	bl	80011c4 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000a22:	f000 fc23 	bl	800126c <MX_TIM6_Init>
  MX_TIM15_Init();
 8000a26:	f000 fc57 	bl	80012d8 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8000a2a:	f000 fcdb 	bl	80013e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit (&huart1, message, strlen(message), 100 );
 8000a2e:	4896      	ldr	r0, [pc, #600]	; (8000c88 <main+0x284>)
 8000a30:	f7ff fbca 	bl	80001c8 <strlen>
 8000a34:	4603      	mov	r3, r0
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	2364      	movs	r3, #100	; 0x64
 8000a3a:	4993      	ldr	r1, [pc, #588]	; (8000c88 <main+0x284>)
 8000a3c:	4893      	ldr	r0, [pc, #588]	; (8000c8c <main+0x288>)
 8000a3e:	f004 fe62 	bl	8005706 <HAL_UART_Transmit>

  __HAL_UART_ENABLE_IT( &huart1, UART_IT_IDLE );//enable idle interrupt
 8000a42:	4b92      	ldr	r3, [pc, #584]	; (8000c8c <main+0x288>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b90      	ldr	r3, [pc, #576]	; (8000c8c <main+0x288>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f042 0210 	orr.w	r2, r2, #16
 8000a50:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT( &hdma_usart1_rx, DMA_IT_TC);//enable DMA complete interrupt
 8000a52:	4b8f      	ldr	r3, [pc, #572]	; (8000c90 <main+0x28c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b8d      	ldr	r3, [pc, #564]	; (8000c90 <main+0x28c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f042 0202 	orr.w	r2, r2, #2
 8000a60:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT( &hdma_usart1_rx, DMA_IT_HT);//disable half transfer interrupt
 8000a62:	4b8b      	ldr	r3, [pc, #556]	; (8000c90 <main+0x28c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b89      	ldr	r3, [pc, #548]	; (8000c90 <main+0x28c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f022 0204 	bic.w	r2, r2, #4
 8000a70:	601a      	str	r2, [r3, #0]

  HAL_UART_Receive_DMA( &huart1, DMA_RX_Buffer, DMA_RX_BUFFER_SIZE );//enable uart1 DMA receiving
 8000a72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a76:	4987      	ldr	r1, [pc, #540]	; (8000c94 <main+0x290>)
 8000a78:	4884      	ldr	r0, [pc, #528]	; (8000c8c <main+0x288>)
 8000a7a:	f004 ff4b 	bl	8005914 <HAL_UART_Receive_DMA>

  COM_Status = 0;
 8000a7e:	4b86      	ldr	r3, [pc, #536]	; (8000c98 <main+0x294>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]

  HAL_TIM_PWM_Start( &htim15, TIM_CHANNEL_1 );
 8000a84:	2100      	movs	r1, #0
 8000a86:	4885      	ldr	r0, [pc, #532]	; (8000c9c <main+0x298>)
 8000a88:	f003 fc80 	bl	800438c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start( &htim15, TIM_CHANNEL_1 );
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4883      	ldr	r0, [pc, #524]	; (8000c9c <main+0x298>)
 8000a90:	f004 fc2c 	bl	80052ec <HAL_TIMEx_PWMN_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000a94:	213c      	movs	r1, #60	; 0x3c
 8000a96:	4882      	ldr	r0, [pc, #520]	; (8000ca0 <main+0x29c>)
 8000a98:	f003 fe04 	bl	80046a4 <HAL_TIM_Encoder_Start>
  TIM2->CNT = 32767; //encoder couter offset;
 8000a9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aa0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000aa4:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(&htim2);
 8000aa6:	487e      	ldr	r0, [pc, #504]	; (8000ca0 <main+0x29c>)
 8000aa8:	f003 fb4a 	bl	8004140 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2110      	movs	r1, #16
 8000ab0:	487c      	ldr	r0, [pc, #496]	; (8000ca4 <main+0x2a0>)
 8000ab2:	f001 fecf 	bl	8002854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2120      	movs	r1, #32
 8000aba:	487a      	ldr	r0, [pc, #488]	; (8000ca4 <main+0x2a0>)
 8000abc:	f001 feca 	bl	8002854 <HAL_GPIO_WritePin>



	  //Transmit_DMA( &huart1, "HELLO\r\n", 7);

	  if( COM_Status == 1 )
 8000ac0:	4b75      	ldr	r3, [pc, #468]	; (8000c98 <main+0x294>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d1fa      	bne.n	8000ac0 <main+0xbc>
	  {

		  Transmit_DMA( &huart1, Data_Buffer, strlen(Data_Buffer) );
 8000aca:	4877      	ldr	r0, [pc, #476]	; (8000ca8 <main+0x2a4>)
 8000acc:	f7ff fb7c 	bl	80001c8 <strlen>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4974      	ldr	r1, [pc, #464]	; (8000ca8 <main+0x2a4>)
 8000ad8:	486c      	ldr	r0, [pc, #432]	; (8000c8c <main+0x288>)
 8000ada:	f000 fd81 	bl	80015e0 <Transmit_DMA>
		  Transmit_DMA( &huart1, "\n\r", 2 );
 8000ade:	2202      	movs	r2, #2
 8000ae0:	4972      	ldr	r1, [pc, #456]	; (8000cac <main+0x2a8>)
 8000ae2:	486a      	ldr	r0, [pc, #424]	; (8000c8c <main+0x288>)
 8000ae4:	f000 fd7c 	bl	80015e0 <Transmit_DMA>

		  for( i = 0; i < Rx_Counter; ++i )
 8000ae8:	4b71      	ldr	r3, [pc, #452]	; (8000cb0 <main+0x2ac>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	801a      	strh	r2, [r3, #0]
 8000aee:	e2e1      	b.n	80010b4 <main+0x6b0>
		  {

			  if ( Data_Buffer[i] == 0xA5 )
 8000af0:	4b6f      	ldr	r3, [pc, #444]	; (8000cb0 <main+0x2ac>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b6c      	ldr	r3, [pc, #432]	; (8000ca8 <main+0x2a4>)
 8000af8:	5c9b      	ldrb	r3, [r3, r2]
 8000afa:	2ba5      	cmp	r3, #165	; 0xa5
 8000afc:	f040 82d4 	bne.w	80010a8 <main+0x6a4>
			  {
				  //Transmit_DMA( &huart1, "this works\r\n", 12);
				  //Transmit_DMA( &huart1, "\n\r", 2 )
				  for ( j = 0; j < 8; ++j )
 8000b00:	4b6c      	ldr	r3, [pc, #432]	; (8000cb4 <main+0x2b0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	801a      	strh	r2, [r3, #0]
 8000b06:	e012      	b.n	8000b2e <main+0x12a>
				  {
					  Rx_Head[j] = Data_Buffer[i + j];
 8000b08:	4b69      	ldr	r3, [pc, #420]	; (8000cb0 <main+0x2ac>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b69      	ldr	r3, [pc, #420]	; (8000cb4 <main+0x2b0>)
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a67      	ldr	r2, [pc, #412]	; (8000cb4 <main+0x2b0>)
 8000b16:	8812      	ldrh	r2, [r2, #0]
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4a63      	ldr	r2, [pc, #396]	; (8000ca8 <main+0x2a4>)
 8000b1c:	5cd2      	ldrb	r2, [r2, r3]
 8000b1e:	4b66      	ldr	r3, [pc, #408]	; (8000cb8 <main+0x2b4>)
 8000b20:	545a      	strb	r2, [r3, r1]
				  for ( j = 0; j < 8; ++j )
 8000b22:	4b64      	ldr	r3, [pc, #400]	; (8000cb4 <main+0x2b0>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	4b62      	ldr	r3, [pc, #392]	; (8000cb4 <main+0x2b0>)
 8000b2c:	801a      	strh	r2, [r3, #0]
 8000b2e:	4b61      	ldr	r3, [pc, #388]	; (8000cb4 <main+0x2b0>)
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	2b07      	cmp	r3, #7
 8000b34:	d9e8      	bls.n	8000b08 <main+0x104>
				  }
				  //do a crc check
				  CRC_Val = CalculateCRC16( Rx_Head, 6 );
 8000b36:	2106      	movs	r1, #6
 8000b38:	485f      	ldr	r0, [pc, #380]	; (8000cb8 <main+0x2b4>)
 8000b3a:	f000 fe5f 	bl	80017fc <CalculateCRC16>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b5e      	ldr	r3, [pc, #376]	; (8000cbc <main+0x2b8>)
 8000b44:	801a      	strh	r2, [r3, #0]
				  uint8_t write [2] = { (CRC_Val >> 8) & 0x00FF, CRC_Val & 0x00FF };
 8000b46:	4b5d      	ldr	r3, [pc, #372]	; (8000cbc <main+0x2b8>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	0a1b      	lsrs	r3, r3, #8
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	713b      	strb	r3, [r7, #4]
 8000b52:	4b5a      	ldr	r3, [pc, #360]	; (8000cbc <main+0x2b8>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	717b      	strb	r3, [r7, #5]
				  Transmit_DMA( &huart1, write, sizeof(write) );
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	4619      	mov	r1, r3
 8000b60:	484a      	ldr	r0, [pc, #296]	; (8000c8c <main+0x288>)
 8000b62:	f000 fd3d 	bl	80015e0 <Transmit_DMA>

				  if ( ( (CRC_Val >> 8) & 0x00FF ) != Rx_Head[6] || ( CRC_Val & 0x00FF ) != Rx_Head[7] )
 8000b66:	4b55      	ldr	r3, [pc, #340]	; (8000cbc <main+0x2b8>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	0a1b      	lsrs	r3, r3, #8
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	4a51      	ldr	r2, [pc, #324]	; (8000cb8 <main+0x2b4>)
 8000b72:	7992      	ldrb	r2, [r2, #6]
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d106      	bne.n	8000b86 <main+0x182>
 8000b78:	4b50      	ldr	r3, [pc, #320]	; (8000cbc <main+0x2b8>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4a4e      	ldr	r2, [pc, #312]	; (8000cb8 <main+0x2b4>)
 8000b80:	79d2      	ldrb	r2, [r2, #7]
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d014      	beq.n	8000bb0 <main+0x1ac>
				  {
					  //prepare error reply head and exit the loop checking the data buffer
					  Make_Rply_Head( Rply_Head, (Rx_Head[2] & 0xFC), 0x08, 0x0, 0x0);
 8000b86:	4b4c      	ldr	r3, [pc, #304]	; (8000cb8 <main+0x2b4>)
 8000b88:	789b      	ldrb	r3, [r3, #2]
 8000b8a:	f023 0303 	bic.w	r3, r3, #3
 8000b8e:	b2d9      	uxtb	r1, r3
 8000b90:	2300      	movs	r3, #0
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	2300      	movs	r3, #0
 8000b96:	2208      	movs	r2, #8
 8000b98:	4849      	ldr	r0, [pc, #292]	; (8000cc0 <main+0x2bc>)
 8000b9a:	f000 fe6f 	bl	800187c <Make_Rply_Head>
					  Transmit_DMA( &huart1, Rply_Head, sizeof(Rply_Head) );
 8000b9e:	2208      	movs	r2, #8
 8000ba0:	4947      	ldr	r1, [pc, #284]	; (8000cc0 <main+0x2bc>)
 8000ba2:	483a      	ldr	r0, [pc, #232]	; (8000c8c <main+0x288>)
 8000ba4:	f000 fd1c 	bl	80015e0 <Transmit_DMA>
					  COM_Status = 0;
 8000ba8:	4b3b      	ldr	r3, [pc, #236]	; (8000c98 <main+0x294>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
					  break;
 8000bae:	e289      	b.n	80010c4 <main+0x6c0>
				  }

				  //if Rx_Head is correct, check if data follows using the "length" byte (Rx_Head[5])
				  if ( Rx_Head[5] != 0 )
 8000bb0:	4b41      	ldr	r3, [pc, #260]	; (8000cb8 <main+0x2b4>)
 8000bb2:	795b      	ldrb	r3, [r3, #5]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f000 8087 	beq.w	8000cc8 <main+0x2c4>
				  {
					  for ( j = 0; j < 2*Rx_Head[5] + 2 ; ++j )
 8000bba:	4b3e      	ldr	r3, [pc, #248]	; (8000cb4 <main+0x2b0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	801a      	strh	r2, [r3, #0]
 8000bc0:	e012      	b.n	8000be8 <main+0x1e4>
					  {
						  Rx_Data[j] = Data_Buffer[ i + 8 + j ];
 8000bc2:	4b3b      	ldr	r3, [pc, #236]	; (8000cb0 <main+0x2ac>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	3308      	adds	r3, #8
 8000bc8:	4a3a      	ldr	r2, [pc, #232]	; (8000cb4 <main+0x2b0>)
 8000bca:	8812      	ldrh	r2, [r2, #0]
 8000bcc:	4413      	add	r3, r2
 8000bce:	4a39      	ldr	r2, [pc, #228]	; (8000cb4 <main+0x2b0>)
 8000bd0:	8812      	ldrh	r2, [r2, #0]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4a34      	ldr	r2, [pc, #208]	; (8000ca8 <main+0x2a4>)
 8000bd6:	5cd2      	ldrb	r2, [r2, r3]
 8000bd8:	4b3a      	ldr	r3, [pc, #232]	; (8000cc4 <main+0x2c0>)
 8000bda:	545a      	strb	r2, [r3, r1]
					  for ( j = 0; j < 2*Rx_Head[5] + 2 ; ++j )
 8000bdc:	4b35      	ldr	r3, [pc, #212]	; (8000cb4 <main+0x2b0>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <main+0x2b0>)
 8000be6:	801a      	strh	r2, [r3, #0]
 8000be8:	4b32      	ldr	r3, [pc, #200]	; (8000cb4 <main+0x2b0>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b32      	ldr	r3, [pc, #200]	; (8000cb8 <main+0x2b4>)
 8000bf0:	795b      	ldrb	r3, [r3, #5]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	dbe3      	blt.n	8000bc2 <main+0x1be>
					  }
					  //check CRC
					  CRC_Val = CalculateCRC16( Rx_Data, Rx_Head[5]*2 ); //"length" is measured in words. Each word = 2 bytes
 8000bfa:	4b2f      	ldr	r3, [pc, #188]	; (8000cb8 <main+0x2b4>)
 8000bfc:	795b      	ldrb	r3, [r3, #5]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	4619      	mov	r1, r3
 8000c02:	4830      	ldr	r0, [pc, #192]	; (8000cc4 <main+0x2c0>)
 8000c04:	f000 fdfa 	bl	80017fc <CalculateCRC16>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b2b      	ldr	r3, [pc, #172]	; (8000cbc <main+0x2b8>)
 8000c0e:	801a      	strh	r2, [r3, #0]

					  uint8_t write [2] = { (CRC_Val >> 8) & 0x00FF, CRC_Val & 0x00FF };
 8000c10:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <main+0x2b8>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	703b      	strb	r3, [r7, #0]
 8000c1c:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <main+0x2b8>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	707b      	strb	r3, [r7, #1]
					  Transmit_DMA( &huart1, write, sizeof(write) );
 8000c24:	463b      	mov	r3, r7
 8000c26:	2202      	movs	r2, #2
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4818      	ldr	r0, [pc, #96]	; (8000c8c <main+0x288>)
 8000c2c:	f000 fcd8 	bl	80015e0 <Transmit_DMA>

					  if ( ( (CRC_Val >> 8) & 0x00FF ) != Rx_Data[ Rx_Head[5]*2] || ( CRC_Val & 0x00FF ) != Rx_Data[ Rx_Head[5]*2 + 1 ] )
 8000c30:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <main+0x2b8>)
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	4a1f      	ldr	r2, [pc, #124]	; (8000cb8 <main+0x2b4>)
 8000c3c:	7952      	ldrb	r2, [r2, #5]
 8000c3e:	0052      	lsls	r2, r2, #1
 8000c40:	4920      	ldr	r1, [pc, #128]	; (8000cc4 <main+0x2c0>)
 8000c42:	5c8a      	ldrb	r2, [r1, r2]
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d10a      	bne.n	8000c5e <main+0x25a>
 8000c48:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <main+0x2b8>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <main+0x2b4>)
 8000c50:	7952      	ldrb	r2, [r2, #5]
 8000c52:	0052      	lsls	r2, r2, #1
 8000c54:	3201      	adds	r2, #1
 8000c56:	491b      	ldr	r1, [pc, #108]	; (8000cc4 <main+0x2c0>)
 8000c58:	5c8a      	ldrb	r2, [r1, r2]
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d034      	beq.n	8000cc8 <main+0x2c4>
					  {
						  Make_Rply_Head( Rply_Head, (Rx_Head[2] & 0xFC), 0x08, 0x0, 0x0);
 8000c5e:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <main+0x2b4>)
 8000c60:	789b      	ldrb	r3, [r3, #2]
 8000c62:	f023 0303 	bic.w	r3, r3, #3
 8000c66:	b2d9      	uxtb	r1, r3
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	2208      	movs	r2, #8
 8000c70:	4813      	ldr	r0, [pc, #76]	; (8000cc0 <main+0x2bc>)
 8000c72:	f000 fe03 	bl	800187c <Make_Rply_Head>
						  Transmit_DMA( &huart1, Rply_Head, sizeof(Rply_Head) );
 8000c76:	2208      	movs	r2, #8
 8000c78:	4911      	ldr	r1, [pc, #68]	; (8000cc0 <main+0x2bc>)
 8000c7a:	4804      	ldr	r0, [pc, #16]	; (8000c8c <main+0x288>)
 8000c7c:	f000 fcb0 	bl	80015e0 <Transmit_DMA>
						  COM_Status = 0;
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <main+0x294>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
					  break;
 8000c86:	e21d      	b.n	80010c4 <main+0x6c0>
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000134 	.word	0x20000134
 8000c90:	20000244 	.word	0x20000244
 8000c94:	200002e4 	.word	0x200002e4
 8000c98:	20000904 	.word	0x20000904
 8000c9c:	200000e8 	.word	0x200000e8
 8000ca0:	20000050 	.word	0x20000050
 8000ca4:	48000400 	.word	0x48000400
 8000ca8:	20000400 	.word	0x20000400
 8000cac:	08006cb0 	.word	0x08006cb0
 8000cb0:	20000928 	.word	0x20000928
 8000cb4:	2000092a 	.word	0x2000092a
 8000cb8:	200003e4 	.word	0x200003e4
 8000cbc:	2000092c 	.word	0x2000092c
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	200003ec 	.word	0x200003ec


				  }
				  //If data crc is correct/there is no data, continue on to the index.
				  //check Index
				  switch ( Rx_Head[3] )
 8000cc8:	4b97      	ldr	r3, [pc, #604]	; (8000f28 <main+0x524>)
 8000cca:	78db      	ldrb	r3, [r3, #3]
 8000ccc:	2bfe      	cmp	r3, #254	; 0xfe
 8000cce:	f000 81ba 	beq.w	8001046 <main+0x642>
 8000cd2:	2bfe      	cmp	r3, #254	; 0xfe
 8000cd4:	f300 81e8 	bgt.w	80010a8 <main+0x6a4>
 8000cd8:	2bd0      	cmp	r3, #208	; 0xd0
 8000cda:	f000 81a5 	beq.w	8001028 <main+0x624>
 8000cde:	2bd0      	cmp	r3, #208	; 0xd0
 8000ce0:	f300 81e2 	bgt.w	80010a8 <main+0x6a4>
 8000ce4:	2b12      	cmp	r3, #18
 8000ce6:	dc2d      	bgt.n	8000d44 <main+0x340>
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f340 81dd 	ble.w	80010a8 <main+0x6a4>
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	2b11      	cmp	r3, #17
 8000cf2:	f200 81d9 	bhi.w	80010a8 <main+0x6a4>
 8000cf6:	a201      	add	r2, pc, #4	; (adr r2, 8000cfc <main+0x2f8>)
 8000cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfc:	08000d4d 	.word	0x08000d4d
 8000d00:	080010a9 	.word	0x080010a9
 8000d04:	080010a9 	.word	0x080010a9
 8000d08:	080010a9 	.word	0x080010a9
 8000d0c:	080010a9 	.word	0x080010a9
 8000d10:	080010a9 	.word	0x080010a9
 8000d14:	080010a9 	.word	0x080010a9
 8000d18:	080010a9 	.word	0x080010a9
 8000d1c:	080010a9 	.word	0x080010a9
 8000d20:	080010a9 	.word	0x080010a9
 8000d24:	080010a9 	.word	0x080010a9
 8000d28:	080010a9 	.word	0x080010a9
 8000d2c:	080010a9 	.word	0x080010a9
 8000d30:	080010a9 	.word	0x080010a9
 8000d34:	080010a9 	.word	0x080010a9
 8000d38:	08000d63 	.word	0x08000d63
 8000d3c:	08000d6b 	.word	0x08000d6b
 8000d40:	08000ee5 	.word	0x08000ee5
 8000d44:	2b36      	cmp	r3, #54	; 0x36
 8000d46:	f000 80cd 	beq.w	8000ee4 <main+0x4e0>
 8000d4a:	e1ad      	b.n	80010a8 <main+0x6a4>
				  {
				  case 0x01:
					  HAL_TIM_Base_Stop_IT(&htim6);
 8000d4c:	4877      	ldr	r0, [pc, #476]	; (8000f2c <main+0x528>)
 8000d4e:	f003 fa97 	bl	8004280 <HAL_TIM_Base_Stop_IT>
					  TIM1->CCR1 = 1607;
 8000d52:	4b77      	ldr	r3, [pc, #476]	; (8000f30 <main+0x52c>)
 8000d54:	f240 6247 	movw	r2, #1607	; 0x647
 8000d58:	635a      	str	r2, [r3, #52]	; 0x34
					  COM_Status = 0;
 8000d5a:	4b76      	ldr	r3, [pc, #472]	; (8000f34 <main+0x530>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
					  break;
 8000d60:	e1a2      	b.n	80010a8 <main+0x6a4>
				  case 0x10:
					  COM_Status = 0;
 8000d62:	4b74      	ldr	r3, [pc, #464]	; (8000f34 <main+0x530>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
					  break;
 8000d68:	e19e      	b.n	80010a8 <main+0x6a4>
				  case 0x11:
					  //for a more in-depth protocol: if offset is 04 -> set target velocity (in rpm)
					  //output current rpm
					  Make_Rply_Head( Rply_Head, ( (Rx_Head[2] & 0xFC) | 0x02 ), 0x01, 0, 2);
 8000d6a:	4b6f      	ldr	r3, [pc, #444]	; (8000f28 <main+0x524>)
 8000d6c:	789b      	ldrb	r3, [r3, #2]
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	f023 0303 	bic.w	r3, r3, #3
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	f043 0302 	orr.w	r3, r3, #2
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	b2d9      	uxtb	r1, r3
 8000d7e:	2302      	movs	r3, #2
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	2300      	movs	r3, #0
 8000d84:	2201      	movs	r2, #1
 8000d86:	486c      	ldr	r0, [pc, #432]	; (8000f38 <main+0x534>)
 8000d88:	f000 fd78 	bl	800187c <Make_Rply_Head>

					  Vel_Measured.INT = (int32_t)( Speed_TIM6_Measured  ); //outputs rpm * ( 200.0 * 60.0 * (1.0/5120.0) )
 8000d8c:	4b6b      	ldr	r3, [pc, #428]	; (8000f3c <main+0x538>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a6b      	ldr	r2, [pc, #428]	; (8000f40 <main+0x53c>)
 8000d92:	6013      	str	r3, [r2, #0]

					  for( k = 0; k < 4; ++k )
 8000d94:	4b6b      	ldr	r3, [pc, #428]	; (8000f44 <main+0x540>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	801a      	strh	r2, [r3, #0]
 8000d9a:	e010      	b.n	8000dbe <main+0x3ba>
						  Rply_Data[k] = Vel_Measured.byte[3-k];
 8000d9c:	4b69      	ldr	r3, [pc, #420]	; (8000f44 <main+0x540>)
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	f1c3 0303 	rsb	r3, r3, #3
 8000da4:	4a67      	ldr	r2, [pc, #412]	; (8000f44 <main+0x540>)
 8000da6:	8812      	ldrh	r2, [r2, #0]
 8000da8:	4611      	mov	r1, r2
 8000daa:	4a65      	ldr	r2, [pc, #404]	; (8000f40 <main+0x53c>)
 8000dac:	5cd2      	ldrb	r2, [r2, r3]
 8000dae:	4b66      	ldr	r3, [pc, #408]	; (8000f48 <main+0x544>)
 8000db0:	545a      	strb	r2, [r3, r1]
					  for( k = 0; k < 4; ++k )
 8000db2:	4b64      	ldr	r3, [pc, #400]	; (8000f44 <main+0x540>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	4b62      	ldr	r3, [pc, #392]	; (8000f44 <main+0x540>)
 8000dbc:	801a      	strh	r2, [r3, #0]
 8000dbe:	4b61      	ldr	r3, [pc, #388]	; (8000f44 <main+0x540>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d9ea      	bls.n	8000d9c <main+0x398>
					  //most significant bit at the highest k/ at the end of the array.
					  CRC_Val = CalculateCRC16( Rply_Data, Rx_Head[5]*2 );
 8000dc6:	4b58      	ldr	r3, [pc, #352]	; (8000f28 <main+0x524>)
 8000dc8:	795b      	ldrb	r3, [r3, #5]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4619      	mov	r1, r3
 8000dce:	485e      	ldr	r0, [pc, #376]	; (8000f48 <main+0x544>)
 8000dd0:	f000 fd14 	bl	80017fc <CalculateCRC16>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4b5c      	ldr	r3, [pc, #368]	; (8000f4c <main+0x548>)
 8000dda:	801a      	strh	r2, [r3, #0]
					  Rply_Data[5] = ( CRC_Val >> 8 ) & 0x00FF;
 8000ddc:	4b5b      	ldr	r3, [pc, #364]	; (8000f4c <main+0x548>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b58      	ldr	r3, [pc, #352]	; (8000f48 <main+0x544>)
 8000de8:	715a      	strb	r2, [r3, #5]
					  Rply_Data[6] = CRC_Val & 0x00FF;
 8000dea:	4b58      	ldr	r3, [pc, #352]	; (8000f4c <main+0x548>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b55      	ldr	r3, [pc, #340]	; (8000f48 <main+0x544>)
 8000df2:	719a      	strb	r2, [r3, #6]

					  for ( k = 0; k < 8; ++k )
 8000df4:	4b53      	ldr	r3, [pc, #332]	; (8000f44 <main+0x540>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	801a      	strh	r2, [r3, #0]
 8000dfa:	e00f      	b.n	8000e1c <main+0x418>
						  Tx_Buffer[k] = Rply_Head[k];
 8000dfc:	4b51      	ldr	r3, [pc, #324]	; (8000f44 <main+0x540>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	4b50      	ldr	r3, [pc, #320]	; (8000f44 <main+0x540>)
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b4b      	ldr	r3, [pc, #300]	; (8000f38 <main+0x534>)
 8000e0a:	5c59      	ldrb	r1, [r3, r1]
 8000e0c:	4b50      	ldr	r3, [pc, #320]	; (8000f50 <main+0x54c>)
 8000e0e:	5499      	strb	r1, [r3, r2]
					  for ( k = 0; k < 8; ++k )
 8000e10:	4b4c      	ldr	r3, [pc, #304]	; (8000f44 <main+0x540>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	3301      	adds	r3, #1
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	4b4a      	ldr	r3, [pc, #296]	; (8000f44 <main+0x540>)
 8000e1a:	801a      	strh	r2, [r3, #0]
 8000e1c:	4b49      	ldr	r3, [pc, #292]	; (8000f44 <main+0x540>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	2b07      	cmp	r3, #7
 8000e22:	d9eb      	bls.n	8000dfc <main+0x3f8>
					  for ( k = 0; k < 6; ++k )
 8000e24:	4b47      	ldr	r3, [pc, #284]	; (8000f44 <main+0x540>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	801a      	strh	r2, [r3, #0]
 8000e2a:	e00f      	b.n	8000e4c <main+0x448>
						  Tx_Buffer[ k + 8 ] = Rply_Data[k];
 8000e2c:	4b45      	ldr	r3, [pc, #276]	; (8000f44 <main+0x540>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	4b44      	ldr	r3, [pc, #272]	; (8000f44 <main+0x540>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	3308      	adds	r3, #8
 8000e38:	4a43      	ldr	r2, [pc, #268]	; (8000f48 <main+0x544>)
 8000e3a:	5c51      	ldrb	r1, [r2, r1]
 8000e3c:	4a44      	ldr	r2, [pc, #272]	; (8000f50 <main+0x54c>)
 8000e3e:	54d1      	strb	r1, [r2, r3]
					  for ( k = 0; k < 6; ++k )
 8000e40:	4b40      	ldr	r3, [pc, #256]	; (8000f44 <main+0x540>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	4b3e      	ldr	r3, [pc, #248]	; (8000f44 <main+0x540>)
 8000e4a:	801a      	strh	r2, [r3, #0]
 8000e4c:	4b3d      	ldr	r3, [pc, #244]	; (8000f44 <main+0x540>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	2b05      	cmp	r3, #5
 8000e52:	d9eb      	bls.n	8000e2c <main+0x428>

					  Transmit_DMA( &huart1, Tx_Buffer, 14 );
 8000e54:	220e      	movs	r2, #14
 8000e56:	493e      	ldr	r1, [pc, #248]	; (8000f50 <main+0x54c>)
 8000e58:	483e      	ldr	r0, [pc, #248]	; (8000f54 <main+0x550>)
 8000e5a:	f000 fbc1 	bl	80015e0 <Transmit_DMA>

					  switch( Rx_Head[4] )
 8000e5e:	4b32      	ldr	r3, [pc, #200]	; (8000f28 <main+0x524>)
 8000e60:	791b      	ldrb	r3, [r3, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d039      	beq.n	8000eda <main+0x4d6>
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	d138      	bne.n	8000edc <main+0x4d8>
					  {
					  case 0x00:
						  break;
					  case 0x04:
						  for ( k = 0; k < 4; ++k )
 8000e6a:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <main+0x540>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	801a      	strh	r2, [r3, #0]
 8000e70:	e010      	b.n	8000e94 <main+0x490>
							  Vel_Target.byte[3-k]= Rx_Data[k];
 8000e72:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <main+0x540>)
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	4619      	mov	r1, r3
 8000e78:	4b32      	ldr	r3, [pc, #200]	; (8000f44 <main+0x540>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	f1c3 0303 	rsb	r3, r3, #3
 8000e80:	4a35      	ldr	r2, [pc, #212]	; (8000f58 <main+0x554>)
 8000e82:	5c51      	ldrb	r1, [r2, r1]
 8000e84:	4a35      	ldr	r2, [pc, #212]	; (8000f5c <main+0x558>)
 8000e86:	54d1      	strb	r1, [r2, r3]
						  for ( k = 0; k < 4; ++k )
 8000e88:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <main+0x540>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <main+0x540>)
 8000e92:	801a      	strh	r2, [r3, #0]
 8000e94:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <main+0x540>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d9ea      	bls.n	8000e72 <main+0x46e>
						  Speed_TIM6_Target = (int32_t)( Vel_Target.INT /200.0 );
 8000e9c:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <main+0x558>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff faeb 	bl	800047c <__aeabi_i2d>
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <main+0x55c>)
 8000eac:	f7ff fc7a 	bl	80007a4 <__aeabi_ddiv>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f7ff fd5c 	bl	8000974 <__aeabi_d2iz>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	4a29      	ldr	r2, [pc, #164]	; (8000f64 <main+0x560>)
 8000ec0:	6013      	str	r3, [r2, #0]
						  //velocity will be measured in CNT/5sec -> to get rpm, mutliply by 60/5120
						  if(Speed_TIM6_Target < 0)
 8000ec2:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <main+0x560>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	da03      	bge.n	8000ed2 <main+0x4ce>
						  {
							  CCW = 1;
 8000eca:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <main+0x564>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
						  }
						  else
						  {
							  CCW = 0;
						  }
						  break;
 8000ed0:	e004      	b.n	8000edc <main+0x4d8>
							  CCW = 0;
 8000ed2:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <main+0x564>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
						  break;
 8000ed8:	e000      	b.n	8000edc <main+0x4d8>
						  break;
 8000eda:	bf00      	nop
					  }

					  COM_Status = 0;
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <main+0x530>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
					  break;
 8000ee2:	e0e1      	b.n	80010a8 <main+0x6a4>

				  case 0x12:
				  case 0x36:
					  //PID initialization
					  //turning data bytes into float numbers
					  for( k = 0; k < 4; ++k )
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <main+0x540>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	801a      	strh	r2, [r3, #0]
 8000eea:	e011      	b.n	8000f10 <main+0x50c>
						  Kp.byte[3-k] = Rx_Data[k];
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <main+0x540>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <main+0x554>)
 8000ef4:	5c9a      	ldrb	r2, [r3, r2]
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <main+0x540>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	f1c3 0303 	rsb	r3, r3, #3
 8000efe:	b251      	sxtb	r1, r2
 8000f00:	4a1a      	ldr	r2, [pc, #104]	; (8000f6c <main+0x568>)
 8000f02:	54d1      	strb	r1, [r2, r3]
					  for( k = 0; k < 4; ++k )
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <main+0x540>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <main+0x540>)
 8000f0e:	801a      	strh	r2, [r3, #0]
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <main+0x540>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d9e9      	bls.n	8000eec <main+0x4e8>
					  vKp = Kp.flt;
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <main+0x568>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <main+0x56c>)
 8000f1e:	6013      	str	r3, [r2, #0]

					  for( k = 0; k < 4; ++k )
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <main+0x540>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	801a      	strh	r2, [r3, #0]
 8000f26:	e037      	b.n	8000f98 <main+0x594>
 8000f28:	200003e4 	.word	0x200003e4
 8000f2c:	2000009c 	.word	0x2000009c
 8000f30:	40012c00 	.word	0x40012c00
 8000f34:	20000904 	.word	0x20000904
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000908 	.word	0x20000908
 8000f40:	200002dc 	.word	0x200002dc
 8000f44:	20000934 	.word	0x20000934
 8000f48:	20000500 	.word	0x20000500
 8000f4c:	2000092c 	.word	0x2000092c
 8000f50:	20000700 	.word	0x20000700
 8000f54:	20000134 	.word	0x20000134
 8000f58:	200003ec 	.word	0x200003ec
 8000f5c:	200002e0 	.word	0x200002e0
 8000f60:	40690000 	.word	0x40690000
 8000f64:	2000090c 	.word	0x2000090c
 8000f68:	20000948 	.word	0x20000948
 8000f6c:	200002cc 	.word	0x200002cc
 8000f70:	20000938 	.word	0x20000938
						  Ki.byte[3-k] = Rx_Data[4 + k];
 8000f74:	4b55      	ldr	r3, [pc, #340]	; (80010cc <main+0x6c8>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	4a55      	ldr	r2, [pc, #340]	; (80010d0 <main+0x6cc>)
 8000f7c:	5cd2      	ldrb	r2, [r2, r3]
 8000f7e:	4b53      	ldr	r3, [pc, #332]	; (80010cc <main+0x6c8>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	f1c3 0303 	rsb	r3, r3, #3
 8000f86:	b251      	sxtb	r1, r2
 8000f88:	4a52      	ldr	r2, [pc, #328]	; (80010d4 <main+0x6d0>)
 8000f8a:	54d1      	strb	r1, [r2, r3]
					  for( k = 0; k < 4; ++k )
 8000f8c:	4b4f      	ldr	r3, [pc, #316]	; (80010cc <main+0x6c8>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	4b4d      	ldr	r3, [pc, #308]	; (80010cc <main+0x6c8>)
 8000f96:	801a      	strh	r2, [r3, #0]
 8000f98:	4b4c      	ldr	r3, [pc, #304]	; (80010cc <main+0x6c8>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d9e9      	bls.n	8000f74 <main+0x570>
					  vKi = Ki.flt;
 8000fa0:	4b4c      	ldr	r3, [pc, #304]	; (80010d4 <main+0x6d0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a4c      	ldr	r2, [pc, #304]	; (80010d8 <main+0x6d4>)
 8000fa6:	6013      	str	r3, [r2, #0]

					  for( k = 0; k < 4; ++k )
 8000fa8:	4b48      	ldr	r3, [pc, #288]	; (80010cc <main+0x6c8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
 8000fae:	e011      	b.n	8000fd4 <main+0x5d0>
						  Kd.byte[3-k] = Rx_Data[8 + k];
 8000fb0:	4b46      	ldr	r3, [pc, #280]	; (80010cc <main+0x6c8>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	3308      	adds	r3, #8
 8000fb6:	4a46      	ldr	r2, [pc, #280]	; (80010d0 <main+0x6cc>)
 8000fb8:	5cd2      	ldrb	r2, [r2, r3]
 8000fba:	4b44      	ldr	r3, [pc, #272]	; (80010cc <main+0x6c8>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	f1c3 0303 	rsb	r3, r3, #3
 8000fc2:	b251      	sxtb	r1, r2
 8000fc4:	4a45      	ldr	r2, [pc, #276]	; (80010dc <main+0x6d8>)
 8000fc6:	54d1      	strb	r1, [r2, r3]
					  for( k = 0; k < 4; ++k )
 8000fc8:	4b40      	ldr	r3, [pc, #256]	; (80010cc <main+0x6c8>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	4b3e      	ldr	r3, [pc, #248]	; (80010cc <main+0x6c8>)
 8000fd2:	801a      	strh	r2, [r3, #0]
 8000fd4:	4b3d      	ldr	r3, [pc, #244]	; (80010cc <main+0x6c8>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d9e9      	bls.n	8000fb0 <main+0x5ac>
					  vKd = Kd.flt;
 8000fdc:	4b3f      	ldr	r3, [pc, #252]	; (80010dc <main+0x6d8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a3f      	ldr	r2, [pc, #252]	; (80010e0 <main+0x6dc>)
 8000fe2:	6013      	str	r3, [r2, #0]

					  for( k = 0; k < 4; ++k )
 8000fe4:	4b39      	ldr	r3, [pc, #228]	; (80010cc <main+0x6c8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	801a      	strh	r2, [r3, #0]
 8000fea:	e011      	b.n	8001010 <main+0x60c>
						  Ka.byte[3-k] = Rx_Data[12 + k];
 8000fec:	4b37      	ldr	r3, [pc, #220]	; (80010cc <main+0x6c8>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	330c      	adds	r3, #12
 8000ff2:	4a37      	ldr	r2, [pc, #220]	; (80010d0 <main+0x6cc>)
 8000ff4:	5cd2      	ldrb	r2, [r2, r3]
 8000ff6:	4b35      	ldr	r3, [pc, #212]	; (80010cc <main+0x6c8>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	f1c3 0303 	rsb	r3, r3, #3
 8000ffe:	b251      	sxtb	r1, r2
 8001000:	4a38      	ldr	r2, [pc, #224]	; (80010e4 <main+0x6e0>)
 8001002:	54d1      	strb	r1, [r2, r3]
					  for( k = 0; k < 4; ++k )
 8001004:	4b31      	ldr	r3, [pc, #196]	; (80010cc <main+0x6c8>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <main+0x6c8>)
 800100e:	801a      	strh	r2, [r3, #0]
 8001010:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <main+0x6c8>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	2b03      	cmp	r3, #3
 8001016:	d9e9      	bls.n	8000fec <main+0x5e8>
					  vKa = Ka.flt; //what is vKa used for?
 8001018:	4b32      	ldr	r3, [pc, #200]	; (80010e4 <main+0x6e0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a32      	ldr	r2, [pc, #200]	; (80010e8 <main+0x6e4>)
 800101e:	6013      	str	r3, [r2, #0]

					  COM_Status = 0;
 8001020:	4b32      	ldr	r3, [pc, #200]	; (80010ec <main+0x6e8>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
					  break;
 8001026:	e03f      	b.n	80010a8 <main+0x6a4>

				  case 0xD0:
					  //start TIM6 timer and enable it's interrupt + NVIC priority
					  //Why is the timer and interrupt enabled here?
					  HAL_TIM_Base_Start_IT(&htim6);
 8001028:	4831      	ldr	r0, [pc, #196]	; (80010f0 <main+0x6ec>)
 800102a:	f003 f8d5 	bl	80041d8 <HAL_TIM_Base_Start_IT>
					  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0); //set NVIC priority
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2036      	movs	r0, #54	; 0x36
 8001034:	f001 f84b 	bl	80020ce <HAL_NVIC_SetPriority>
					  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); //enable interrupt
 8001038:	2036      	movs	r0, #54	; 0x36
 800103a:	f001 f864 	bl	8002106 <HAL_NVIC_EnableIRQ>
					  COM_Status = 0;
 800103e:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <main+0x6e8>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
					  break;
 8001044:	e030      	b.n	80010a8 <main+0x6a4>
				  case 0xFE:
					  CRC_Val = CalculateCRC16( Rx_Data, Rx_Head[5]*2 );
 8001046:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <main+0x6f0>)
 8001048:	795b      	ldrb	r3, [r3, #5]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4619      	mov	r1, r3
 800104e:	4820      	ldr	r0, [pc, #128]	; (80010d0 <main+0x6cc>)
 8001050:	f000 fbd4 	bl	80017fc <CalculateCRC16>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <main+0x6f4>)
 800105a:	801a      	strh	r2, [r3, #0]
					  Make_Rply_Head( Rply_Head, ( (Rx_Head[2] & 0xFC) | 0x02 ), 0x01, 0, 1);
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <main+0x6f0>)
 800105e:	789b      	ldrb	r3, [r3, #2]
 8001060:	b25b      	sxtb	r3, r3
 8001062:	f023 0303 	bic.w	r3, r3, #3
 8001066:	b25b      	sxtb	r3, r3
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	b25b      	sxtb	r3, r3
 800106e:	b2d9      	uxtb	r1, r3
 8001070:	2301      	movs	r3, #1
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2300      	movs	r3, #0
 8001076:	2201      	movs	r2, #1
 8001078:	4820      	ldr	r0, [pc, #128]	; (80010fc <main+0x6f8>)
 800107a:	f000 fbff 	bl	800187c <Make_Rply_Head>
					  Rply_Data[0] = ( CRC_Val >> 8 ) & 0x00FF;
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <main+0x6f4>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	0a1b      	lsrs	r3, r3, #8
 8001084:	b29b      	uxth	r3, r3
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <main+0x6fc>)
 800108a:	701a      	strb	r2, [r3, #0]
					  Rply_Data[1] = CRC_Val & 0x00FF;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <main+0x6f4>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <main+0x6fc>)
 8001094:	705a      	strb	r2, [r3, #1]
					  /*for ( k = 0; k < 8; ++k )
						  Tx_Buffer[k] = Rply_Head[k];
					  for ( k = 0; k < 4; ++k )
						  Tx_Buffer[ k + 8 ] = Rply_Data[k];*/

					  Transmit_DMA( &huart1, Rply_Data, 2 );
 8001096:	2202      	movs	r2, #2
 8001098:	4919      	ldr	r1, [pc, #100]	; (8001100 <main+0x6fc>)
 800109a:	481a      	ldr	r0, [pc, #104]	; (8001104 <main+0x700>)
 800109c:	f000 faa0 	bl	80015e0 <Transmit_DMA>

					  COM_Status = 0;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <main+0x6e8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
					  break;
 80010a6:	bf00      	nop
		  for( i = 0; i < Rx_Counter; ++i )
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <main+0x704>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <main+0x704>)
 80010b2:	801a      	strh	r2, [r3, #0]
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <main+0x704>)
 80010b6:	881a      	ldrh	r2, [r3, #0]
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <main+0x708>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	429a      	cmp	r2, r3
 80010c0:	f4ff ad16 	bcc.w	8000af0 <main+0xec>
				  }
			  }

		  }

		  COM_Status = 0;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <main+0x6e8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
	  if( COM_Status == 1 )
 80010ca:	e4f9      	b.n	8000ac0 <main+0xbc>
 80010cc:	20000934 	.word	0x20000934
 80010d0:	200003ec 	.word	0x200003ec
 80010d4:	200002d0 	.word	0x200002d0
 80010d8:	2000093c 	.word	0x2000093c
 80010dc:	200002d4 	.word	0x200002d4
 80010e0:	20000940 	.word	0x20000940
 80010e4:	200002d8 	.word	0x200002d8
 80010e8:	20000944 	.word	0x20000944
 80010ec:	20000904 	.word	0x20000904
 80010f0:	2000009c 	.word	0x2000009c
 80010f4:	200003e4 	.word	0x200003e4
 80010f8:	2000092c 	.word	0x2000092c
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000500 	.word	0x20000500
 8001104:	20000134 	.word	0x20000134
 8001108:	20000928 	.word	0x20000928
 800110c:	20000902 	.word	0x20000902

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b09c      	sub	sp, #112	; 0x70
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800111a:	2228      	movs	r2, #40	; 0x28
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f005 fdb2 	bl	8006c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001134:	463b      	mov	r3, r7
 8001136:	2234      	movs	r2, #52	; 0x34
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f005 fda4 	bl	8006c88 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001140:	2302      	movs	r3, #2
 8001142:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001144:	2301      	movs	r3, #1
 8001146:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001148:	2310      	movs	r3, #16
 800114a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114c:	2302      	movs	r3, #2
 800114e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001150:	2300      	movs	r3, #0
 8001152:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001154:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001158:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800115e:	4618      	mov	r0, r3
 8001160:	f001 fb90 	bl	8002884 <HAL_RCC_OscConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800116a:	f000 fbc7 	bl	80018fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116e:	230f      	movs	r3, #15
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001172:	2302      	movs	r3, #2
 8001174:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001184:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001188:	2102      	movs	r1, #2
 800118a:	4618      	mov	r0, r3
 800118c:	f002 fbb8 	bl	8003900 <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001196:	f000 fbb1 	bl	80018fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM15;
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <SystemClock_Config+0xb0>)
 800119c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a6:	463b      	mov	r3, r7
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 fddf 	bl	8003d6c <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80011b4:	f000 fba2 	bl	80018fc <Error_Handler>
  }
}
 80011b8:	bf00      	nop
 80011ba:	3770      	adds	r7, #112	; 0x70
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	00040001 	.word	0x00040001

080011c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	; 0x30
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2224      	movs	r2, #36	; 0x24
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f005 fd58 	bl	8006c88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MX_TIM2_Init+0xa4>)
 80011e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <MX_TIM2_Init+0xa4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <MX_TIM2_Init+0xa4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MX_TIM2_Init+0xa4>)
 80011f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_TIM2_Init+0xa4>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <MX_TIM2_Init+0xa4>)
 8001206:	2200      	movs	r2, #0
 8001208:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800120a:	2303      	movs	r3, #3
 800120c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001212:	2301      	movs	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001222:	2301      	movs	r3, #1
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	4619      	mov	r1, r3
 8001234:	480c      	ldr	r0, [pc, #48]	; (8001268 <MX_TIM2_Init+0xa4>)
 8001236:	f003 f98f 	bl	8004558 <HAL_TIM_Encoder_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001240:	f000 fb5c 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001244:	2300      	movs	r3, #0
 8001246:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800124c:	463b      	mov	r3, r7
 800124e:	4619      	mov	r1, r3
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_TIM2_Init+0xa4>)
 8001252:	f004 f8e9 	bl	8005428 <HAL_TIMEx_MasterConfigSynchronization>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800125c:	f000 fb4e 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	3730      	adds	r7, #48	; 0x30
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000050 	.word	0x20000050

0800126c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <MX_TIM6_Init+0x64>)
 800127e:	4a15      	ldr	r2, [pc, #84]	; (80012d4 <MX_TIM6_Init+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <MX_TIM6_Init+0x64>)
 8001284:	220f      	movs	r2, #15
 8001286:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <MX_TIM6_Init+0x64>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <MX_TIM6_Init+0x64>)
 8001290:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001294:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_TIM6_Init+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800129c:	480c      	ldr	r0, [pc, #48]	; (80012d0 <MX_TIM6_Init+0x64>)
 800129e:	f002 fef7 	bl	8004090 <HAL_TIM_Base_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80012a8:	f000 fb28 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_TIM6_Init+0x64>)
 80012ba:	f004 f8b5 	bl	8005428 <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80012c4:	f000 fb1a 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000009c 	.word	0x2000009c
 80012d4:	40001000 	.word	0x40001000

080012d8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b096      	sub	sp, #88	; 0x58
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]
 80012fa:	615a      	str	r2, [r3, #20]
 80012fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	222c      	movs	r2, #44	; 0x2c
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f005 fcbf 	bl	8006c88 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800130a:	4b34      	ldr	r3, [pc, #208]	; (80013dc <MX_TIM15_Init+0x104>)
 800130c:	4a34      	ldr	r2, [pc, #208]	; (80013e0 <MX_TIM15_Init+0x108>)
 800130e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001310:	4b32      	ldr	r3, [pc, #200]	; (80013dc <MX_TIM15_Init+0x104>)
 8001312:	2200      	movs	r2, #0
 8001314:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b31      	ldr	r3, [pc, #196]	; (80013dc <MX_TIM15_Init+0x104>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3214;
 800131c:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <MX_TIM15_Init+0x104>)
 800131e:	f640 428e 	movw	r2, #3214	; 0xc8e
 8001322:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <MX_TIM15_Init+0x104>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800132a:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <MX_TIM15_Init+0x104>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001330:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <MX_TIM15_Init+0x104>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001336:	4829      	ldr	r0, [pc, #164]	; (80013dc <MX_TIM15_Init+0x104>)
 8001338:	f002 ffd1 	bl	80042de <HAL_TIM_PWM_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001342:	f000 fadb 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800134e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001352:	4619      	mov	r1, r3
 8001354:	4821      	ldr	r0, [pc, #132]	; (80013dc <MX_TIM15_Init+0x104>)
 8001356:	f004 f867 	bl	8005428 <HAL_TIMEx_MasterConfigSynchronization>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001360:	f000 facc 	bl	80018fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001364:	2360      	movs	r3, #96	; 0x60
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136c:	2300      	movs	r3, #0
 800136e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001370:	2300      	movs	r3, #0
 8001372:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800137c:	2300      	movs	r3, #0
 800137e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001380:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001384:	2200      	movs	r2, #0
 8001386:	4619      	mov	r1, r3
 8001388:	4814      	ldr	r0, [pc, #80]	; (80013dc <MX_TIM15_Init+0x104>)
 800138a:	f003 fb39 	bl	8004a00 <HAL_TIM_PWM_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001394:	f000 fab2 	bl	80018fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4619      	mov	r1, r3
 80013be:	4807      	ldr	r0, [pc, #28]	; (80013dc <MX_TIM15_Init+0x104>)
 80013c0:	f004 f898 	bl	80054f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 80013ca:	f000 fa97 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80013ce:	4803      	ldr	r0, [pc, #12]	; (80013dc <MX_TIM15_Init+0x104>)
 80013d0:	f000 fb44 	bl	8001a5c <HAL_TIM_MspPostInit>

}
 80013d4:	bf00      	nop
 80013d6:	3758      	adds	r7, #88	; 0x58
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200000e8 	.word	0x200000e8
 80013e0:	40014000 	.word	0x40014000

080013e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_USART1_UART_Init+0x58>)
 80013ea:	4a15      	ldr	r2, [pc, #84]	; (8001440 <MX_USART1_UART_Init+0x5c>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_USART1_UART_Init+0x58>)
 80013f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80013f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_USART1_UART_Init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_USART1_UART_Init+0x58>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_USART1_UART_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_USART1_UART_Init+0x58>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <MX_USART1_UART_Init+0x58>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_USART1_UART_Init+0x58>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <MX_USART1_UART_Init+0x58>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_USART1_UART_Init+0x58>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_USART1_UART_Init+0x58>)
 8001428:	f004 f91f 	bl	800566a <HAL_UART_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001432:	f000 fa63 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000134 	.word	0x20000134
 8001440:	40013800 	.word	0x40013800

08001444 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <MX_USART2_UART_Init+0x58>)
 800144a:	4a15      	ldr	r2, [pc, #84]	; (80014a0 <MX_USART2_UART_Init+0x5c>)
 800144c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <MX_USART2_UART_Init+0x58>)
 8001450:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_USART2_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MX_USART2_UART_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <MX_USART2_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <MX_USART2_UART_Init+0x58>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <MX_USART2_UART_Init+0x58>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <MX_USART2_UART_Init+0x58>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <MX_USART2_UART_Init+0x58>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_USART2_UART_Init+0x58>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_USART2_UART_Init+0x58>)
 8001488:	f004 f8ef 	bl	800566a <HAL_UART_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001492:	f000 fa33 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200001bc 	.word	0x200001bc
 80014a0:	40004400 	.word	0x40004400

080014a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <MX_DMA_Init+0x48>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	4a0f      	ldr	r2, [pc, #60]	; (80014ec <MX_DMA_Init+0x48>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6153      	str	r3, [r2, #20]
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <MX_DMA_Init+0x48>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	200e      	movs	r0, #14
 80014c8:	f000 fe01 	bl	80020ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80014cc:	200e      	movs	r0, #14
 80014ce:	f000 fe1a 	bl	8002106 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	200f      	movs	r0, #15
 80014d8:	f000 fdf9 	bl	80020ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80014dc:	200f      	movs	r0, #15
 80014de:	f000 fe12 	bl	8002106 <HAL_NVIC_EnableIRQ>

}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000

080014f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001506:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <MX_GPIO_Init+0xc4>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	4a2a      	ldr	r2, [pc, #168]	; (80015b4 <MX_GPIO_Init+0xc4>)
 800150c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001510:	6153      	str	r3, [r2, #20]
 8001512:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <MX_GPIO_Init+0xc4>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800151e:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <MX_GPIO_Init+0xc4>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	4a24      	ldr	r2, [pc, #144]	; (80015b4 <MX_GPIO_Init+0xc4>)
 8001524:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001528:	6153      	str	r3, [r2, #20]
 800152a:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <MX_GPIO_Init+0xc4>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <MX_GPIO_Init+0xc4>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	4a1e      	ldr	r2, [pc, #120]	; (80015b4 <MX_GPIO_Init+0xc4>)
 800153c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001540:	6153      	str	r3, [r2, #20]
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MX_GPIO_Init+0xc4>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_GPIO_Init+0xc4>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	4a18      	ldr	r2, [pc, #96]	; (80015b4 <MX_GPIO_Init+0xc4>)
 8001554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001558:	6153      	str	r3, [r2, #20]
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <MX_GPIO_Init+0xc4>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	f242 0130 	movw	r1, #8240	; 0x2030
 800156c:	4812      	ldr	r0, [pc, #72]	; (80015b8 <MX_GPIO_Init+0xc8>)
 800156e:	f001 f971 	bl	8002854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001572:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001578:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <MX_GPIO_Init+0xcc>)
 800158a:	f000 fff1 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|IN1_Pin|IN2_Pin;
 800158e:	f242 0330 	movw	r3, #8240	; 0x2030
 8001592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4804      	ldr	r0, [pc, #16]	; (80015b8 <MX_GPIO_Init+0xc8>)
 80015a8:	f000 ffe2 	bl	8002570 <HAL_GPIO_Init>

}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40021000 	.word	0x40021000
 80015b8:	48000400 	.word	0x48000400
 80015bc:	48000800 	.word	0x48000800

080015c0 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback( UART_HandleTypeDef *UartHandle )
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit (&huart1, "WHAT\r\n", 5, 100 );
	uartTxDone = 1; //signal that Transfer is cplt
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <HAL_UART_TxCpltCallback+0x1c>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]

}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000905 	.word	0x20000905

080015e0 <Transmit_DMA>:

void Transmit_DMA(UART_HandleTypeDef *UartHandle, uint8_t* aTxBuffer, uint16_t TXBUFFERSIZE)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	4613      	mov	r3, r2
 80015ec:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef sts;

	uartTxDone = 0;
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <Transmit_DMA+0x44>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
	sts = HAL_UART_Transmit_DMA(UartHandle, (uint8_t*)aTxBuffer, TXBUFFERSIZE);
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f004 f90e 	bl	800581c <HAL_UART_Transmit_DMA>
 8001600:	4603      	mov	r3, r0
 8001602:	75fb      	strb	r3, [r7, #23]

	if( sts != HAL_OK)
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <Transmit_DMA+0x30>
	{
		Error_Handler();
 800160a:	f000 f977 	bl	80018fc <Error_Handler>
		//wait for uart transfer to be complete
		while (uartTxDone == 0)
		{
		}
	}
}
 800160e:	e005      	b.n	800161c <Transmit_DMA+0x3c>
		while (uartTxDone == 0)
 8001610:	bf00      	nop
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <Transmit_DMA+0x44>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0fa      	beq.n	8001612 <Transmit_DMA+0x32>
}
 800161c:	bf00      	nop
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000905 	.word	0x20000905

08001628 <HAL_TIM_PeriodElapsedCallback>:

HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8001628:	b5b0      	push	{r4, r5, r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	if( htim -> Instance == TIM6 )
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a60      	ldr	r2, [pc, #384]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001636:	4293      	cmp	r3, r2
 8001638:	f040 80b5 	bne.w	80017a6 <HAL_TIM_PeriodElapsedCallback+0x17e>
		 add PID, target speed, and PWM to the motor later.

		 Keep the speed here in cts/0.005seconds
		 * */

		EncVal = TIM2->CNT;
 800163c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	b29a      	uxth	r2, r3
 8001644:	4b5d      	ldr	r3, [pc, #372]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001646:	801a      	strh	r2, [r3, #0]
		TIM2->CNT = 32767;
 8001648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800164c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001650:	625a      	str	r2, [r3, #36]	; 0x24

		Speed_TIM6_Measured = (int32_t)( (EncVal - 32767) );
 8001652:	4b5a      	ldr	r3, [pc, #360]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800165a:	3b7f      	subs	r3, #127	; 0x7f
 800165c:	4a58      	ldr	r2, [pc, #352]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800165e:	6013      	str	r3, [r2, #0]
		Err = Speed_TIM6_Target - Speed_TIM6_Measured;
 8001660:	4b58      	ldr	r3, [pc, #352]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b56      	ldr	r3, [pc, #344]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	4a57      	ldr	r2, [pc, #348]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800166c:	6013      	str	r3, [r2, #0]

		dU = vKp * (Err - Err_1) + (vKi * Err) + ( vKd * ( Err - 2*Err_1 + Err_2 ) );
 800166e:	4b56      	ldr	r3, [pc, #344]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b56      	ldr	r3, [pc, #344]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	ee07 3a90 	vmov	s15, r3
 800167c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001680:	4b53      	ldr	r3, [pc, #332]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ee27 7a27 	vmul.f32	s14, s14, s15
 800168a:	4b4f      	ldr	r3, [pc, #316]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001696:	4b4f      	ldr	r3, [pc, #316]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016a4:	4b48      	ldr	r3, [pc, #288]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b48      	ldr	r3, [pc, #288]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	1ad2      	subs	r2, r2, r3
 80016b0:	4b49      	ldr	r3, [pc, #292]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4413      	add	r3, r2
 80016b6:	ee07 3a90 	vmov	s15, r3
 80016ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016be:	4b47      	ldr	r3, [pc, #284]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d0:	ee17 2a90 	vmov	r2, s15
 80016d4:	4b42      	ldr	r3, [pc, #264]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80016d6:	601a      	str	r2, [r3, #0]
		Uk = Uk_1 + dU;
 80016d8:	4b42      	ldr	r3, [pc, #264]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b40      	ldr	r3, [pc, #256]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4413      	add	r3, r2
 80016e2:	4a41      	ldr	r2, [pc, #260]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80016e4:	6013      	str	r3, [r2, #0]
		Uk_1 = Uk;
 80016e6:	4b40      	ldr	r3, [pc, #256]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a3e      	ldr	r2, [pc, #248]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80016ec:	6013      	str	r3, [r2, #0]
		Err_2 = Err_1;
 80016ee:	4b37      	ldr	r3, [pc, #220]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a39      	ldr	r2, [pc, #228]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80016f4:	6013      	str	r3, [r2, #0]
		Err_1 = Err;
 80016f6:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a34      	ldr	r2, [pc, #208]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80016fc:	6013      	str	r3, [r2, #0]

		//3214/2 =1607
		if( CCW )
 80016fe:	4b3b      	ldr	r3, [pc, #236]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d029      	beq.n	800175a <HAL_TIM_PeriodElapsedCallback+0x132>
		{
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	2110      	movs	r1, #16
 800170a:	4839      	ldr	r0, [pc, #228]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800170c:	f001 f8a2 	bl	8002854 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001710:	2201      	movs	r2, #1
 8001712:	2120      	movs	r1, #32
 8001714:	4836      	ldr	r0, [pc, #216]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001716:	f001 f89d 	bl	8002854 <HAL_GPIO_WritePin>
			TIM15 -> CCR1 = (uint32_t) ( -1.0 * (Uk/204.0) * 3214.0 );
 800171a:	4b33      	ldr	r3, [pc, #204]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe feac 	bl	800047c <__aeabi_i2d>
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800172a:	f7ff f83b 	bl	80007a4 <__aeabi_ddiv>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4614      	mov	r4, r2
 8001734:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001738:	a31d      	add	r3, pc, #116	; (adr r3, 80017b0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	4620      	mov	r0, r4
 8001740:	4629      	mov	r1, r5
 8001742:	f7fe ff05 	bl	8000550 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4c2b      	ldr	r4, [pc, #172]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f7ff f938 	bl	80009c4 <__aeabi_d2uiz>
 8001754:	4603      	mov	r3, r0
 8001756:	6363      	str	r3, [r4, #52]	; 0x34
			TIM15 -> CCR1 = (uint32_t) ( (Uk/204.0) * 3214.0 );
		}

		//update the PWM value
	}
}
 8001758:	e025      	b.n	80017a6 <HAL_TIM_PeriodElapsedCallback+0x17e>
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800175a:	2201      	movs	r2, #1
 800175c:	2110      	movs	r1, #16
 800175e:	4824      	ldr	r0, [pc, #144]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001760:	f001 f878 	bl	8002854 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	2120      	movs	r1, #32
 8001768:	4821      	ldr	r0, [pc, #132]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800176a:	f001 f873 	bl	8002854 <HAL_GPIO_WritePin>
			TIM15 -> CCR1 = (uint32_t) ( (Uk/204.0) * 3214.0 );
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fe82 	bl	800047c <__aeabi_i2d>
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800177e:	f7ff f811 	bl	80007a4 <__aeabi_ddiv>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	a309      	add	r3, pc, #36	; (adr r3, 80017b0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7fe fede 	bl	8000550 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4c17      	ldr	r4, [pc, #92]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	f7ff f911 	bl	80009c4 <__aeabi_d2uiz>
 80017a2:	4603      	mov	r3, r0
 80017a4:	6363      	str	r3, [r4, #52]	; 0x34
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bdb0      	pop	{r4, r5, r7, pc}
 80017ae:	bf00      	nop
 80017b0:	00000000 	.word	0x00000000
 80017b4:	40a91c00 	.word	0x40a91c00
 80017b8:	40001000 	.word	0x40001000
 80017bc:	20000906 	.word	0x20000906
 80017c0:	20000908 	.word	0x20000908
 80017c4:	2000090c 	.word	0x2000090c
 80017c8:	20000910 	.word	0x20000910
 80017cc:	20000914 	.word	0x20000914
 80017d0:	20000938 	.word	0x20000938
 80017d4:	2000093c 	.word	0x2000093c
 80017d8:	20000918 	.word	0x20000918
 80017dc:	20000940 	.word	0x20000940
 80017e0:	20000924 	.word	0x20000924
 80017e4:	20000920 	.word	0x20000920
 80017e8:	2000091c 	.word	0x2000091c
 80017ec:	20000948 	.word	0x20000948
 80017f0:	48000400 	.word	0x48000400
 80017f4:	40698000 	.word	0x40698000
 80017f8:	40014000 	.word	0x40014000

080017fc <CalculateCRC16>:

uint16_t CalculateCRC16( const uint8_t* c_ptr, size_t len )
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
	 crc_COM = CalculateCRC16(crc_Result, Rx_Head, 6);

	 Rx_Head is an array storing all the bytes

	 * */
	const uint8_t* c = c_ptr; //now storinkg the address of the array that's storing all the bytes
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	60fb      	str	r3, [r7, #12]
	//*c++ increases the array index? after access the item at index 'c'?? that would be crazy
	accumulator = 0x0000;
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <CalculateCRC16+0x70>)
 800180c:	2200      	movs	r2, #0
 800180e:	801a      	strh	r2, [r3, #0]
	for( len; len > 0; --len )
 8001810:	e020      	b.n	8001854 <CalculateCRC16+0x58>
	{
		x = accumulator << 8 ;
 8001812:	4b16      	ldr	r3, [pc, #88]	; (800186c <CalculateCRC16+0x70>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	b29a      	uxth	r2, r3
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <CalculateCRC16+0x74>)
 800181c:	801a      	strh	r2, [r3, #0]
		y = crctable[ ((accumulator >> 8 ) ^ *c)];
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <CalculateCRC16+0x70>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	0a1b      	lsrs	r3, r3, #8
 8001824:	b29b      	uxth	r3, r3
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4053      	eors	r3, r2
 800182e:	4a11      	ldr	r2, [pc, #68]	; (8001874 <CalculateCRC16+0x78>)
 8001830:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001834:	4b10      	ldr	r3, [pc, #64]	; (8001878 <CalculateCRC16+0x7c>)
 8001836:	801a      	strh	r2, [r3, #0]
		*c++;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3301      	adds	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
		accumulator = x ^ y;
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <CalculateCRC16+0x74>)
 8001840:	881a      	ldrh	r2, [r3, #0]
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <CalculateCRC16+0x7c>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	4053      	eors	r3, r2
 8001848:	b29a      	uxth	r2, r3
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <CalculateCRC16+0x70>)
 800184c:	801a      	strh	r2, [r3, #0]
	for( len; len > 0; --len )
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	3b01      	subs	r3, #1
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1db      	bne.n	8001812 <CalculateCRC16+0x16>
	}
	return accumulator;
 800185a:	4b04      	ldr	r3, [pc, #16]	; (800186c <CalculateCRC16+0x70>)
 800185c:	881b      	ldrh	r3, [r3, #0]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000932 	.word	0x20000932
 8001870:	2000092e 	.word	0x2000092e
 8001874:	08006cb4 	.word	0x08006cb4
 8001878:	20000930 	.word	0x20000930

0800187c <Make_Rply_Head>:

void Make_Rply_Head(uint8_t* rply_ptr, uint8_t r2, uint8_t r3, uint8_t r4, uint8_t r5)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	4608      	mov	r0, r1
 8001886:	4611      	mov	r1, r2
 8001888:	461a      	mov	r2, r3
 800188a:	4603      	mov	r3, r0
 800188c:	70fb      	strb	r3, [r7, #3]
 800188e:	460b      	mov	r3, r1
 8001890:	70bb      	strb	r3, [r7, #2]
 8001892:	4613      	mov	r3, r2
 8001894:	707b      	strb	r3, [r7, #1]
	rply_ptr[0] = 0xA5;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	22a5      	movs	r2, #165	; 0xa5
 800189a:	701a      	strb	r2, [r3, #0]
	rply_ptr[1] = 0xFF;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3301      	adds	r3, #1
 80018a0:	22ff      	movs	r2, #255	; 0xff
 80018a2:	701a      	strb	r2, [r3, #0]
	rply_ptr[2] = r2;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3302      	adds	r3, #2
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	701a      	strb	r2, [r3, #0]
	rply_ptr[3] = r3;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3303      	adds	r3, #3
 80018b0:	78ba      	ldrb	r2, [r7, #2]
 80018b2:	701a      	strb	r2, [r3, #0]
	rply_ptr[4] = r4;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3304      	adds	r3, #4
 80018b8:	787a      	ldrb	r2, [r7, #1]
 80018ba:	701a      	strb	r2, [r3, #0]
	rply_ptr[5] = r5;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3305      	adds	r3, #5
 80018c0:	7c3a      	ldrb	r2, [r7, #16]
 80018c2:	701a      	strb	r2, [r3, #0]
	CRC_Val = CalculateCRC16( rply_ptr, 6 );
 80018c4:	2106      	movs	r1, #6
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ff98 	bl	80017fc <CalculateCRC16>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <Make_Rply_Head+0x7c>)
 80018d2:	801a      	strh	r2, [r3, #0]
	rply_ptr[6] = ( (CRC_Val >> 8) & 0x00FF );
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <Make_Rply_Head+0x7c>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	b29a      	uxth	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3306      	adds	r3, #6
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	701a      	strb	r2, [r3, #0]
	rply_ptr[7] = ( CRC_Val & 0x00FF );
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <Make_Rply_Head+0x7c>)
 80018e6:	881a      	ldrh	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3307      	adds	r3, #7
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	701a      	strb	r2, [r3, #0]
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	2000092c 	.word	0x2000092c

080018fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001904:	e7fe      	b.n	8001904 <Error_Handler+0x8>
	...

08001908 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_MspInit+0x44>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_MspInit+0x44>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6193      	str	r3, [r2, #24]
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_MspInit+0x44>)
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_MspInit+0x44>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <HAL_MspInit+0x44>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_MspInit+0x44>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800193e:	2007      	movs	r0, #7
 8001940:	f000 fbba 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021000 	.word	0x40021000

08001950 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001970:	d128      	bne.n	80019c4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001972:	4b16      	ldr	r3, [pc, #88]	; (80019cc <HAL_TIM_Encoder_MspInit+0x7c>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a15      	ldr	r2, [pc, #84]	; (80019cc <HAL_TIM_Encoder_MspInit+0x7c>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	61d3      	str	r3, [r2, #28]
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <HAL_TIM_Encoder_MspInit+0x7c>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <HAL_TIM_Encoder_MspInit+0x7c>)
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	4a0f      	ldr	r2, [pc, #60]	; (80019cc <HAL_TIM_Encoder_MspInit+0x7c>)
 8001990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001994:	6153      	str	r3, [r2, #20]
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <HAL_TIM_Encoder_MspInit+0x7c>)
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019a2:	2303      	movs	r3, #3
 80019a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019b2:	2301      	movs	r3, #1
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c0:	f000 fdd6 	bl	8002570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019c4:	bf00      	nop
 80019c6:	3728      	adds	r7, #40	; 0x28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40021000 	.word	0x40021000

080019d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <HAL_TIM_Base_MspInit+0x44>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d113      	bne.n	8001a0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_TIM_Base_MspInit+0x48>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <HAL_TIM_Base_MspInit+0x48>)
 80019e8:	f043 0310 	orr.w	r3, r3, #16
 80019ec:	61d3      	str	r3, [r2, #28]
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_TIM_Base_MspInit+0x48>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	2036      	movs	r0, #54	; 0x36
 8001a00:	f000 fb65 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a04:	2036      	movs	r0, #54	; 0x36
 8001a06:	f000 fb7e 	bl	8002106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40001000 	.word	0x40001000
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <HAL_TIM_PWM_MspInit+0x38>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d10b      	bne.n	8001a46 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6193      	str	r3, [r2, #24]
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40014000 	.word	0x40014000
 8001a58:	40021000 	.word	0x40021000

08001a5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a11      	ldr	r2, [pc, #68]	; (8001ac0 <HAL_TIM_MspPostInit+0x64>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d11c      	bne.n	8001ab8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_TIM_MspPostInit+0x68>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	4a10      	ldr	r2, [pc, #64]	; (8001ac4 <HAL_TIM_MspPostInit+0x68>)
 8001a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a88:	6153      	str	r3, [r2, #20]
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_TIM_MspPostInit+0x68>)
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8001a96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <HAL_TIM_MspPostInit+0x6c>)
 8001ab4:	f000 fd5c 	bl	8002570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001ab8:	bf00      	nop
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40014000 	.word	0x40014000
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	48000400 	.word	0x48000400

08001acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	; 0x30
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a58      	ldr	r2, [pc, #352]	; (8001c4c <HAL_UART_MspInit+0x180>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d17c      	bne.n	8001be8 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aee:	4b58      	ldr	r3, [pc, #352]	; (8001c50 <HAL_UART_MspInit+0x184>)
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	4a57      	ldr	r2, [pc, #348]	; (8001c50 <HAL_UART_MspInit+0x184>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	6193      	str	r3, [r2, #24]
 8001afa:	4b55      	ldr	r3, [pc, #340]	; (8001c50 <HAL_UART_MspInit+0x184>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	61bb      	str	r3, [r7, #24]
 8001b04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	4b52      	ldr	r3, [pc, #328]	; (8001c50 <HAL_UART_MspInit+0x184>)
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	4a51      	ldr	r2, [pc, #324]	; (8001c50 <HAL_UART_MspInit+0x184>)
 8001b0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b10:	6153      	str	r3, [r2, #20]
 8001b12:	4b4f      	ldr	r3, [pc, #316]	; (8001c50 <HAL_UART_MspInit+0x184>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b1e:	2330      	movs	r3, #48	; 0x30
 8001b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b2e:	2307      	movs	r3, #7
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	4846      	ldr	r0, [pc, #280]	; (8001c54 <HAL_UART_MspInit+0x188>)
 8001b3a:	f000 fd19 	bl	8002570 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001b3e:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <HAL_UART_MspInit+0x18c>)
 8001b40:	4a46      	ldr	r2, [pc, #280]	; (8001c5c <HAL_UART_MspInit+0x190>)
 8001b42:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b44:	4b44      	ldr	r3, [pc, #272]	; (8001c58 <HAL_UART_MspInit+0x18c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b4a:	4b43      	ldr	r3, [pc, #268]	; (8001c58 <HAL_UART_MspInit+0x18c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b50:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HAL_UART_MspInit+0x18c>)
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b56:	4b40      	ldr	r3, [pc, #256]	; (8001c58 <HAL_UART_MspInit+0x18c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b5c:	4b3e      	ldr	r3, [pc, #248]	; (8001c58 <HAL_UART_MspInit+0x18c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b62:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <HAL_UART_MspInit+0x18c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b68:	4b3b      	ldr	r3, [pc, #236]	; (8001c58 <HAL_UART_MspInit+0x18c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b6e:	483a      	ldr	r0, [pc, #232]	; (8001c58 <HAL_UART_MspInit+0x18c>)
 8001b70:	f000 fae3 	bl	800213a <HAL_DMA_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8001b7a:	f7ff febf 	bl	80018fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a35      	ldr	r2, [pc, #212]	; (8001c58 <HAL_UART_MspInit+0x18c>)
 8001b82:	675a      	str	r2, [r3, #116]	; 0x74
 8001b84:	4a34      	ldr	r2, [pc, #208]	; (8001c58 <HAL_UART_MspInit+0x18c>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001b8a:	4b35      	ldr	r3, [pc, #212]	; (8001c60 <HAL_UART_MspInit+0x194>)
 8001b8c:	4a35      	ldr	r2, [pc, #212]	; (8001c64 <HAL_UART_MspInit+0x198>)
 8001b8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b90:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <HAL_UART_MspInit+0x194>)
 8001b92:	2210      	movs	r2, #16
 8001b94:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b96:	4b32      	ldr	r3, [pc, #200]	; (8001c60 <HAL_UART_MspInit+0x194>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b9c:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <HAL_UART_MspInit+0x194>)
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ba2:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <HAL_UART_MspInit+0x194>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_UART_MspInit+0x194>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001bae:	4b2c      	ldr	r3, [pc, #176]	; (8001c60 <HAL_UART_MspInit+0x194>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <HAL_UART_MspInit+0x194>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001bba:	4829      	ldr	r0, [pc, #164]	; (8001c60 <HAL_UART_MspInit+0x194>)
 8001bbc:	f000 fabd 	bl	800213a <HAL_DMA_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8001bc6:	f7ff fe99 	bl	80018fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a24      	ldr	r2, [pc, #144]	; (8001c60 <HAL_UART_MspInit+0x194>)
 8001bce:	671a      	str	r2, [r3, #112]	; 0x70
 8001bd0:	4a23      	ldr	r2, [pc, #140]	; (8001c60 <HAL_UART_MspInit+0x194>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2025      	movs	r0, #37	; 0x25
 8001bdc:	f000 fa77 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001be0:	2025      	movs	r0, #37	; 0x25
 8001be2:	f000 fa90 	bl	8002106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001be6:	e02d      	b.n	8001c44 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1e      	ldr	r2, [pc, #120]	; (8001c68 <HAL_UART_MspInit+0x19c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d128      	bne.n	8001c44 <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <HAL_UART_MspInit+0x184>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	4a16      	ldr	r2, [pc, #88]	; (8001c50 <HAL_UART_MspInit+0x184>)
 8001bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfc:	61d3      	str	r3, [r2, #28]
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <HAL_UART_MspInit+0x184>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <HAL_UART_MspInit+0x184>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	4a10      	ldr	r2, [pc, #64]	; (8001c50 <HAL_UART_MspInit+0x184>)
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c14:	6153      	str	r3, [r2, #20]
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <HAL_UART_MspInit+0x184>)
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c22:	230c      	movs	r3, #12
 8001c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c32:	2307      	movs	r3, #7
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c40:	f000 fc96 	bl	8002570 <HAL_GPIO_Init>
}
 8001c44:	bf00      	nop
 8001c46:	3730      	adds	r7, #48	; 0x30
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40013800 	.word	0x40013800
 8001c50:	40021000 	.word	0x40021000
 8001c54:	48000800 	.word	0x48000800
 8001c58:	20000244 	.word	0x20000244
 8001c5c:	40020058 	.word	0x40020058
 8001c60:	20000288 	.word	0x20000288
 8001c64:	40020044 	.word	0x40020044
 8001c68:	40004400 	.word	0x40004400

08001c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <NMI_Handler+0x4>

08001c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <HardFault_Handler+0x4>

08001c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <MemManage_Handler+0x4>

08001c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <BusFault_Handler+0x4>

08001c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <UsageFault_Handler+0x4>

08001c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb8:	f000 f90e 	bl	8001ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <DMA1_Channel4_IRQHandler+0x10>)
 8001cc6:	f000 fb55 	bl	8002374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000288 	.word	0x20000288

08001cd4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <DMA1_Channel5_IRQHandler+0x10>)
 8001cda:	f000 fb4b 	bl	8002374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000244 	.word	0x20000244

08001ce8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cec:	4803      	ldr	r0, [pc, #12]	; (8001cfc <USART1_IRQHandler+0x14>)
 8001cee:	f003 fee7 	bl	8005ac0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 8001cf2:	4802      	ldr	r0, [pc, #8]	; (8001cfc <USART1_IRQHandler+0x14>)
 8001cf4:	f000 f80e 	bl	8001d14 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000134 	.word	0x20000134

08001d00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <TIM6_DAC_IRQHandler+0x10>)
 8001d06:	f002 fd5b 	bl	80047c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000009c 	.word	0x2000009c

08001d14 <USER_UART_IRQHandler>:

/* USER CODE BEGIN 1 */
void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <USER_UART_IRQHandler+0x38>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d10d      	bne.n	8001d42 <USER_UART_IRQHandler+0x2e>
	{
		if(__HAL_UART_GET_FLAG( &huart1, UART_FLAG_IDLE ) != RESET) //whenever the USART Rx idles
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <USER_UART_IRQHandler+0x3c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	2b10      	cmp	r3, #16
 8001d32:	d106      	bne.n	8001d42 <USER_UART_IRQHandler+0x2e>
		{
			__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <USER_UART_IRQHandler+0x3c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2210      	movs	r2, #16
 8001d3a:	621a      	str	r2, [r3, #32]
			USER_UART_IDLECallback(&huart1);
 8001d3c:	4804      	ldr	r0, [pc, #16]	; (8001d50 <USER_UART_IRQHandler+0x3c>)
 8001d3e:	f000 f809 	bl	8001d54 <USER_UART_IDLECallback>
		}
	}
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	20000134 	.word	0x20000134

08001d54 <USER_UART_IDLECallback>:
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(&huart1);
 8001d5c:	4816      	ldr	r0, [pc, #88]	; (8001db8 <USER_UART_IDLECallback+0x64>)
 8001d5e:	f003 fe1d 	bl	800599c <HAL_UART_DMAStop>
	//calculate the length of the received data(number of bytes/characters/numbers received)
	counter = __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <USER_UART_IDLECallback+0x68>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <USER_UART_IDLECallback+0x6c>)
 8001d6c:	801a      	strh	r2, [r3, #0]
	Rx_Counter = DMA_RX_BUFFER_SIZE - counter;
 8001d6e:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <USER_UART_IDLECallback+0x6c>)
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <USER_UART_IDLECallback+0x70>)
 8001d7a:	801a      	strh	r2, [r3, #0]

	//transfer data from DMA buffer to data_buffer
	for( uint16_t i = 0; i < Rx_Counter; ++i )
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	81fb      	strh	r3, [r7, #14]
 8001d80:	e008      	b.n	8001d94 <USER_UART_IDLECallback+0x40>
	{
		Data_Buffer[i] = DMA_RX_Buffer[i];
 8001d82:	89fa      	ldrh	r2, [r7, #14]
 8001d84:	89fb      	ldrh	r3, [r7, #14]
 8001d86:	4910      	ldr	r1, [pc, #64]	; (8001dc8 <USER_UART_IDLECallback+0x74>)
 8001d88:	5c89      	ldrb	r1, [r1, r2]
 8001d8a:	4a10      	ldr	r2, [pc, #64]	; (8001dcc <USER_UART_IDLECallback+0x78>)
 8001d8c:	54d1      	strb	r1, [r2, r3]
	for( uint16_t i = 0; i < Rx_Counter; ++i )
 8001d8e:	89fb      	ldrh	r3, [r7, #14]
 8001d90:	3301      	adds	r3, #1
 8001d92:	81fb      	strh	r3, [r7, #14]
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <USER_UART_IDLECallback+0x70>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	89fa      	ldrh	r2, [r7, #14]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d3f1      	bcc.n	8001d82 <USER_UART_IDLECallback+0x2e>
	}

	COM_Status = 1;
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <USER_UART_IDLECallback+0x7c>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]
	//re-enable DMA interrupt and receiving
	HAL_UART_Receive_DMA( &huart1, DMA_RX_Buffer, DMA_RX_BUFFER_SIZE );
 8001da4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001da8:	4907      	ldr	r1, [pc, #28]	; (8001dc8 <USER_UART_IDLECallback+0x74>)
 8001daa:	4803      	ldr	r0, [pc, #12]	; (8001db8 <USER_UART_IDLECallback+0x64>)
 8001dac:	f003 fdb2 	bl	8005914 <HAL_UART_Receive_DMA>

}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000134 	.word	0x20000134
 8001dbc:	20000244 	.word	0x20000244
 8001dc0:	20000900 	.word	0x20000900
 8001dc4:	20000902 	.word	0x20000902
 8001dc8:	200002e4 	.word	0x200002e4
 8001dcc:	20000400 	.word	0x20000400
 8001dd0:	20000904 	.word	0x20000904

08001dd4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <SystemInit+0x20>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <SystemInit+0x20>)
 8001de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e30 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dfc:	f7ff ffea 	bl	8001dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e00:	480c      	ldr	r0, [pc, #48]	; (8001e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e02:	490d      	ldr	r1, [pc, #52]	; (8001e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e04:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <LoopForever+0xe>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e08:	e002      	b.n	8001e10 <LoopCopyDataInit>

08001e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0e:	3304      	adds	r3, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e14:	d3f9      	bcc.n	8001e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e18:	4c0a      	ldr	r4, [pc, #40]	; (8001e44 <LoopForever+0x16>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e1c:	e001      	b.n	8001e22 <LoopFillZerobss>

08001e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e20:	3204      	adds	r2, #4

08001e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e24:	d3fb      	bcc.n	8001e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e26:	f004 ff0b 	bl	8006c40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e2a:	f7fe fdeb 	bl	8000a04 <main>

08001e2e <LoopForever>:

LoopForever:
    b LoopForever
 8001e2e:	e7fe      	b.n	8001e2e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e30:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001e3c:	08006ef4 	.word	0x08006ef4
  ldr r2, =_sbss
 8001e40:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001e44:	20000950 	.word	0x20000950

08001e48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC1_IRQHandler>
	...

08001e4c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <HAL_Init+0x28>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <HAL_Init+0x28>)
 8001e56:	f043 0310 	orr.w	r3, r3, #16
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	f000 f92b 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f000 f808 	bl	8001e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e68:	f7ff fd4e 	bl	8001908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40022000 	.word	0x40022000

08001e78 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_InitTick+0x54>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_InitTick+0x58>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 f943 	bl	8002122 <HAL_SYSTICK_Config>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00e      	b.n	8001ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b0f      	cmp	r3, #15
 8001eaa:	d80a      	bhi.n	8001ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eac:	2200      	movs	r2, #0
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb4:	f000 f90b 	bl	80020ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb8:	4a06      	ldr	r2, [pc, #24]	; (8001ed4 <HAL_InitTick+0x5c>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e000      	b.n	8001ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000028 	.word	0x20000028
 8001ed0:	20000030 	.word	0x20000030
 8001ed4:	2000002c 	.word	0x2000002c

08001ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_IncTick+0x20>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_IncTick+0x24>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4a04      	ldr	r2, [pc, #16]	; (8001efc <HAL_IncTick+0x24>)
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000030 	.word	0x20000030
 8001efc:	2000094c 	.word	0x2000094c

08001f00 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return uwTick;  
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <HAL_GetTick+0x14>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	2000094c 	.word	0x2000094c

08001f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4a:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	60d3      	str	r3, [r2, #12]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <__NVIC_GetPriorityGrouping+0x18>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 0307 	and.w	r3, r3, #7
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	db0b      	blt.n	8001fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	f003 021f 	and.w	r2, r3, #31
 8001f94:	4907      	ldr	r1, [pc, #28]	; (8001fb4 <__NVIC_EnableIRQ+0x38>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	; (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	; (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
         );
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	; 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002084:	d301      	bcc.n	800208a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002086:	2301      	movs	r3, #1
 8002088:	e00f      	b.n	80020aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <SysTick_Config+0x40>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002092:	210f      	movs	r1, #15
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f7ff ff8e 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <SysTick_Config+0x40>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <SysTick_Config+0x40>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff29 	bl	8001f18 <__NVIC_SetPriorityGrouping>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e0:	f7ff ff3e 	bl	8001f60 <__NVIC_GetPriorityGrouping>
 80020e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	f7ff ff8e 	bl	800200c <NVIC_EncodePriority>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff5d 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff31 	bl	8001f7c <__NVIC_EnableIRQ>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffa2 	bl	8002074 <SysTick_Config>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e037      	b.n	80021c0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002166:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800216a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002174:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002180:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800218c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f9c4 	bl	8002530 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}  
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_DMA_Start_IT+0x20>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e04a      	b.n	800227e <HAL_DMA_Start_IT+0xb6>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d13a      	bne.n	8002270 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2202      	movs	r2, #2
 80021fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0201 	bic.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f957 	bl	80024d2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 020e 	orr.w	r2, r2, #14
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	e00f      	b.n	800225e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 020a 	orr.w	r2, r2, #10
 800224c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0204 	bic.w	r2, r2, #4
 800225c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0201 	orr.w	r2, r2, #1
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	e005      	b.n	800227c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002278:	2302      	movs	r3, #2
 800227a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800227c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002294:	2b02      	cmp	r3, #2
 8002296:	d008      	beq.n	80022aa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2204      	movs	r2, #4
 800229c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e020      	b.n	80022ec <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 020e 	bic.w	r2, r2, #14
 80022b8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d2:	2101      	movs	r1, #1
 80022d4:	fa01 f202 	lsl.w	r2, r1, r2
 80022d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800230a:	2b02      	cmp	r3, #2
 800230c:	d005      	beq.n	800231a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2204      	movs	r2, #4
 8002312:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
 8002318:	e027      	b.n	800236a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 020e 	bic.w	r2, r2, #14
 8002328:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0201 	bic.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002342:	2101      	movs	r1, #1
 8002344:	fa01 f202 	lsl.w	r2, r1, r2
 8002348:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	4798      	blx	r3
    } 
  }
  return status;
 800236a:	7bfb      	ldrb	r3, [r7, #15]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	2204      	movs	r2, #4
 8002392:	409a      	lsls	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d024      	beq.n	80023e6 <HAL_DMA_IRQHandler+0x72>
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d01f      	beq.n	80023e6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d107      	bne.n	80023c4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0204 	bic.w	r2, r2, #4
 80023c2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023cc:	2104      	movs	r1, #4
 80023ce:	fa01 f202 	lsl.w	r2, r1, r2
 80023d2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d06a      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80023e4:	e065      	b.n	80024b2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	2202      	movs	r2, #2
 80023ec:	409a      	lsls	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d02c      	beq.n	8002450 <HAL_DMA_IRQHandler+0xdc>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d027      	beq.n	8002450 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10b      	bne.n	8002426 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 020a 	bic.w	r2, r2, #10
 800241c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242e:	2102      	movs	r1, #2
 8002430:	fa01 f202 	lsl.w	r2, r1, r2
 8002434:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	2b00      	cmp	r3, #0
 8002444:	d035      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800244e:	e030      	b.n	80024b2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	2208      	movs	r2, #8
 8002456:	409a      	lsls	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4013      	ands	r3, r2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d028      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x13e>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d023      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 020e 	bic.w	r2, r2, #14
 8002478:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002482:	2101      	movs	r1, #1
 8002484:	fa01 f202 	lsl.w	r2, r1, r2
 8002488:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d004      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	4798      	blx	r3
    }
  }
}  
 80024b0:	e7ff      	b.n	80024b2 <HAL_DMA_IRQHandler+0x13e>
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e8:	2101      	movs	r1, #1
 80024ea:	fa01 f202 	lsl.w	r2, r1, r2
 80024ee:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b10      	cmp	r3, #16
 80024fe:	d108      	bne.n	8002512 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002510:	e007      	b.n	8002522 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	60da      	str	r2, [r3, #12]
}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <DMA_CalcBaseAndBitshift+0x34>)
 8002540:	4413      	add	r3, r2
 8002542:	4a09      	ldr	r2, [pc, #36]	; (8002568 <DMA_CalcBaseAndBitshift+0x38>)
 8002544:	fba2 2303 	umull	r2, r3, r2, r3
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	009a      	lsls	r2, r3, #2
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a06      	ldr	r2, [pc, #24]	; (800256c <DMA_CalcBaseAndBitshift+0x3c>)
 8002554:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	bffdfff8 	.word	0xbffdfff8
 8002568:	cccccccd 	.word	0xcccccccd
 800256c:	40020000 	.word	0x40020000

08002570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800257e:	e14e      	b.n	800281e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	2101      	movs	r1, #1
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	fa01 f303 	lsl.w	r3, r1, r3
 800258c:	4013      	ands	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 8140 	beq.w	8002818 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d005      	beq.n	80025b0 <HAL_GPIO_Init+0x40>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d130      	bne.n	8002612 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	2203      	movs	r2, #3
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4013      	ands	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025e6:	2201      	movs	r2, #1
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4013      	ands	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	091b      	lsrs	r3, r3, #4
 80025fc:	f003 0201 	and.w	r2, r3, #1
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b03      	cmp	r3, #3
 800261c:	d017      	beq.n	800264e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	2203      	movs	r2, #3
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d123      	bne.n	80026a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	08da      	lsrs	r2, r3, #3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3208      	adds	r2, #8
 8002662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002666:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	220f      	movs	r2, #15
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4013      	ands	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	08da      	lsrs	r2, r3, #3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3208      	adds	r2, #8
 800269c:	6939      	ldr	r1, [r7, #16]
 800269e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	2203      	movs	r2, #3
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4013      	ands	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 0203 	and.w	r2, r3, #3
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 809a 	beq.w	8002818 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e4:	4b55      	ldr	r3, [pc, #340]	; (800283c <HAL_GPIO_Init+0x2cc>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	4a54      	ldr	r2, [pc, #336]	; (800283c <HAL_GPIO_Init+0x2cc>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6193      	str	r3, [r2, #24]
 80026f0:	4b52      	ldr	r3, [pc, #328]	; (800283c <HAL_GPIO_Init+0x2cc>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026fc:	4a50      	ldr	r2, [pc, #320]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	089b      	lsrs	r3, r3, #2
 8002702:	3302      	adds	r3, #2
 8002704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002708:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	220f      	movs	r2, #15
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002726:	d013      	beq.n	8002750 <HAL_GPIO_Init+0x1e0>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a46      	ldr	r2, [pc, #280]	; (8002844 <HAL_GPIO_Init+0x2d4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d00d      	beq.n	800274c <HAL_GPIO_Init+0x1dc>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a45      	ldr	r2, [pc, #276]	; (8002848 <HAL_GPIO_Init+0x2d8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d007      	beq.n	8002748 <HAL_GPIO_Init+0x1d8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a44      	ldr	r2, [pc, #272]	; (800284c <HAL_GPIO_Init+0x2dc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d101      	bne.n	8002744 <HAL_GPIO_Init+0x1d4>
 8002740:	2303      	movs	r3, #3
 8002742:	e006      	b.n	8002752 <HAL_GPIO_Init+0x1e2>
 8002744:	2305      	movs	r3, #5
 8002746:	e004      	b.n	8002752 <HAL_GPIO_Init+0x1e2>
 8002748:	2302      	movs	r3, #2
 800274a:	e002      	b.n	8002752 <HAL_GPIO_Init+0x1e2>
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <HAL_GPIO_Init+0x1e2>
 8002750:	2300      	movs	r3, #0
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	f002 0203 	and.w	r2, r2, #3
 8002758:	0092      	lsls	r2, r2, #2
 800275a:	4093      	lsls	r3, r2
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002762:	4937      	ldr	r1, [pc, #220]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	089b      	lsrs	r3, r3, #2
 8002768:	3302      	adds	r3, #2
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002770:	4b37      	ldr	r3, [pc, #220]	; (8002850 <HAL_GPIO_Init+0x2e0>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	43db      	mvns	r3, r3
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002794:	4a2e      	ldr	r2, [pc, #184]	; (8002850 <HAL_GPIO_Init+0x2e0>)
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800279a:	4b2d      	ldr	r3, [pc, #180]	; (8002850 <HAL_GPIO_Init+0x2e0>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027be:	4a24      	ldr	r2, [pc, #144]	; (8002850 <HAL_GPIO_Init+0x2e0>)
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027c4:	4b22      	ldr	r3, [pc, #136]	; (8002850 <HAL_GPIO_Init+0x2e0>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027e8:	4a19      	ldr	r2, [pc, #100]	; (8002850 <HAL_GPIO_Init+0x2e0>)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ee:	4b18      	ldr	r3, [pc, #96]	; (8002850 <HAL_GPIO_Init+0x2e0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002812:	4a0f      	ldr	r2, [pc, #60]	; (8002850 <HAL_GPIO_Init+0x2e0>)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	3301      	adds	r3, #1
 800281c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	f47f aea9 	bne.w	8002580 <HAL_GPIO_Init+0x10>
  }
}
 800282e:	bf00      	nop
 8002830:	bf00      	nop
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	40021000 	.word	0x40021000
 8002840:	40010000 	.word	0x40010000
 8002844:	48000400 	.word	0x48000400
 8002848:	48000800 	.word	0x48000800
 800284c:	48000c00 	.word	0x48000c00
 8002850:	40010400 	.word	0x40010400

08002854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	807b      	strh	r3, [r7, #2]
 8002860:	4613      	mov	r3, r2
 8002862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002864:	787b      	ldrb	r3, [r7, #1]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800286a:	887a      	ldrh	r2, [r7, #2]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002870:	e002      	b.n	8002878 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002872:	887a      	ldrh	r2, [r7, #2]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800288a:	af00      	add	r7, sp, #0
 800288c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002890:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002894:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	f001 b823 	b.w	80038f0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 817d 	beq.w	8002bba <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028c0:	4bbc      	ldr	r3, [pc, #752]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d00c      	beq.n	80028e6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028cc:	4bb9      	ldr	r3, [pc, #740]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d15c      	bne.n	8002992 <HAL_RCC_OscConfig+0x10e>
 80028d8:	4bb6      	ldr	r3, [pc, #728]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e4:	d155      	bne.n	8002992 <HAL_RCC_OscConfig+0x10e>
 80028e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d102      	bne.n	8002918 <HAL_RCC_OscConfig+0x94>
 8002912:	4ba8      	ldr	r3, [pc, #672]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	e015      	b.n	8002944 <HAL_RCC_OscConfig+0xc0>
 8002918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800291c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800292c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002930:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002934:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002940:	4b9c      	ldr	r3, [pc, #624]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002948:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800294c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002950:	fa92 f2a2 	rbit	r2, r2
 8002954:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002958:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800295c:	fab2 f282 	clz	r2, r2
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	f042 0220 	orr.w	r2, r2, #32
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	f002 021f 	and.w	r2, r2, #31
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f202 	lsl.w	r2, r1, r2
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 811f 	beq.w	8002bb8 <HAL_RCC_OscConfig+0x334>
 800297a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f040 8116 	bne.w	8002bb8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	f000 bfaf 	b.w	80038f0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002996:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x12e>
 80029a4:	4b83      	ldr	r3, [pc, #524]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a82      	ldr	r2, [pc, #520]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 80029aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	e036      	b.n	8002a20 <HAL_RCC_OscConfig+0x19c>
 80029b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10c      	bne.n	80029dc <HAL_RCC_OscConfig+0x158>
 80029c2:	4b7c      	ldr	r3, [pc, #496]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a7b      	ldr	r2, [pc, #492]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 80029c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	4b79      	ldr	r3, [pc, #484]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a78      	ldr	r2, [pc, #480]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 80029d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	e021      	b.n	8002a20 <HAL_RCC_OscConfig+0x19c>
 80029dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x184>
 80029ee:	4b71      	ldr	r3, [pc, #452]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a70      	ldr	r2, [pc, #448]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 80029f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	4b6e      	ldr	r3, [pc, #440]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a6d      	ldr	r2, [pc, #436]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 8002a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e00b      	b.n	8002a20 <HAL_RCC_OscConfig+0x19c>
 8002a08:	4b6a      	ldr	r3, [pc, #424]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a69      	ldr	r2, [pc, #420]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 8002a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	4b67      	ldr	r3, [pc, #412]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a66      	ldr	r2, [pc, #408]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 8002a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a1e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a20:	4b64      	ldr	r3, [pc, #400]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	f023 020f 	bic.w	r2, r3, #15
 8002a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	495f      	ldr	r1, [pc, #380]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d059      	beq.n	8002afe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4a:	f7ff fa59 	bl	8001f00 <HAL_GetTick>
 8002a4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a54:	f7ff fa54 	bl	8001f00 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b64      	cmp	r3, #100	; 0x64
 8002a62:	d902      	bls.n	8002a6a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	f000 bf43 	b.w	80038f0 <HAL_RCC_OscConfig+0x106c>
 8002a6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a6e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002a7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	fab3 f383 	clz	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	095b      	lsrs	r3, r3, #5
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d102      	bne.n	8002a9c <HAL_RCC_OscConfig+0x218>
 8002a96:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	e015      	b.n	8002ac8 <HAL_RCC_OscConfig+0x244>
 8002a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aa0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002aa8:	fa93 f3a3 	rbit	r3, r3
 8002aac:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ab4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ab8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002ac4:	4b3b      	ldr	r3, [pc, #236]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002acc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002ad0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ad4:	fa92 f2a2 	rbit	r2, r2
 8002ad8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002adc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002ae0:	fab2 f282 	clz	r2, r2
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	f042 0220 	orr.w	r2, r2, #32
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	f002 021f 	and.w	r2, r2, #31
 8002af0:	2101      	movs	r1, #1
 8002af2:	fa01 f202 	lsl.w	r2, r1, r2
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0ab      	beq.n	8002a54 <HAL_RCC_OscConfig+0x1d0>
 8002afc:	e05d      	b.n	8002bba <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afe:	f7ff f9ff 	bl	8001f00 <HAL_GetTick>
 8002b02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b08:	f7ff f9fa 	bl	8001f00 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b64      	cmp	r3, #100	; 0x64
 8002b16:	d902      	bls.n	8002b1e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	f000 bee9 	b.w	80038f0 <HAL_RCC_OscConfig+0x106c>
 8002b1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b22:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002b32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d102      	bne.n	8002b50 <HAL_RCC_OscConfig+0x2cc>
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	e015      	b.n	8002b7c <HAL_RCC_OscConfig+0x2f8>
 8002b50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b54:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b68:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b6c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <HAL_RCC_OscConfig+0x330>)
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b80:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002b84:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002b88:	fa92 f2a2 	rbit	r2, r2
 8002b8c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002b90:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002b94:	fab2 f282 	clz	r2, r2
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	f042 0220 	orr.w	r2, r2, #32
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	f002 021f 	and.w	r2, r2, #31
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1ab      	bne.n	8002b08 <HAL_RCC_OscConfig+0x284>
 8002bb0:	e003      	b.n	8002bba <HAL_RCC_OscConfig+0x336>
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 817d 	beq.w	8002eca <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bd0:	4ba6      	ldr	r3, [pc, #664]	; (8002e6c <HAL_RCC_OscConfig+0x5e8>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 030c 	and.w	r3, r3, #12
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00b      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bdc:	4ba3      	ldr	r3, [pc, #652]	; (8002e6c <HAL_RCC_OscConfig+0x5e8>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 030c 	and.w	r3, r3, #12
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d172      	bne.n	8002cce <HAL_RCC_OscConfig+0x44a>
 8002be8:	4ba0      	ldr	r3, [pc, #640]	; (8002e6c <HAL_RCC_OscConfig+0x5e8>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d16c      	bne.n	8002cce <HAL_RCC_OscConfig+0x44a>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002c06:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	095b      	lsrs	r3, r3, #5
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d102      	bne.n	8002c24 <HAL_RCC_OscConfig+0x3a0>
 8002c1e:	4b93      	ldr	r3, [pc, #588]	; (8002e6c <HAL_RCC_OscConfig+0x5e8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	e013      	b.n	8002c4c <HAL_RCC_OscConfig+0x3c8>
 8002c24:	2302      	movs	r3, #2
 8002c26:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c36:	2302      	movs	r3, #2
 8002c38:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002c48:	4b88      	ldr	r3, [pc, #544]	; (8002e6c <HAL_RCC_OscConfig+0x5e8>)
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002c52:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c56:	fa92 f2a2 	rbit	r2, r2
 8002c5a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002c5e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002c62:	fab2 f282 	clz	r2, r2
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	f042 0220 	orr.w	r2, r2, #32
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	f002 021f 	and.w	r2, r2, #31
 8002c72:	2101      	movs	r1, #1
 8002c74:	fa01 f202 	lsl.w	r2, r1, r2
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <HAL_RCC_OscConfig+0x410>
 8002c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d002      	beq.n	8002c94 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f000 be2e 	b.w	80038f0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c94:	4b75      	ldr	r3, [pc, #468]	; (8002e6c <HAL_RCC_OscConfig+0x5e8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	21f8      	movs	r1, #248	; 0xf8
 8002caa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002cb2:	fa91 f1a1 	rbit	r1, r1
 8002cb6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002cba:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002cbe:	fab1 f181 	clz	r1, r1
 8002cc2:	b2c9      	uxtb	r1, r1
 8002cc4:	408b      	lsls	r3, r1
 8002cc6:	4969      	ldr	r1, [pc, #420]	; (8002e6c <HAL_RCC_OscConfig+0x5e8>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ccc:	e0fd      	b.n	8002eca <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8088 	beq.w	8002df0 <HAL_RCC_OscConfig+0x56c>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002cf2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	461a      	mov	r2, r3
 8002d08:	2301      	movs	r3, #1
 8002d0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7ff f8f8 	bl	8001f00 <HAL_GetTick>
 8002d10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d16:	f7ff f8f3 	bl	8001f00 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d902      	bls.n	8002d2c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	f000 bde2 	b.w	80038f0 <HAL_RCC_OscConfig+0x106c>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002d3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d42:	fab3 f383 	clz	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	095b      	lsrs	r3, r3, #5
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d102      	bne.n	8002d5c <HAL_RCC_OscConfig+0x4d8>
 8002d56:	4b45      	ldr	r3, [pc, #276]	; (8002e6c <HAL_RCC_OscConfig+0x5e8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	e013      	b.n	8002d84 <HAL_RCC_OscConfig+0x500>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d6e:	2302      	movs	r3, #2
 8002d70:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d74:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002d78:	fa93 f3a3 	rbit	r3, r3
 8002d7c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002d80:	4b3a      	ldr	r3, [pc, #232]	; (8002e6c <HAL_RCC_OscConfig+0x5e8>)
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	2202      	movs	r2, #2
 8002d86:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002d8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002d8e:	fa92 f2a2 	rbit	r2, r2
 8002d92:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002d96:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002d9a:	fab2 f282 	clz	r2, r2
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	f042 0220 	orr.w	r2, r2, #32
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	f002 021f 	and.w	r2, r2, #31
 8002daa:	2101      	movs	r1, #1
 8002dac:	fa01 f202 	lsl.w	r2, r1, r2
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0af      	beq.n	8002d16 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db6:	4b2d      	ldr	r3, [pc, #180]	; (8002e6c <HAL_RCC_OscConfig+0x5e8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	21f8      	movs	r1, #248	; 0xf8
 8002dcc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002dd4:	fa91 f1a1 	rbit	r1, r1
 8002dd8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ddc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002de0:	fab1 f181 	clz	r1, r1
 8002de4:	b2c9      	uxtb	r1, r1
 8002de6:	408b      	lsls	r3, r1
 8002de8:	4920      	ldr	r1, [pc, #128]	; (8002e6c <HAL_RCC_OscConfig+0x5e8>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]
 8002dee:	e06c      	b.n	8002eca <HAL_RCC_OscConfig+0x646>
 8002df0:	2301      	movs	r3, #1
 8002df2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	461a      	mov	r2, r3
 8002e18:	2300      	movs	r3, #0
 8002e1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7ff f870 	bl	8001f00 <HAL_GetTick>
 8002e20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e26:	f7ff f86b 	bl	8001f00 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d902      	bls.n	8002e3c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	f000 bd5a 	b.w	80038f0 <HAL_RCC_OscConfig+0x106c>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d104      	bne.n	8002e70 <HAL_RCC_OscConfig+0x5ec>
 8002e66:	4b01      	ldr	r3, [pc, #4]	; (8002e6c <HAL_RCC_OscConfig+0x5e8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	e015      	b.n	8002e98 <HAL_RCC_OscConfig+0x614>
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	2302      	movs	r3, #2
 8002e72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e82:	2302      	movs	r3, #2
 8002e84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002e88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002e94:	4bc8      	ldr	r3, [pc, #800]	; (80031b8 <HAL_RCC_OscConfig+0x934>)
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	2202      	movs	r2, #2
 8002e9a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002e9e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ea2:	fa92 f2a2 	rbit	r2, r2
 8002ea6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002eaa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002eae:	fab2 f282 	clz	r2, r2
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	f042 0220 	orr.w	r2, r2, #32
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	f002 021f 	and.w	r2, r2, #31
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1ad      	bne.n	8002e26 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8110 	beq.w	8003100 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d079      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x760>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4bab      	ldr	r3, [pc, #684]	; (80031bc <HAL_RCC_OscConfig+0x938>)
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	461a      	mov	r2, r3
 8002f16:	2301      	movs	r3, #1
 8002f18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1a:	f7fe fff1 	bl	8001f00 <HAL_GetTick>
 8002f1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f24:	f7fe ffec 	bl	8001f00 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d902      	bls.n	8002f3a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	f000 bcdb 	b.w	80038f0 <HAL_RCC_OscConfig+0x106c>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f50:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f54:	2202      	movs	r2, #2
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	fa93 f2a3 	rbit	r2, r3
 8002f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f78:	2202      	movs	r2, #2
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	fa93 f2a3 	rbit	r2, r3
 8002f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f92:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f94:	4b88      	ldr	r3, [pc, #544]	; (80031b8 <HAL_RCC_OscConfig+0x934>)
 8002f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	6019      	str	r1, [r3, #0]
 8002fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	fa93 f1a3 	rbit	r1, r3
 8002fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fba:	6019      	str	r1, [r3, #0]
  return result;
 8002fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0a0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x6a0>
 8002fe2:	e08d      	b.n	8003100 <HAL_RCC_OscConfig+0x87c>
 8002fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	fa93 f2a3 	rbit	r2, r3
 8002ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003002:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003006:	601a      	str	r2, [r3, #0]
  return result;
 8003008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003010:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	4b68      	ldr	r3, [pc, #416]	; (80031bc <HAL_RCC_OscConfig+0x938>)
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	461a      	mov	r2, r3
 8003022:	2300      	movs	r3, #0
 8003024:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003026:	f7fe ff6b 	bl	8001f00 <HAL_GetTick>
 800302a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800302e:	e00a      	b.n	8003046 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003030:	f7fe ff66 	bl	8001f00 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d902      	bls.n	8003046 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	f000 bc55 	b.w	80038f0 <HAL_RCC_OscConfig+0x106c>
 8003046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800304e:	2202      	movs	r2, #2
 8003050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003056:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	fa93 f2a3 	rbit	r2, r3
 8003060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003064:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003072:	2202      	movs	r2, #2
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	fa93 f2a3 	rbit	r2, r3
 8003084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003088:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003096:	2202      	movs	r2, #2
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	fa93 f2a3 	rbit	r2, r3
 80030a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b2:	4b41      	ldr	r3, [pc, #260]	; (80031b8 <HAL_RCC_OscConfig+0x934>)
 80030b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80030be:	2102      	movs	r1, #2
 80030c0:	6019      	str	r1, [r3, #0]
 80030c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	fa93 f1a3 	rbit	r1, r3
 80030d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030d8:	6019      	str	r1, [r3, #0]
  return result;
 80030da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030de:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	2101      	movs	r1, #1
 80030f6:	fa01 f303 	lsl.w	r3, r1, r3
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d197      	bne.n	8003030 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003104:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 81a1 	beq.w	8003458 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003116:	2300      	movs	r3, #0
 8003118:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311c:	4b26      	ldr	r3, [pc, #152]	; (80031b8 <HAL_RCC_OscConfig+0x934>)
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d116      	bne.n	8003156 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003128:	4b23      	ldr	r3, [pc, #140]	; (80031b8 <HAL_RCC_OscConfig+0x934>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	4a22      	ldr	r2, [pc, #136]	; (80031b8 <HAL_RCC_OscConfig+0x934>)
 800312e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003132:	61d3      	str	r3, [r2, #28]
 8003134:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <HAL_RCC_OscConfig+0x934>)
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800313c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003140:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800314e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003150:	2301      	movs	r3, #1
 8003152:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003156:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <HAL_RCC_OscConfig+0x93c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d11a      	bne.n	8003198 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003162:	4b17      	ldr	r3, [pc, #92]	; (80031c0 <HAL_RCC_OscConfig+0x93c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a16      	ldr	r2, [pc, #88]	; (80031c0 <HAL_RCC_OscConfig+0x93c>)
 8003168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800316e:	f7fe fec7 	bl	8001f00 <HAL_GetTick>
 8003172:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003176:	e009      	b.n	800318c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003178:	f7fe fec2 	bl	8001f00 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b64      	cmp	r3, #100	; 0x64
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e3b1      	b.n	80038f0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <HAL_RCC_OscConfig+0x93c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0ef      	beq.n	8003178 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d10d      	bne.n	80031c4 <HAL_RCC_OscConfig+0x940>
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <HAL_RCC_OscConfig+0x934>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	4a02      	ldr	r2, [pc, #8]	; (80031b8 <HAL_RCC_OscConfig+0x934>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6213      	str	r3, [r2, #32]
 80031b4:	e03c      	b.n	8003230 <HAL_RCC_OscConfig+0x9ac>
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000
 80031bc:	10908120 	.word	0x10908120
 80031c0:	40007000 	.word	0x40007000
 80031c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10c      	bne.n	80031ee <HAL_RCC_OscConfig+0x96a>
 80031d4:	4bc1      	ldr	r3, [pc, #772]	; (80034dc <HAL_RCC_OscConfig+0xc58>)
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	4ac0      	ldr	r2, [pc, #768]	; (80034dc <HAL_RCC_OscConfig+0xc58>)
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	6213      	str	r3, [r2, #32]
 80031e0:	4bbe      	ldr	r3, [pc, #760]	; (80034dc <HAL_RCC_OscConfig+0xc58>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	4abd      	ldr	r2, [pc, #756]	; (80034dc <HAL_RCC_OscConfig+0xc58>)
 80031e6:	f023 0304 	bic.w	r3, r3, #4
 80031ea:	6213      	str	r3, [r2, #32]
 80031ec:	e020      	b.n	8003230 <HAL_RCC_OscConfig+0x9ac>
 80031ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	2b05      	cmp	r3, #5
 80031fc:	d10c      	bne.n	8003218 <HAL_RCC_OscConfig+0x994>
 80031fe:	4bb7      	ldr	r3, [pc, #732]	; (80034dc <HAL_RCC_OscConfig+0xc58>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4ab6      	ldr	r2, [pc, #728]	; (80034dc <HAL_RCC_OscConfig+0xc58>)
 8003204:	f043 0304 	orr.w	r3, r3, #4
 8003208:	6213      	str	r3, [r2, #32]
 800320a:	4bb4      	ldr	r3, [pc, #720]	; (80034dc <HAL_RCC_OscConfig+0xc58>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4ab3      	ldr	r2, [pc, #716]	; (80034dc <HAL_RCC_OscConfig+0xc58>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6213      	str	r3, [r2, #32]
 8003216:	e00b      	b.n	8003230 <HAL_RCC_OscConfig+0x9ac>
 8003218:	4bb0      	ldr	r3, [pc, #704]	; (80034dc <HAL_RCC_OscConfig+0xc58>)
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	4aaf      	ldr	r2, [pc, #700]	; (80034dc <HAL_RCC_OscConfig+0xc58>)
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	6213      	str	r3, [r2, #32]
 8003224:	4bad      	ldr	r3, [pc, #692]	; (80034dc <HAL_RCC_OscConfig+0xc58>)
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	4aac      	ldr	r2, [pc, #688]	; (80034dc <HAL_RCC_OscConfig+0xc58>)
 800322a:	f023 0304 	bic.w	r3, r3, #4
 800322e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003234:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8081 	beq.w	8003344 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003242:	f7fe fe5d 	bl	8001f00 <HAL_GetTick>
 8003246:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324a:	e00b      	b.n	8003264 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800324c:	f7fe fe58 	bl	8001f00 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f241 3288 	movw	r2, #5000	; 0x1388
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e345      	b.n	80038f0 <HAL_RCC_OscConfig+0x106c>
 8003264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003268:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800326c:	2202      	movs	r2, #2
 800326e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003274:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	fa93 f2a3 	rbit	r2, r3
 800327e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003282:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003290:	2202      	movs	r2, #2
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003298:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	fa93 f2a3 	rbit	r2, r3
 80032a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032aa:	601a      	str	r2, [r3, #0]
  return result;
 80032ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	f043 0302 	orr.w	r3, r3, #2
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d102      	bne.n	80032d0 <HAL_RCC_OscConfig+0xa4c>
 80032ca:	4b84      	ldr	r3, [pc, #528]	; (80034dc <HAL_RCC_OscConfig+0xc58>)
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	e013      	b.n	80032f8 <HAL_RCC_OscConfig+0xa74>
 80032d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032d8:	2202      	movs	r2, #2
 80032da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	fa93 f2a3 	rbit	r2, r3
 80032ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	4b79      	ldr	r3, [pc, #484]	; (80034dc <HAL_RCC_OscConfig+0xc58>)
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003300:	2102      	movs	r1, #2
 8003302:	6011      	str	r1, [r2, #0]
 8003304:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003308:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800330c:	6812      	ldr	r2, [r2, #0]
 800330e:	fa92 f1a2 	rbit	r1, r2
 8003312:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003316:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800331a:	6011      	str	r1, [r2, #0]
  return result;
 800331c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003320:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	fab2 f282 	clz	r2, r2
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	f002 021f 	and.w	r2, r2, #31
 8003336:	2101      	movs	r1, #1
 8003338:	fa01 f202 	lsl.w	r2, r1, r2
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d084      	beq.n	800324c <HAL_RCC_OscConfig+0x9c8>
 8003342:	e07f      	b.n	8003444 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003344:	f7fe fddc 	bl	8001f00 <HAL_GetTick>
 8003348:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334c:	e00b      	b.n	8003366 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334e:	f7fe fdd7 	bl	8001f00 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	; 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e2c4      	b.n	80038f0 <HAL_RCC_OscConfig+0x106c>
 8003366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800336e:	2202      	movs	r2, #2
 8003370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003376:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	fa93 f2a3 	rbit	r2, r3
 8003380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003384:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003392:	2202      	movs	r2, #2
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	fa93 f2a3 	rbit	r2, r3
 80033a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80033ac:	601a      	str	r2, [r3, #0]
  return result;
 80033ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80033b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b8:	fab3 f383 	clz	r3, r3
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f043 0302 	orr.w	r3, r3, #2
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d102      	bne.n	80033d2 <HAL_RCC_OscConfig+0xb4e>
 80033cc:	4b43      	ldr	r3, [pc, #268]	; (80034dc <HAL_RCC_OscConfig+0xc58>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	e013      	b.n	80033fa <HAL_RCC_OscConfig+0xb76>
 80033d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033da:	2202      	movs	r2, #2
 80033dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	fa93 f2a3 	rbit	r2, r3
 80033ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	4b39      	ldr	r3, [pc, #228]	; (80034dc <HAL_RCC_OscConfig+0xc58>)
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003402:	2102      	movs	r1, #2
 8003404:	6011      	str	r1, [r2, #0]
 8003406:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800340a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	fa92 f1a2 	rbit	r1, r2
 8003414:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003418:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800341c:	6011      	str	r1, [r2, #0]
  return result;
 800341e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003422:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	fab2 f282 	clz	r2, r2
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	f002 021f 	and.w	r2, r2, #31
 8003438:	2101      	movs	r1, #1
 800343a:	fa01 f202 	lsl.w	r2, r1, r2
 800343e:	4013      	ands	r3, r2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d184      	bne.n	800334e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003444:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003448:	2b01      	cmp	r3, #1
 800344a:	d105      	bne.n	8003458 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344c:	4b23      	ldr	r3, [pc, #140]	; (80034dc <HAL_RCC_OscConfig+0xc58>)
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	4a22      	ldr	r2, [pc, #136]	; (80034dc <HAL_RCC_OscConfig+0xc58>)
 8003452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003456:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8242 	beq.w	80038ee <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800346a:	4b1c      	ldr	r3, [pc, #112]	; (80034dc <HAL_RCC_OscConfig+0xc58>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	2b08      	cmp	r3, #8
 8003474:	f000 8213 	beq.w	800389e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	2b02      	cmp	r3, #2
 8003486:	f040 8162 	bne.w	800374e <HAL_RCC_OscConfig+0xeca>
 800348a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003492:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003496:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	fa93 f2a3 	rbit	r2, r3
 80034a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034aa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80034ae:	601a      	str	r2, [r3, #0]
  return result;
 80034b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80034b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	461a      	mov	r2, r3
 80034cc:	2300      	movs	r3, #0
 80034ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d0:	f7fe fd16 	bl	8001f00 <HAL_GetTick>
 80034d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d8:	e00c      	b.n	80034f4 <HAL_RCC_OscConfig+0xc70>
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e0:	f7fe fd0e 	bl	8001f00 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e1fd      	b.n	80038f0 <HAL_RCC_OscConfig+0x106c>
 80034f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80034fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003506:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	fa93 f2a3 	rbit	r2, r3
 8003510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003514:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003518:	601a      	str	r2, [r3, #0]
  return result;
 800351a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003522:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	d102      	bne.n	800353e <HAL_RCC_OscConfig+0xcba>
 8003538:	4bb0      	ldr	r3, [pc, #704]	; (80037fc <HAL_RCC_OscConfig+0xf78>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	e027      	b.n	800358e <HAL_RCC_OscConfig+0xd0a>
 800353e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003542:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003546:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800354a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003550:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	fa93 f2a3 	rbit	r2, r3
 800355a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003568:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800356c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003576:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	fa93 f2a3 	rbit	r2, r3
 8003580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003584:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	4b9c      	ldr	r3, [pc, #624]	; (80037fc <HAL_RCC_OscConfig+0xf78>)
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003592:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003596:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800359a:	6011      	str	r1, [r2, #0]
 800359c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035a0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	fa92 f1a2 	rbit	r1, r2
 80035aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ae:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80035b2:	6011      	str	r1, [r2, #0]
  return result;
 80035b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035b8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	fab2 f282 	clz	r2, r2
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	f042 0220 	orr.w	r2, r2, #32
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	f002 021f 	and.w	r2, r2, #31
 80035ce:	2101      	movs	r1, #1
 80035d0:	fa01 f202 	lsl.w	r2, r1, r2
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d182      	bne.n	80034e0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035da:	4b88      	ldr	r3, [pc, #544]	; (80037fc <HAL_RCC_OscConfig+0xf78>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	430b      	orrs	r3, r1
 80035fc:	497f      	ldr	r1, [pc, #508]	; (80037fc <HAL_RCC_OscConfig+0xf78>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	604b      	str	r3, [r1, #4]
 8003602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003606:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800360a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800360e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003614:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	fa93 f2a3 	rbit	r2, r3
 800361e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003622:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003626:	601a      	str	r2, [r3, #0]
  return result;
 8003628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003630:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800363c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	461a      	mov	r2, r3
 8003644:	2301      	movs	r3, #1
 8003646:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f7fe fc5a 	bl	8001f00 <HAL_GetTick>
 800364c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003650:	e009      	b.n	8003666 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003652:	f7fe fc55 	bl	8001f00 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e144      	b.n	80038f0 <HAL_RCC_OscConfig+0x106c>
 8003666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800366e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003672:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003678:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	fa93 f2a3 	rbit	r2, r3
 8003682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003686:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800368a:	601a      	str	r2, [r3, #0]
  return result;
 800368c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003690:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003694:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003696:	fab3 f383 	clz	r3, r3
 800369a:	b2db      	uxtb	r3, r3
 800369c:	095b      	lsrs	r3, r3, #5
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d102      	bne.n	80036b0 <HAL_RCC_OscConfig+0xe2c>
 80036aa:	4b54      	ldr	r3, [pc, #336]	; (80037fc <HAL_RCC_OscConfig+0xf78>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	e027      	b.n	8003700 <HAL_RCC_OscConfig+0xe7c>
 80036b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	fa93 f2a3 	rbit	r2, r3
 80036cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036da:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80036de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	fa93 f2a3 	rbit	r2, r3
 80036f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	4b3f      	ldr	r3, [pc, #252]	; (80037fc <HAL_RCC_OscConfig+0xf78>)
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003704:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003708:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800370c:	6011      	str	r1, [r2, #0]
 800370e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003712:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	fa92 f1a2 	rbit	r1, r2
 800371c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003720:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003724:	6011      	str	r1, [r2, #0]
  return result;
 8003726:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800372a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	fab2 f282 	clz	r2, r2
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	f042 0220 	orr.w	r2, r2, #32
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	f002 021f 	and.w	r2, r2, #31
 8003740:	2101      	movs	r1, #1
 8003742:	fa01 f202 	lsl.w	r2, r1, r2
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d082      	beq.n	8003652 <HAL_RCC_OscConfig+0xdce>
 800374c:	e0cf      	b.n	80038ee <HAL_RCC_OscConfig+0x106a>
 800374e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003752:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003756:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800375a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003760:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	fa93 f2a3 	rbit	r2, r3
 800376a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003772:	601a      	str	r2, [r3, #0]
  return result;
 8003774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003778:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800377c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377e:	fab3 f383 	clz	r3, r3
 8003782:	b2db      	uxtb	r3, r3
 8003784:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003788:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	461a      	mov	r2, r3
 8003790:	2300      	movs	r3, #0
 8003792:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003794:	f7fe fbb4 	bl	8001f00 <HAL_GetTick>
 8003798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800379c:	e009      	b.n	80037b2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800379e:	f7fe fbaf 	bl	8001f00 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e09e      	b.n	80038f0 <HAL_RCC_OscConfig+0x106c>
 80037b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80037ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	fa93 f2a3 	rbit	r2, r3
 80037ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037d6:	601a      	str	r2, [r3, #0]
  return result;
 80037d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e2:	fab3 f383 	clz	r3, r3
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d104      	bne.n	8003800 <HAL_RCC_OscConfig+0xf7c>
 80037f6:	4b01      	ldr	r3, [pc, #4]	; (80037fc <HAL_RCC_OscConfig+0xf78>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	e029      	b.n	8003850 <HAL_RCC_OscConfig+0xfcc>
 80037fc:	40021000 	.word	0x40021000
 8003800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003804:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003808:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800380c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003812:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	fa93 f2a3 	rbit	r2, r3
 800381c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003820:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800382e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003838:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	fa93 f2a3 	rbit	r2, r3
 8003842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003846:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	4b2b      	ldr	r3, [pc, #172]	; (80038fc <HAL_RCC_OscConfig+0x1078>)
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003854:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003858:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800385c:	6011      	str	r1, [r2, #0]
 800385e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003862:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	fa92 f1a2 	rbit	r1, r2
 800386c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003870:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003874:	6011      	str	r1, [r2, #0]
  return result;
 8003876:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800387a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	fab2 f282 	clz	r2, r2
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	f042 0220 	orr.w	r2, r2, #32
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	f002 021f 	and.w	r2, r2, #31
 8003890:	2101      	movs	r1, #1
 8003892:	fa01 f202 	lsl.w	r2, r1, r2
 8003896:	4013      	ands	r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d180      	bne.n	800379e <HAL_RCC_OscConfig+0xf1a>
 800389c:	e027      	b.n	80038ee <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800389e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e01e      	b.n	80038f0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_RCC_OscConfig+0x1078>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038be:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d10b      	bne.n	80038ea <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80038d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d001      	beq.n	80038ee <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000

08003900 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b09e      	sub	sp, #120	; 0x78
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e162      	b.n	8003bde <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003918:	4b90      	ldr	r3, [pc, #576]	; (8003b5c <HAL_RCC_ClockConfig+0x25c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d910      	bls.n	8003948 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b8d      	ldr	r3, [pc, #564]	; (8003b5c <HAL_RCC_ClockConfig+0x25c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 0207 	bic.w	r2, r3, #7
 800392e:	498b      	ldr	r1, [pc, #556]	; (8003b5c <HAL_RCC_ClockConfig+0x25c>)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	4b89      	ldr	r3, [pc, #548]	; (8003b5c <HAL_RCC_ClockConfig+0x25c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e14a      	b.n	8003bde <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003954:	4b82      	ldr	r3, [pc, #520]	; (8003b60 <HAL_RCC_ClockConfig+0x260>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	497f      	ldr	r1, [pc, #508]	; (8003b60 <HAL_RCC_ClockConfig+0x260>)
 8003962:	4313      	orrs	r3, r2
 8003964:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 80dc 	beq.w	8003b2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d13c      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xf6>
 800397c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003980:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003984:	fa93 f3a3 	rbit	r3, r3
 8003988:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800398a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398c:	fab3 f383 	clz	r3, r3
 8003990:	b2db      	uxtb	r3, r3
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	b2db      	uxtb	r3, r3
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b01      	cmp	r3, #1
 800399e:	d102      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xa6>
 80039a0:	4b6f      	ldr	r3, [pc, #444]	; (8003b60 <HAL_RCC_ClockConfig+0x260>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	e00f      	b.n	80039c6 <HAL_RCC_ClockConfig+0xc6>
 80039a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	667b      	str	r3, [r7, #100]	; 0x64
 80039b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039b8:	663b      	str	r3, [r7, #96]	; 0x60
 80039ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039bc:	fa93 f3a3 	rbit	r3, r3
 80039c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039c2:	4b67      	ldr	r3, [pc, #412]	; (8003b60 <HAL_RCC_ClockConfig+0x260>)
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80039cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039ce:	fa92 f2a2 	rbit	r2, r2
 80039d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80039d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039d6:	fab2 f282 	clz	r2, r2
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	f042 0220 	orr.w	r2, r2, #32
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	f002 021f 	and.w	r2, r2, #31
 80039e6:	2101      	movs	r1, #1
 80039e8:	fa01 f202 	lsl.w	r2, r1, r2
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d17b      	bne.n	8003aea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0f3      	b.n	8003bde <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d13c      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x178>
 80039fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a06:	fa93 f3a3 	rbit	r3, r3
 8003a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0e:	fab3 f383 	clz	r3, r3
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d102      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x128>
 8003a22:	4b4f      	ldr	r3, [pc, #316]	; (8003b60 <HAL_RCC_ClockConfig+0x260>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	e00f      	b.n	8003a48 <HAL_RCC_ClockConfig+0x148>
 8003a28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a30:	fa93 f3a3 	rbit	r3, r3
 8003a34:	647b      	str	r3, [r7, #68]	; 0x44
 8003a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a3a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a3e:	fa93 f3a3 	rbit	r3, r3
 8003a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a44:	4b46      	ldr	r3, [pc, #280]	; (8003b60 <HAL_RCC_ClockConfig+0x260>)
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a4c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a50:	fa92 f2a2 	rbit	r2, r2
 8003a54:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a58:	fab2 f282 	clz	r2, r2
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	f042 0220 	orr.w	r2, r2, #32
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	f002 021f 	and.w	r2, r2, #31
 8003a68:	2101      	movs	r1, #1
 8003a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d13a      	bne.n	8003aea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0b2      	b.n	8003bde <HAL_RCC_ClockConfig+0x2de>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7e:	fa93 f3a3 	rbit	r3, r3
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d102      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x1a0>
 8003a9a:	4b31      	ldr	r3, [pc, #196]	; (8003b60 <HAL_RCC_ClockConfig+0x260>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	e00d      	b.n	8003abc <HAL_RCC_ClockConfig+0x1bc>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa6:	fa93 f3a3 	rbit	r3, r3
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003aac:	2302      	movs	r3, #2
 8003aae:	623b      	str	r3, [r7, #32]
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	fa93 f3a3 	rbit	r3, r3
 8003ab6:	61fb      	str	r3, [r7, #28]
 8003ab8:	4b29      	ldr	r3, [pc, #164]	; (8003b60 <HAL_RCC_ClockConfig+0x260>)
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	2202      	movs	r2, #2
 8003abe:	61ba      	str	r2, [r7, #24]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	fa92 f2a2 	rbit	r2, r2
 8003ac6:	617a      	str	r2, [r7, #20]
  return result;
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	fab2 f282 	clz	r2, r2
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	f042 0220 	orr.w	r2, r2, #32
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	f002 021f 	and.w	r2, r2, #31
 8003ada:	2101      	movs	r1, #1
 8003adc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e079      	b.n	8003bde <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aea:	4b1d      	ldr	r3, [pc, #116]	; (8003b60 <HAL_RCC_ClockConfig+0x260>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f023 0203 	bic.w	r2, r3, #3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	491a      	ldr	r1, [pc, #104]	; (8003b60 <HAL_RCC_ClockConfig+0x260>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003afc:	f7fe fa00 	bl	8001f00 <HAL_GetTick>
 8003b00:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b02:	e00a      	b.n	8003b1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b04:	f7fe f9fc 	bl	8001f00 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e061      	b.n	8003bde <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1a:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <HAL_RCC_ClockConfig+0x260>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 020c 	and.w	r2, r3, #12
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d1eb      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_RCC_ClockConfig+0x25c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d214      	bcs.n	8003b64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3a:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <HAL_RCC_ClockConfig+0x25c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 0207 	bic.w	r2, r3, #7
 8003b42:	4906      	ldr	r1, [pc, #24]	; (8003b5c <HAL_RCC_ClockConfig+0x25c>)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4a:	4b04      	ldr	r3, [pc, #16]	; (8003b5c <HAL_RCC_ClockConfig+0x25c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d005      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e040      	b.n	8003bde <HAL_RCC_ClockConfig+0x2de>
 8003b5c:	40022000 	.word	0x40022000
 8003b60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b70:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	491a      	ldr	r1, [pc, #104]	; (8003be8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b8e:	4b16      	ldr	r3, [pc, #88]	; (8003be8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4912      	ldr	r1, [pc, #72]	; (8003be8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ba2:	f000 f829 	bl	8003bf8 <HAL_RCC_GetSysClockFreq>
 8003ba6:	4601      	mov	r1, r0
 8003ba8:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <HAL_RCC_ClockConfig+0x2e8>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb0:	22f0      	movs	r2, #240	; 0xf0
 8003bb2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	fa92 f2a2 	rbit	r2, r2
 8003bba:	60fa      	str	r2, [r7, #12]
  return result;
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	fab2 f282 	clz	r2, r2
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	40d3      	lsrs	r3, r2
 8003bc6:	4a09      	ldr	r2, [pc, #36]	; (8003bec <HAL_RCC_ClockConfig+0x2ec>)
 8003bc8:	5cd3      	ldrb	r3, [r2, r3]
 8003bca:	fa21 f303 	lsr.w	r3, r1, r3
 8003bce:	4a08      	ldr	r2, [pc, #32]	; (8003bf0 <HAL_RCC_ClockConfig+0x2f0>)
 8003bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003bd2:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <HAL_RCC_ClockConfig+0x2f4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe f94e 	bl	8001e78 <HAL_InitTick>
  
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3778      	adds	r7, #120	; 0x78
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40021000 	.word	0x40021000
 8003bec:	08006eb4 	.word	0x08006eb4
 8003bf0:	20000028 	.word	0x20000028
 8003bf4:	2000002c 	.word	0x2000002c

08003bf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b08b      	sub	sp, #44	; 0x2c
 8003bfc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	2300      	movs	r3, #0
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	2300      	movs	r3, #0
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c12:	4b29      	ldr	r3, [pc, #164]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d002      	beq.n	8003c28 <HAL_RCC_GetSysClockFreq+0x30>
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d003      	beq.n	8003c2e <HAL_RCC_GetSysClockFreq+0x36>
 8003c26:	e03c      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c28:	4b24      	ldr	r3, [pc, #144]	; (8003cbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c2a:	623b      	str	r3, [r7, #32]
      break;
 8003c2c:	e03c      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003c38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	fa92 f2a2 	rbit	r2, r2
 8003c40:	607a      	str	r2, [r7, #4]
  return result;
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	fab2 f282 	clz	r2, r2
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	40d3      	lsrs	r3, r2
 8003c4c:	4a1c      	ldr	r2, [pc, #112]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c4e:	5cd3      	ldrb	r3, [r2, r3]
 8003c50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003c52:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	220f      	movs	r2, #15
 8003c5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	fa92 f2a2 	rbit	r2, r2
 8003c64:	60fa      	str	r2, [r7, #12]
  return result;
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	fab2 f282 	clz	r2, r2
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	40d3      	lsrs	r3, r2
 8003c70:	4a14      	ldr	r2, [pc, #80]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c72:	5cd3      	ldrb	r3, [r2, r3]
 8003c74:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c80:	4a0e      	ldr	r2, [pc, #56]	; (8003cbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	fb02 f303 	mul.w	r3, r2, r3
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c90:	e004      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	4a0c      	ldr	r2, [pc, #48]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c96:	fb02 f303 	mul.w	r3, r2, r3
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	623b      	str	r3, [r7, #32]
      break;
 8003ca0:	e002      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ca2:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ca4:	623b      	str	r3, [r7, #32]
      break;
 8003ca6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	372c      	adds	r7, #44	; 0x2c
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	007a1200 	.word	0x007a1200
 8003cc0:	08006ecc 	.word	0x08006ecc
 8003cc4:	08006edc 	.word	0x08006edc
 8003cc8:	003d0900 	.word	0x003d0900

08003ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cd0:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	20000028 	.word	0x20000028

08003ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003cea:	f7ff ffef 	bl	8003ccc <HAL_RCC_GetHCLKFreq>
 8003cee:	4601      	mov	r1, r0
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cf8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003cfc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	fa92 f2a2 	rbit	r2, r2
 8003d04:	603a      	str	r2, [r7, #0]
  return result;
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	fab2 f282 	clz	r2, r2
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	40d3      	lsrs	r3, r2
 8003d10:	4a04      	ldr	r2, [pc, #16]	; (8003d24 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d12:	5cd3      	ldrb	r3, [r2, r3]
 8003d14:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40021000 	.word	0x40021000
 8003d24:	08006ec4 	.word	0x08006ec4

08003d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d2e:	f7ff ffcd 	bl	8003ccc <HAL_RCC_GetHCLKFreq>
 8003d32:	4601      	mov	r1, r0
 8003d34:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003d3c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003d40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	fa92 f2a2 	rbit	r2, r2
 8003d48:	603a      	str	r2, [r7, #0]
  return result;
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	fab2 f282 	clz	r2, r2
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	40d3      	lsrs	r3, r2
 8003d54:	4a04      	ldr	r2, [pc, #16]	; (8003d68 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003d56:	5cd3      	ldrb	r3, [r2, r3]
 8003d58:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40021000 	.word	0x40021000
 8003d68:	08006ec4 	.word	0x08006ec4

08003d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b092      	sub	sp, #72	; 0x48
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 80d4 	beq.w	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d90:	4b4e      	ldr	r3, [pc, #312]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10e      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9c:	4b4b      	ldr	r3, [pc, #300]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	4a4a      	ldr	r2, [pc, #296]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da6:	61d3      	str	r3, [r2, #28]
 8003da8:	4b48      	ldr	r3, [pc, #288]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dba:	4b45      	ldr	r3, [pc, #276]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d118      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dc6:	4b42      	ldr	r3, [pc, #264]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a41      	ldr	r2, [pc, #260]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd2:	f7fe f895 	bl	8001f00 <HAL_GetTick>
 8003dd6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd8:	e008      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dda:	f7fe f891 	bl	8001f00 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b64      	cmp	r3, #100	; 0x64
 8003de6:	d901      	bls.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e14b      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dec:	4b38      	ldr	r3, [pc, #224]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003df8:	4b34      	ldr	r3, [pc, #208]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e00:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 8084 	beq.w	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d07c      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e18:	4b2c      	ldr	r3, [pc, #176]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2a:	fa93 f3a3 	rbit	r3, r3
 8003e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e32:	fab3 f383 	clz	r3, r3
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	4b26      	ldr	r3, [pc, #152]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	461a      	mov	r2, r3
 8003e42:	2301      	movs	r3, #1
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4e:	fa93 f3a3 	rbit	r3, r3
 8003e52:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e56:	fab3 f383 	clz	r3, r3
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	461a      	mov	r2, r3
 8003e66:	2300      	movs	r3, #0
 8003e68:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e6a:	4a18      	ldr	r2, [pc, #96]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d04b      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7a:	f7fe f841 	bl	8001f00 <HAL_GetTick>
 8003e7e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fe f83d 	bl	8001f00 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e0f5      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	fa93 f3a3 	rbit	r3, r3
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	623b      	str	r3, [r7, #32]
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	fa93 f3a3 	rbit	r3, r3
 8003eae:	61fb      	str	r3, [r7, #28]
  return result;
 8003eb0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb2:	fab3 f383 	clz	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f043 0302 	orr.w	r3, r3, #2
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d108      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003ec6:	4b01      	ldr	r3, [pc, #4]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	e00d      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40007000 	.word	0x40007000
 8003ed4:	10908100 	.word	0x10908100
 8003ed8:	2302      	movs	r3, #2
 8003eda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	4b69      	ldr	r3, [pc, #420]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	2202      	movs	r2, #2
 8003eea:	613a      	str	r2, [r7, #16]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	fa92 f2a2 	rbit	r2, r2
 8003ef2:	60fa      	str	r2, [r7, #12]
  return result;
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	fab2 f282 	clz	r2, r2
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	f002 021f 	and.w	r2, r2, #31
 8003f06:	2101      	movs	r1, #1
 8003f08:	fa01 f202 	lsl.w	r2, r1, r2
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0b7      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f12:	4b5e      	ldr	r3, [pc, #376]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	495b      	ldr	r1, [pc, #364]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d105      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2c:	4b57      	ldr	r3, [pc, #348]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	4a56      	ldr	r2, [pc, #344]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f44:	4b51      	ldr	r3, [pc, #324]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	f023 0203 	bic.w	r2, r3, #3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	494e      	ldr	r1, [pc, #312]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d008      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f62:	4b4a      	ldr	r3, [pc, #296]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	f023 0210 	bic.w	r2, r3, #16
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	4947      	ldr	r1, [pc, #284]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003f80:	4b42      	ldr	r3, [pc, #264]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	493f      	ldr	r1, [pc, #252]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d008      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f9e:	4b3b      	ldr	r3, [pc, #236]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	f023 0220 	bic.w	r2, r3, #32
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	4938      	ldr	r1, [pc, #224]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fbc:	4b33      	ldr	r3, [pc, #204]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	4930      	ldr	r1, [pc, #192]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d008      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fda:	4b2c      	ldr	r3, [pc, #176]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	4929      	ldr	r1, [pc, #164]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003ff8:	4b24      	ldr	r3, [pc, #144]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	4921      	ldr	r1, [pc, #132]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004006:	4313      	orrs	r3, r2
 8004008:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d008      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004016:	4b1d      	ldr	r3, [pc, #116]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	491a      	ldr	r1, [pc, #104]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004024:	4313      	orrs	r3, r2
 8004026:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d008      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004034:	4b15      	ldr	r3, [pc, #84]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004038:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	4912      	ldr	r1, [pc, #72]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004042:	4313      	orrs	r3, r2
 8004044:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d008      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004052:	4b0e      	ldr	r3, [pc, #56]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	490b      	ldr	r1, [pc, #44]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004060:	4313      	orrs	r3, r2
 8004062:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004070:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	4903      	ldr	r1, [pc, #12]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800407e:	4313      	orrs	r3, r2
 8004080:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3748      	adds	r7, #72	; 0x48
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40021000 	.word	0x40021000

08004090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e049      	b.n	8004136 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fd fc8a 	bl	80019d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3304      	adds	r3, #4
 80040cc:	4619      	mov	r1, r3
 80040ce:	4610      	mov	r0, r2
 80040d0:	f000 fdd2 	bl	8004c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	d001      	beq.n	8004158 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e033      	b.n	80041c0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a19      	ldr	r2, [pc, #100]	; (80041cc <HAL_TIM_Base_Start+0x8c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d009      	beq.n	800417e <HAL_TIM_Base_Start+0x3e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004172:	d004      	beq.n	800417e <HAL_TIM_Base_Start+0x3e>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a15      	ldr	r2, [pc, #84]	; (80041d0 <HAL_TIM_Base_Start+0x90>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d115      	bne.n	80041aa <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <HAL_TIM_Base_Start+0x94>)
 8004186:	4013      	ands	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2b06      	cmp	r3, #6
 800418e:	d015      	beq.n	80041bc <HAL_TIM_Base_Start+0x7c>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004196:	d011      	beq.n	80041bc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a8:	e008      	b.n	80041bc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0201 	orr.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	e000      	b.n	80041be <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40012c00 	.word	0x40012c00
 80041d0:	40014000 	.word	0x40014000
 80041d4:	00010007 	.word	0x00010007

080041d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d001      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e03b      	b.n	8004268 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a19      	ldr	r2, [pc, #100]	; (8004274 <HAL_TIM_Base_Start_IT+0x9c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d009      	beq.n	8004226 <HAL_TIM_Base_Start_IT+0x4e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421a:	d004      	beq.n	8004226 <HAL_TIM_Base_Start_IT+0x4e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a15      	ldr	r2, [pc, #84]	; (8004278 <HAL_TIM_Base_Start_IT+0xa0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d115      	bne.n	8004252 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	4b13      	ldr	r3, [pc, #76]	; (800427c <HAL_TIM_Base_Start_IT+0xa4>)
 800422e:	4013      	ands	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b06      	cmp	r3, #6
 8004236:	d015      	beq.n	8004264 <HAL_TIM_Base_Start_IT+0x8c>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423e:	d011      	beq.n	8004264 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0201 	orr.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004250:	e008      	b.n	8004264 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0201 	orr.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	e000      	b.n	8004266 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004264:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40014000 	.word	0x40014000
 800427c:	00010007 	.word	0x00010007

08004280 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0201 	bic.w	r2, r2, #1
 8004296:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6a1a      	ldr	r2, [r3, #32]
 800429e:	f241 1311 	movw	r3, #4369	; 0x1111
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10f      	bne.n	80042c8 <HAL_TIM_Base_Stop_IT+0x48>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6a1a      	ldr	r2, [r3, #32]
 80042ae:	f240 4344 	movw	r3, #1092	; 0x444
 80042b2:	4013      	ands	r3, r2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d107      	bne.n	80042c8 <HAL_TIM_Base_Stop_IT+0x48>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0201 	bic.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b082      	sub	sp, #8
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e049      	b.n	8004384 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d106      	bne.n	800430a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7fd fb89 	bl	8001a1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2202      	movs	r2, #2
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3304      	adds	r3, #4
 800431a:	4619      	mov	r1, r3
 800431c:	4610      	mov	r0, r2
 800431e:	f000 fcab 	bl	8004c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <HAL_TIM_PWM_Start+0x24>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	bf14      	ite	ne
 80043a8:	2301      	movne	r3, #1
 80043aa:	2300      	moveq	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	e03c      	b.n	800442a <HAL_TIM_PWM_Start+0x9e>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d109      	bne.n	80043ca <HAL_TIM_PWM_Start+0x3e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b01      	cmp	r3, #1
 80043c0:	bf14      	ite	ne
 80043c2:	2301      	movne	r3, #1
 80043c4:	2300      	moveq	r3, #0
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	e02f      	b.n	800442a <HAL_TIM_PWM_Start+0x9e>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d109      	bne.n	80043e4 <HAL_TIM_PWM_Start+0x58>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	bf14      	ite	ne
 80043dc:	2301      	movne	r3, #1
 80043de:	2300      	moveq	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	e022      	b.n	800442a <HAL_TIM_PWM_Start+0x9e>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2b0c      	cmp	r3, #12
 80043e8:	d109      	bne.n	80043fe <HAL_TIM_PWM_Start+0x72>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	bf14      	ite	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	2300      	moveq	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	e015      	b.n	800442a <HAL_TIM_PWM_Start+0x9e>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b10      	cmp	r3, #16
 8004402:	d109      	bne.n	8004418 <HAL_TIM_PWM_Start+0x8c>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	bf14      	ite	ne
 8004410:	2301      	movne	r3, #1
 8004412:	2300      	moveq	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	e008      	b.n	800442a <HAL_TIM_PWM_Start+0x9e>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b01      	cmp	r3, #1
 8004422:	bf14      	ite	ne
 8004424:	2301      	movne	r3, #1
 8004426:	2300      	moveq	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e083      	b.n	800453a <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d104      	bne.n	8004442 <HAL_TIM_PWM_Start+0xb6>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004440:	e023      	b.n	800448a <HAL_TIM_PWM_Start+0xfe>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b04      	cmp	r3, #4
 8004446:	d104      	bne.n	8004452 <HAL_TIM_PWM_Start+0xc6>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004450:	e01b      	b.n	800448a <HAL_TIM_PWM_Start+0xfe>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b08      	cmp	r3, #8
 8004456:	d104      	bne.n	8004462 <HAL_TIM_PWM_Start+0xd6>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004460:	e013      	b.n	800448a <HAL_TIM_PWM_Start+0xfe>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b0c      	cmp	r3, #12
 8004466:	d104      	bne.n	8004472 <HAL_TIM_PWM_Start+0xe6>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004470:	e00b      	b.n	800448a <HAL_TIM_PWM_Start+0xfe>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b10      	cmp	r3, #16
 8004476:	d104      	bne.n	8004482 <HAL_TIM_PWM_Start+0xf6>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004480:	e003      	b.n	800448a <HAL_TIM_PWM_Start+0xfe>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2201      	movs	r2, #1
 8004490:	6839      	ldr	r1, [r7, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 ff04 	bl	80052a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a29      	ldr	r2, [pc, #164]	; (8004544 <HAL_TIM_PWM_Start+0x1b8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00e      	beq.n	80044c0 <HAL_TIM_PWM_Start+0x134>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a28      	ldr	r2, [pc, #160]	; (8004548 <HAL_TIM_PWM_Start+0x1bc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d009      	beq.n	80044c0 <HAL_TIM_PWM_Start+0x134>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a26      	ldr	r2, [pc, #152]	; (800454c <HAL_TIM_PWM_Start+0x1c0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d004      	beq.n	80044c0 <HAL_TIM_PWM_Start+0x134>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a25      	ldr	r2, [pc, #148]	; (8004550 <HAL_TIM_PWM_Start+0x1c4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d101      	bne.n	80044c4 <HAL_TIM_PWM_Start+0x138>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <HAL_TIM_PWM_Start+0x13a>
 80044c4:	2300      	movs	r3, #0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a19      	ldr	r2, [pc, #100]	; (8004544 <HAL_TIM_PWM_Start+0x1b8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d009      	beq.n	80044f8 <HAL_TIM_PWM_Start+0x16c>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ec:	d004      	beq.n	80044f8 <HAL_TIM_PWM_Start+0x16c>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a15      	ldr	r2, [pc, #84]	; (8004548 <HAL_TIM_PWM_Start+0x1bc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d115      	bne.n	8004524 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689a      	ldr	r2, [r3, #8]
 80044fe:	4b15      	ldr	r3, [pc, #84]	; (8004554 <HAL_TIM_PWM_Start+0x1c8>)
 8004500:	4013      	ands	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b06      	cmp	r3, #6
 8004508:	d015      	beq.n	8004536 <HAL_TIM_PWM_Start+0x1aa>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004510:	d011      	beq.n	8004536 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0201 	orr.w	r2, r2, #1
 8004520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004522:	e008      	b.n	8004536 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	e000      	b.n	8004538 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004536:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40012c00 	.word	0x40012c00
 8004548:	40014000 	.word	0x40014000
 800454c:	40014400 	.word	0x40014400
 8004550:	40014800 	.word	0x40014800
 8004554:	00010007 	.word	0x00010007

08004558 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e097      	b.n	800469c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fd f9e5 	bl	8001950 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2202      	movs	r2, #2
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6812      	ldr	r2, [r2, #0]
 8004598:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800459c:	f023 0307 	bic.w	r3, r3, #7
 80045a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	3304      	adds	r3, #4
 80045aa:	4619      	mov	r1, r3
 80045ac:	4610      	mov	r0, r2
 80045ae:	f000 fb63 	bl	8004c78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045da:	f023 0303 	bic.w	r3, r3, #3
 80045de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	021b      	lsls	r3, r3, #8
 80045ea:	4313      	orrs	r3, r2
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80045f8:	f023 030c 	bic.w	r3, r3, #12
 80045fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004604:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004608:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	021b      	lsls	r3, r3, #8
 8004614:	4313      	orrs	r3, r2
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	011a      	lsls	r2, r3, #4
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	031b      	lsls	r3, r3, #12
 8004628:	4313      	orrs	r3, r2
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004636:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800463e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	4313      	orrs	r3, r2
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d110      	bne.n	80046f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d102      	bne.n	80046e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80046da:	7b7b      	ldrb	r3, [r7, #13]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d001      	beq.n	80046e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e069      	b.n	80047b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f4:	e031      	b.n	800475a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d110      	bne.n	800471e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046fc:	7bbb      	ldrb	r3, [r7, #14]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d102      	bne.n	8004708 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004702:	7b3b      	ldrb	r3, [r7, #12]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d001      	beq.n	800470c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e055      	b.n	80047b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800471c:	e01d      	b.n	800475a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d108      	bne.n	8004736 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004724:	7bbb      	ldrb	r3, [r7, #14]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d105      	bne.n	8004736 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800472a:	7b7b      	ldrb	r3, [r7, #13]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d102      	bne.n	8004736 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004730:	7b3b      	ldrb	r3, [r7, #12]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d001      	beq.n	800473a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e03e      	b.n	80047b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2202      	movs	r2, #2
 800473e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2202      	movs	r2, #2
 8004746:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2202      	movs	r2, #2
 800474e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2202      	movs	r2, #2
 8004756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_TIM_Encoder_Start+0xc4>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	2b04      	cmp	r3, #4
 8004764:	d008      	beq.n	8004778 <HAL_TIM_Encoder_Start+0xd4>
 8004766:	e00f      	b.n	8004788 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2201      	movs	r2, #1
 800476e:	2100      	movs	r1, #0
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fd95 	bl	80052a0 <TIM_CCxChannelCmd>
      break;
 8004776:	e016      	b.n	80047a6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2201      	movs	r2, #1
 800477e:	2104      	movs	r1, #4
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fd8d 	bl	80052a0 <TIM_CCxChannelCmd>
      break;
 8004786:	e00e      	b.n	80047a6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2201      	movs	r2, #1
 800478e:	2100      	movs	r1, #0
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fd85 	bl	80052a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2201      	movs	r2, #1
 800479c:	2104      	movs	r1, #4
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fd7e 	bl	80052a0 <TIM_CCxChannelCmd>
      break;
 80047a4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0201 	orr.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d122      	bne.n	800481c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d11b      	bne.n	800481c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0202 	mvn.w	r2, #2
 80047ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fa1a 	bl	8004c3c <HAL_TIM_IC_CaptureCallback>
 8004808:	e005      	b.n	8004816 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fa0c 	bl	8004c28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fa1d 	bl	8004c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b04      	cmp	r3, #4
 8004828:	d122      	bne.n	8004870 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b04      	cmp	r3, #4
 8004836:	d11b      	bne.n	8004870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0204 	mvn.w	r2, #4
 8004840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2202      	movs	r2, #2
 8004846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f9f0 	bl	8004c3c <HAL_TIM_IC_CaptureCallback>
 800485c:	e005      	b.n	800486a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f9e2 	bl	8004c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f9f3 	bl	8004c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b08      	cmp	r3, #8
 800487c:	d122      	bne.n	80048c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b08      	cmp	r3, #8
 800488a:	d11b      	bne.n	80048c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0208 	mvn.w	r2, #8
 8004894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2204      	movs	r2, #4
 800489a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f9c6 	bl	8004c3c <HAL_TIM_IC_CaptureCallback>
 80048b0:	e005      	b.n	80048be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f9b8 	bl	8004c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f9c9 	bl	8004c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	2b10      	cmp	r3, #16
 80048d0:	d122      	bne.n	8004918 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d11b      	bne.n	8004918 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f06f 0210 	mvn.w	r2, #16
 80048e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2208      	movs	r2, #8
 80048ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f99c 	bl	8004c3c <HAL_TIM_IC_CaptureCallback>
 8004904:	e005      	b.n	8004912 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f98e 	bl	8004c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f99f 	bl	8004c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b01      	cmp	r3, #1
 8004924:	d10e      	bne.n	8004944 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b01      	cmp	r3, #1
 8004932:	d107      	bne.n	8004944 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0201 	mvn.w	r2, #1
 800493c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fc fe72 	bl	8001628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b80      	cmp	r3, #128	; 0x80
 8004950:	d10e      	bne.n	8004970 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495c:	2b80      	cmp	r3, #128	; 0x80
 800495e:	d107      	bne.n	8004970 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fe44 	bl	80055f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800497e:	d10e      	bne.n	800499e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498a:	2b80      	cmp	r3, #128	; 0x80
 800498c:	d107      	bne.n	800499e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 fe37 	bl	800560c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a8:	2b40      	cmp	r3, #64	; 0x40
 80049aa:	d10e      	bne.n	80049ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b6:	2b40      	cmp	r3, #64	; 0x40
 80049b8:	d107      	bne.n	80049ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f94d 	bl	8004c64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	d10e      	bne.n	80049f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d107      	bne.n	80049f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f06f 0220 	mvn.w	r2, #32
 80049ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fdf7 	bl	80055e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e0ff      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b14      	cmp	r3, #20
 8004a2a:	f200 80f0 	bhi.w	8004c0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a2e:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a34:	08004a89 	.word	0x08004a89
 8004a38:	08004c0f 	.word	0x08004c0f
 8004a3c:	08004c0f 	.word	0x08004c0f
 8004a40:	08004c0f 	.word	0x08004c0f
 8004a44:	08004ac9 	.word	0x08004ac9
 8004a48:	08004c0f 	.word	0x08004c0f
 8004a4c:	08004c0f 	.word	0x08004c0f
 8004a50:	08004c0f 	.word	0x08004c0f
 8004a54:	08004b0b 	.word	0x08004b0b
 8004a58:	08004c0f 	.word	0x08004c0f
 8004a5c:	08004c0f 	.word	0x08004c0f
 8004a60:	08004c0f 	.word	0x08004c0f
 8004a64:	08004b4b 	.word	0x08004b4b
 8004a68:	08004c0f 	.word	0x08004c0f
 8004a6c:	08004c0f 	.word	0x08004c0f
 8004a70:	08004c0f 	.word	0x08004c0f
 8004a74:	08004b8d 	.word	0x08004b8d
 8004a78:	08004c0f 	.word	0x08004c0f
 8004a7c:	08004c0f 	.word	0x08004c0f
 8004a80:	08004c0f 	.word	0x08004c0f
 8004a84:	08004bcd 	.word	0x08004bcd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 f960 	bl	8004d54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0208 	orr.w	r2, r2, #8
 8004aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0204 	bic.w	r2, r2, #4
 8004ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6999      	ldr	r1, [r3, #24]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	619a      	str	r2, [r3, #24]
      break;
 8004ac6:	e0a5      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 f9c6 	bl	8004e60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699a      	ldr	r2, [r3, #24]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6999      	ldr	r1, [r3, #24]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	021a      	lsls	r2, r3, #8
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	619a      	str	r2, [r3, #24]
      break;
 8004b08:	e084      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fa25 	bl	8004f60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0208 	orr.w	r2, r2, #8
 8004b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69da      	ldr	r2, [r3, #28]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0204 	bic.w	r2, r2, #4
 8004b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69d9      	ldr	r1, [r3, #28]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	61da      	str	r2, [r3, #28]
      break;
 8004b48:	e064      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fa83 	bl	800505c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69d9      	ldr	r1, [r3, #28]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	021a      	lsls	r2, r3, #8
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	61da      	str	r2, [r3, #28]
      break;
 8004b8a:	e043      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fac6 	bl	8005124 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0208 	orr.w	r2, r2, #8
 8004ba6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0204 	bic.w	r2, r2, #4
 8004bb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bca:	e023      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fb04 	bl	80051e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	021a      	lsls	r2, r3, #8
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c0c:	e002      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	75fb      	strb	r3, [r7, #23]
      break;
 8004c12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop

08004c28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a2e      	ldr	r2, [pc, #184]	; (8004d44 <TIM_Base_SetConfig+0xcc>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d003      	beq.n	8004c98 <TIM_Base_SetConfig+0x20>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c96:	d108      	bne.n	8004caa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a25      	ldr	r2, [pc, #148]	; (8004d44 <TIM_Base_SetConfig+0xcc>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00f      	beq.n	8004cd2 <TIM_Base_SetConfig+0x5a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb8:	d00b      	beq.n	8004cd2 <TIM_Base_SetConfig+0x5a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a22      	ldr	r2, [pc, #136]	; (8004d48 <TIM_Base_SetConfig+0xd0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d007      	beq.n	8004cd2 <TIM_Base_SetConfig+0x5a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a21      	ldr	r2, [pc, #132]	; (8004d4c <TIM_Base_SetConfig+0xd4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <TIM_Base_SetConfig+0x5a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a20      	ldr	r2, [pc, #128]	; (8004d50 <TIM_Base_SetConfig+0xd8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d108      	bne.n	8004ce4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a0e      	ldr	r2, [pc, #56]	; (8004d44 <TIM_Base_SetConfig+0xcc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00b      	beq.n	8004d28 <TIM_Base_SetConfig+0xb0>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a0d      	ldr	r2, [pc, #52]	; (8004d48 <TIM_Base_SetConfig+0xd0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d007      	beq.n	8004d28 <TIM_Base_SetConfig+0xb0>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a0c      	ldr	r2, [pc, #48]	; (8004d4c <TIM_Base_SetConfig+0xd4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d003      	beq.n	8004d28 <TIM_Base_SetConfig+0xb0>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a0b      	ldr	r2, [pc, #44]	; (8004d50 <TIM_Base_SetConfig+0xd8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d103      	bne.n	8004d30 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	615a      	str	r2, [r3, #20]
}
 8004d36:	bf00      	nop
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40012c00 	.word	0x40012c00
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40014400 	.word	0x40014400
 8004d50:	40014800 	.word	0x40014800

08004d54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	f023 0201 	bic.w	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0303 	bic.w	r3, r3, #3
 8004d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f023 0302 	bic.w	r3, r3, #2
 8004da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a28      	ldr	r2, [pc, #160]	; (8004e50 <TIM_OC1_SetConfig+0xfc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <TIM_OC1_SetConfig+0x78>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a27      	ldr	r2, [pc, #156]	; (8004e54 <TIM_OC1_SetConfig+0x100>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d007      	beq.n	8004dcc <TIM_OC1_SetConfig+0x78>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a26      	ldr	r2, [pc, #152]	; (8004e58 <TIM_OC1_SetConfig+0x104>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_OC1_SetConfig+0x78>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a25      	ldr	r2, [pc, #148]	; (8004e5c <TIM_OC1_SetConfig+0x108>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d10c      	bne.n	8004de6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f023 0308 	bic.w	r3, r3, #8
 8004dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f023 0304 	bic.w	r3, r3, #4
 8004de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a19      	ldr	r2, [pc, #100]	; (8004e50 <TIM_OC1_SetConfig+0xfc>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00b      	beq.n	8004e06 <TIM_OC1_SetConfig+0xb2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <TIM_OC1_SetConfig+0x100>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d007      	beq.n	8004e06 <TIM_OC1_SetConfig+0xb2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a17      	ldr	r2, [pc, #92]	; (8004e58 <TIM_OC1_SetConfig+0x104>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d003      	beq.n	8004e06 <TIM_OC1_SetConfig+0xb2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a16      	ldr	r2, [pc, #88]	; (8004e5c <TIM_OC1_SetConfig+0x108>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d111      	bne.n	8004e2a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	621a      	str	r2, [r3, #32]
}
 8004e44:	bf00      	nop
 8004e46:	371c      	adds	r7, #28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	40012c00 	.word	0x40012c00
 8004e54:	40014000 	.word	0x40014000
 8004e58:	40014400 	.word	0x40014400
 8004e5c:	40014800 	.word	0x40014800

08004e60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	f023 0210 	bic.w	r2, r3, #16
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	021b      	lsls	r3, r3, #8
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f023 0320 	bic.w	r3, r3, #32
 8004eae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a24      	ldr	r2, [pc, #144]	; (8004f50 <TIM_OC2_SetConfig+0xf0>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d10d      	bne.n	8004ee0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ede:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a1b      	ldr	r2, [pc, #108]	; (8004f50 <TIM_OC2_SetConfig+0xf0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00b      	beq.n	8004f00 <TIM_OC2_SetConfig+0xa0>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a1a      	ldr	r2, [pc, #104]	; (8004f54 <TIM_OC2_SetConfig+0xf4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d007      	beq.n	8004f00 <TIM_OC2_SetConfig+0xa0>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a19      	ldr	r2, [pc, #100]	; (8004f58 <TIM_OC2_SetConfig+0xf8>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d003      	beq.n	8004f00 <TIM_OC2_SetConfig+0xa0>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a18      	ldr	r2, [pc, #96]	; (8004f5c <TIM_OC2_SetConfig+0xfc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d113      	bne.n	8004f28 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f06:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f0e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	621a      	str	r2, [r3, #32]
}
 8004f42:	bf00      	nop
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40012c00 	.word	0x40012c00
 8004f54:	40014000 	.word	0x40014000
 8004f58:	40014400 	.word	0x40014400
 8004f5c:	40014800 	.word	0x40014800

08004f60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0303 	bic.w	r3, r3, #3
 8004f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	021b      	lsls	r3, r3, #8
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a23      	ldr	r2, [pc, #140]	; (800504c <TIM_OC3_SetConfig+0xec>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d10d      	bne.n	8004fde <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fdc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a1a      	ldr	r2, [pc, #104]	; (800504c <TIM_OC3_SetConfig+0xec>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00b      	beq.n	8004ffe <TIM_OC3_SetConfig+0x9e>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a19      	ldr	r2, [pc, #100]	; (8005050 <TIM_OC3_SetConfig+0xf0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d007      	beq.n	8004ffe <TIM_OC3_SetConfig+0x9e>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a18      	ldr	r2, [pc, #96]	; (8005054 <TIM_OC3_SetConfig+0xf4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d003      	beq.n	8004ffe <TIM_OC3_SetConfig+0x9e>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a17      	ldr	r2, [pc, #92]	; (8005058 <TIM_OC3_SetConfig+0xf8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d113      	bne.n	8005026 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800500c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	621a      	str	r2, [r3, #32]
}
 8005040:	bf00      	nop
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	40012c00 	.word	0x40012c00
 8005050:	40014000 	.word	0x40014000
 8005054:	40014400 	.word	0x40014400
 8005058:	40014800 	.word	0x40014800

0800505c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800508a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	031b      	lsls	r3, r3, #12
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a16      	ldr	r2, [pc, #88]	; (8005114 <TIM_OC4_SetConfig+0xb8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00b      	beq.n	80050d8 <TIM_OC4_SetConfig+0x7c>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a15      	ldr	r2, [pc, #84]	; (8005118 <TIM_OC4_SetConfig+0xbc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d007      	beq.n	80050d8 <TIM_OC4_SetConfig+0x7c>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a14      	ldr	r2, [pc, #80]	; (800511c <TIM_OC4_SetConfig+0xc0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d003      	beq.n	80050d8 <TIM_OC4_SetConfig+0x7c>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a13      	ldr	r2, [pc, #76]	; (8005120 <TIM_OC4_SetConfig+0xc4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d109      	bne.n	80050ec <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	019b      	lsls	r3, r3, #6
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	621a      	str	r2, [r3, #32]
}
 8005106:	bf00      	nop
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40012c00 	.word	0x40012c00
 8005118:	40014000 	.word	0x40014000
 800511c:	40014400 	.word	0x40014400
 8005120:	40014800 	.word	0x40014800

08005124 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005168:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	041b      	lsls	r3, r3, #16
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a15      	ldr	r2, [pc, #84]	; (80051d0 <TIM_OC5_SetConfig+0xac>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00b      	beq.n	8005196 <TIM_OC5_SetConfig+0x72>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <TIM_OC5_SetConfig+0xb0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d007      	beq.n	8005196 <TIM_OC5_SetConfig+0x72>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a13      	ldr	r2, [pc, #76]	; (80051d8 <TIM_OC5_SetConfig+0xb4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d003      	beq.n	8005196 <TIM_OC5_SetConfig+0x72>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a12      	ldr	r2, [pc, #72]	; (80051dc <TIM_OC5_SetConfig+0xb8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d109      	bne.n	80051aa <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	021b      	lsls	r3, r3, #8
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	621a      	str	r2, [r3, #32]
}
 80051c4:	bf00      	nop
 80051c6:	371c      	adds	r7, #28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	40012c00 	.word	0x40012c00
 80051d4:	40014000 	.word	0x40014000
 80051d8:	40014400 	.word	0x40014400
 80051dc:	40014800 	.word	0x40014800

080051e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800520e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	051b      	lsls	r3, r3, #20
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a16      	ldr	r2, [pc, #88]	; (8005290 <TIM_OC6_SetConfig+0xb0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d00b      	beq.n	8005254 <TIM_OC6_SetConfig+0x74>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a15      	ldr	r2, [pc, #84]	; (8005294 <TIM_OC6_SetConfig+0xb4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d007      	beq.n	8005254 <TIM_OC6_SetConfig+0x74>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a14      	ldr	r2, [pc, #80]	; (8005298 <TIM_OC6_SetConfig+0xb8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d003      	beq.n	8005254 <TIM_OC6_SetConfig+0x74>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a13      	ldr	r2, [pc, #76]	; (800529c <TIM_OC6_SetConfig+0xbc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d109      	bne.n	8005268 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800525a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	029b      	lsls	r3, r3, #10
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	621a      	str	r2, [r3, #32]
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40012c00 	.word	0x40012c00
 8005294:	40014000 	.word	0x40014000
 8005298:	40014400 	.word	0x40014400
 800529c:	40014800 	.word	0x40014800

080052a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 031f 	and.w	r3, r3, #31
 80052b2:	2201      	movs	r2, #1
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1a      	ldr	r2, [r3, #32]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	43db      	mvns	r3, r3
 80052c2:	401a      	ands	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1a      	ldr	r2, [r3, #32]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f003 031f 	and.w	r3, r3, #31
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	fa01 f303 	lsl.w	r3, r1, r3
 80052d8:	431a      	orrs	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	621a      	str	r2, [r3, #32]
}
 80052de:	bf00      	nop
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d109      	bne.n	8005310 <HAL_TIMEx_PWMN_Start+0x24>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b01      	cmp	r3, #1
 8005306:	bf14      	ite	ne
 8005308:	2301      	movne	r3, #1
 800530a:	2300      	moveq	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	e022      	b.n	8005356 <HAL_TIMEx_PWMN_Start+0x6a>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b04      	cmp	r3, #4
 8005314:	d109      	bne.n	800532a <HAL_TIMEx_PWMN_Start+0x3e>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b01      	cmp	r3, #1
 8005320:	bf14      	ite	ne
 8005322:	2301      	movne	r3, #1
 8005324:	2300      	moveq	r3, #0
 8005326:	b2db      	uxtb	r3, r3
 8005328:	e015      	b.n	8005356 <HAL_TIMEx_PWMN_Start+0x6a>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b08      	cmp	r3, #8
 800532e:	d109      	bne.n	8005344 <HAL_TIMEx_PWMN_Start+0x58>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	bf14      	ite	ne
 800533c:	2301      	movne	r3, #1
 800533e:	2300      	moveq	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	e008      	b.n	8005356 <HAL_TIMEx_PWMN_Start+0x6a>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b01      	cmp	r3, #1
 800534e:	bf14      	ite	ne
 8005350:	2301      	movne	r3, #1
 8005352:	2300      	moveq	r3, #0
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e05a      	b.n	8005414 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d104      	bne.n	800536e <HAL_TIMEx_PWMN_Start+0x82>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800536c:	e013      	b.n	8005396 <HAL_TIMEx_PWMN_Start+0xaa>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b04      	cmp	r3, #4
 8005372:	d104      	bne.n	800537e <HAL_TIMEx_PWMN_Start+0x92>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800537c:	e00b      	b.n	8005396 <HAL_TIMEx_PWMN_Start+0xaa>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b08      	cmp	r3, #8
 8005382:	d104      	bne.n	800538e <HAL_TIMEx_PWMN_Start+0xa2>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800538c:	e003      	b.n	8005396 <HAL_TIMEx_PWMN_Start+0xaa>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2202      	movs	r2, #2
 8005392:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2204      	movs	r2, #4
 800539c:	6839      	ldr	r1, [r7, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 f93e 	bl	8005620 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a18      	ldr	r2, [pc, #96]	; (800541c <HAL_TIMEx_PWMN_Start+0x130>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d009      	beq.n	80053d2 <HAL_TIMEx_PWMN_Start+0xe6>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c6:	d004      	beq.n	80053d2 <HAL_TIMEx_PWMN_Start+0xe6>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a14      	ldr	r2, [pc, #80]	; (8005420 <HAL_TIMEx_PWMN_Start+0x134>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d115      	bne.n	80053fe <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	4b12      	ldr	r3, [pc, #72]	; (8005424 <HAL_TIMEx_PWMN_Start+0x138>)
 80053da:	4013      	ands	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b06      	cmp	r3, #6
 80053e2:	d015      	beq.n	8005410 <HAL_TIMEx_PWMN_Start+0x124>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ea:	d011      	beq.n	8005410 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053fc:	e008      	b.n	8005410 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 0201 	orr.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	e000      	b.n	8005412 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005410:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40012c00 	.word	0x40012c00
 8005420:	40014000 	.word	0x40014000
 8005424:	00010007 	.word	0x00010007

08005428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800543c:	2302      	movs	r3, #2
 800543e:	e04f      	b.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a21      	ldr	r2, [pc, #132]	; (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d108      	bne.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005470:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a14      	ldr	r2, [pc, #80]	; (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d009      	beq.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a8:	d004      	beq.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a10      	ldr	r2, [pc, #64]	; (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d10c      	bne.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	40012c00 	.word	0x40012c00
 80054f0:	40014000 	.word	0x40014000

080054f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800550c:	2302      	movs	r3, #2
 800550e:	e060      	b.n	80055d2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	041b      	lsls	r3, r3, #16
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a14      	ldr	r2, [pc, #80]	; (80055e0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d115      	bne.n	80055c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	051b      	lsls	r3, r3, #20
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40012c00 	.word	0x40012c00

080055e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f003 031f 	and.w	r3, r3, #31
 8005632:	2204      	movs	r2, #4
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a1a      	ldr	r2, [r3, #32]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	43db      	mvns	r3, r3
 8005642:	401a      	ands	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a1a      	ldr	r2, [r3, #32]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f003 031f 	and.w	r3, r3, #31
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	fa01 f303 	lsl.w	r3, r1, r3
 8005658:	431a      	orrs	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b082      	sub	sp, #8
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e040      	b.n	80056fe <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d106      	bne.n	8005692 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7fc fa1d 	bl	8001acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2224      	movs	r2, #36	; 0x24
 8005696:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0201 	bic.w	r2, r2, #1
 80056a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fd23 	bl	80060f4 <UART_SetConfig>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e022      	b.n	80056fe <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fe4d 	bl	8006360 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f042 0201 	orr.w	r2, r2, #1
 80056f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fed4 	bl	80064a4 <UART_CheckIdleState>
 80056fc:	4603      	mov	r3, r0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b08a      	sub	sp, #40	; 0x28
 800570a:	af02      	add	r7, sp, #8
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	603b      	str	r3, [r7, #0]
 8005712:	4613      	mov	r3, r2
 8005714:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800571a:	2b20      	cmp	r3, #32
 800571c:	d178      	bne.n	8005810 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <HAL_UART_Transmit+0x24>
 8005724:	88fb      	ldrh	r3, [r7, #6]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e071      	b.n	8005812 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2221      	movs	r2, #33	; 0x21
 800573a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800573c:	f7fc fbe0 	bl	8001f00 <HAL_GetTick>
 8005740:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	88fa      	ldrh	r2, [r7, #6]
 8005746:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	88fa      	ldrh	r2, [r7, #6]
 800574e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800575a:	d108      	bne.n	800576e <HAL_UART_Transmit+0x68>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d104      	bne.n	800576e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005764:	2300      	movs	r3, #0
 8005766:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	61bb      	str	r3, [r7, #24]
 800576c:	e003      	b.n	8005776 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005772:	2300      	movs	r3, #0
 8005774:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005776:	e030      	b.n	80057da <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	2200      	movs	r2, #0
 8005780:	2180      	movs	r1, #128	; 0x80
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 ff36 	bl	80065f4 <UART_WaitOnFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d004      	beq.n	8005798 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2220      	movs	r2, #32
 8005792:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e03c      	b.n	8005812 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10b      	bne.n	80057b6 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	881a      	ldrh	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057aa:	b292      	uxth	r2, r2
 80057ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	3302      	adds	r3, #2
 80057b2:	61bb      	str	r3, [r7, #24]
 80057b4:	e008      	b.n	80057c8 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	781a      	ldrb	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	b292      	uxth	r2, r2
 80057c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	3301      	adds	r3, #1
 80057c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1c8      	bne.n	8005778 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2200      	movs	r2, #0
 80057ee:	2140      	movs	r1, #64	; 0x40
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 feff 	bl	80065f4 <UART_WaitOnFlagUntilTimeout>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d004      	beq.n	8005806 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2220      	movs	r2, #32
 8005800:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e005      	b.n	8005812 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2220      	movs	r2, #32
 800580a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	e000      	b.n	8005812 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005810:	2302      	movs	r3, #2
  }
}
 8005812:	4618      	mov	r0, r3
 8005814:	3720      	adds	r7, #32
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08a      	sub	sp, #40	; 0x28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	4613      	mov	r3, r2
 8005828:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800582e:	2b20      	cmp	r3, #32
 8005830:	d165      	bne.n	80058fe <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <HAL_UART_Transmit_DMA+0x22>
 8005838:	88fb      	ldrh	r3, [r7, #6]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e05e      	b.n	8005900 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	88fa      	ldrh	r2, [r7, #6]
 800584c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	88fa      	ldrh	r2, [r7, #6]
 8005854:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2221      	movs	r2, #33	; 0x21
 8005864:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586a:	2b00      	cmp	r3, #0
 800586c:	d027      	beq.n	80058be <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005872:	4a25      	ldr	r2, [pc, #148]	; (8005908 <HAL_UART_Transmit_DMA+0xec>)
 8005874:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587a:	4a24      	ldr	r2, [pc, #144]	; (800590c <HAL_UART_Transmit_DMA+0xf0>)
 800587c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005882:	4a23      	ldr	r2, [pc, #140]	; (8005910 <HAL_UART_Transmit_DMA+0xf4>)
 8005884:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588a:	2200      	movs	r2, #0
 800588c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005896:	4619      	mov	r1, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3328      	adds	r3, #40	; 0x28
 800589e:	461a      	mov	r2, r3
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	f7fc fc91 	bl	80021c8 <HAL_DMA_Start_IT>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2210      	movs	r2, #16
 80058b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e020      	b.n	8005900 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2240      	movs	r2, #64	; 0x40
 80058c4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3308      	adds	r3, #8
 80058cc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	e853 3f00 	ldrex	r3, [r3]
 80058d4:	613b      	str	r3, [r7, #16]
   return(result);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3308      	adds	r3, #8
 80058e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e6:	623a      	str	r2, [r7, #32]
 80058e8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ea:	69f9      	ldr	r1, [r7, #28]
 80058ec:	6a3a      	ldr	r2, [r7, #32]
 80058ee:	e841 2300 	strex	r3, r2, [r1]
 80058f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1e5      	bne.n	80058c6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	e000      	b.n	8005900 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80058fe:	2302      	movs	r3, #2
  }
}
 8005900:	4618      	mov	r0, r3
 8005902:	3728      	adds	r7, #40	; 0x28
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	08006919 	.word	0x08006919
 800590c:	080069ad 	.word	0x080069ad
 8005910:	08006b2d 	.word	0x08006b2d

08005914 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08a      	sub	sp, #40	; 0x28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	4613      	mov	r3, r2
 8005920:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005928:	2b20      	cmp	r3, #32
 800592a:	d132      	bne.n	8005992 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <HAL_UART_Receive_DMA+0x24>
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e02b      	b.n	8005994 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d018      	beq.n	8005982 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	613b      	str	r3, [r7, #16]
   return(result);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	623b      	str	r3, [r7, #32]
 8005970:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	69f9      	ldr	r1, [r7, #28]
 8005974:	6a3a      	ldr	r2, [r7, #32]
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	61bb      	str	r3, [r7, #24]
   return(result);
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e6      	bne.n	8005950 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	461a      	mov	r2, r3
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 fe9b 	bl	80066c4 <UART_Start_Receive_DMA>
 800598e:	4603      	mov	r3, r0
 8005990:	e000      	b.n	8005994 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005992:	2302      	movs	r3, #2
  }
}
 8005994:	4618      	mov	r0, r3
 8005996:	3728      	adds	r7, #40	; 0x28
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b090      	sub	sp, #64	; 0x40
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059b0:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059bc:	2b80      	cmp	r3, #128	; 0x80
 80059be:	d139      	bne.n	8005a34 <HAL_UART_DMAStop+0x98>
 80059c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c2:	2b21      	cmp	r3, #33	; 0x21
 80059c4:	d136      	bne.n	8005a34 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3308      	adds	r3, #8
 80059cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	e853 3f00 	ldrex	r3, [r3]
 80059d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059dc:	637b      	str	r3, [r7, #52]	; 0x34
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3308      	adds	r3, #8
 80059e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059ee:	e841 2300 	strex	r3, r2, [r1]
 80059f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1e5      	bne.n	80059c6 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d015      	beq.n	8005a2e <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fc fc3d 	bl	8002286 <HAL_DMA_Abort>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00d      	beq.n	8005a2e <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fc fd4f 	bl	80024ba <HAL_DMA_GetError>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b20      	cmp	r3, #32
 8005a20:	d105      	bne.n	8005a2e <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2210      	movs	r2, #16
 8005a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e044      	b.n	8005ab8 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fee8 	bl	8006804 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3e:	2b40      	cmp	r3, #64	; 0x40
 8005a40:	d139      	bne.n	8005ab6 <HAL_UART_DMAStop+0x11a>
 8005a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a44:	2b22      	cmp	r3, #34	; 0x22
 8005a46:	d136      	bne.n	8005ab6 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3308      	adds	r3, #8
 8005a4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	e853 3f00 	ldrex	r3, [r3]
 8005a56:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a5e:	633b      	str	r3, [r7, #48]	; 0x30
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3308      	adds	r3, #8
 8005a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a68:	61ba      	str	r2, [r7, #24]
 8005a6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6c:	6979      	ldr	r1, [r7, #20]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	e841 2300 	strex	r3, r2, [r1]
 8005a74:	613b      	str	r3, [r7, #16]
   return(result);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e5      	bne.n	8005a48 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d015      	beq.n	8005ab0 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fc fbfc 	bl	8002286 <HAL_DMA_Abort>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00d      	beq.n	8005ab0 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fc fd0e 	bl	80024ba <HAL_DMA_GetError>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b20      	cmp	r3, #32
 8005aa2:	d105      	bne.n	8005ab0 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2210      	movs	r2, #16
 8005aa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e003      	b.n	8005ab8 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fecd 	bl	8006850 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3740      	adds	r7, #64	; 0x40
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b0ba      	sub	sp, #232	; 0xe8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ae6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005aea:	f640 030f 	movw	r3, #2063	; 0x80f
 8005aee:	4013      	ands	r3, r2
 8005af0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005af4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d115      	bne.n	8005b28 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b00:	f003 0320 	and.w	r3, r3, #32
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00f      	beq.n	8005b28 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b0c:	f003 0320 	and.w	r3, r3, #32
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d009      	beq.n	8005b28 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 82ab 	beq.w	8006074 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	4798      	blx	r3
      }
      return;
 8005b26:	e2a5      	b.n	8006074 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 8117 	beq.w	8005d60 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005b3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b42:	4b85      	ldr	r3, [pc, #532]	; (8005d58 <HAL_UART_IRQHandler+0x298>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 810a 	beq.w	8005d60 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d011      	beq.n	8005b7c <HAL_UART_IRQHandler+0xbc>
 8005b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00b      	beq.n	8005b7c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b72:	f043 0201 	orr.w	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d011      	beq.n	8005bac <HAL_UART_IRQHandler+0xec>
 8005b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00b      	beq.n	8005bac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ba2:	f043 0204 	orr.w	r2, r3, #4
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d011      	beq.n	8005bdc <HAL_UART_IRQHandler+0x11c>
 8005bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00b      	beq.n	8005bdc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2204      	movs	r2, #4
 8005bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bd2:	f043 0202 	orr.w	r2, r3, #2
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d017      	beq.n	8005c18 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bec:	f003 0320 	and.w	r3, r3, #32
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d105      	bne.n	8005c00 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bf8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00b      	beq.n	8005c18 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2208      	movs	r2, #8
 8005c06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c0e:	f043 0208 	orr.w	r2, r3, #8
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d012      	beq.n	8005c4a <HAL_UART_IRQHandler+0x18a>
 8005c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00c      	beq.n	8005c4a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c40:	f043 0220 	orr.w	r2, r3, #32
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 8211 	beq.w	8006078 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00d      	beq.n	8005c7e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d007      	beq.n	8005c7e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c92:	2b40      	cmp	r3, #64	; 0x40
 8005c94:	d005      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d04f      	beq.n	8005d42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fdd4 	bl	8006850 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb2:	2b40      	cmp	r3, #64	; 0x40
 8005cb4:	d141      	bne.n	8005d3a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3308      	adds	r3, #8
 8005cbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ccc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3308      	adds	r3, #8
 8005cde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ce2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ce6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1d9      	bne.n	8005cb6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d013      	beq.n	8005d32 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d0e:	4a13      	ldr	r2, [pc, #76]	; (8005d5c <HAL_UART_IRQHandler+0x29c>)
 8005d10:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fc faee 	bl	80022f8 <HAL_DMA_Abort_IT>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d017      	beq.n	8005d52 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d30:	e00f      	b.n	8005d52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f9c8 	bl	80060c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d38:	e00b      	b.n	8005d52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f9c4 	bl	80060c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d40:	e007      	b.n	8005d52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f9c0 	bl	80060c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005d50:	e192      	b.n	8006078 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d52:	bf00      	nop
    return;
 8005d54:	e190      	b.n	8006078 <HAL_UART_IRQHandler+0x5b8>
 8005d56:	bf00      	nop
 8005d58:	04000120 	.word	0x04000120
 8005d5c:	08006bab 	.word	0x08006bab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	f040 814b 	bne.w	8006000 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d6e:	f003 0310 	and.w	r3, r3, #16
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 8144 	beq.w	8006000 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d7c:	f003 0310 	and.w	r3, r3, #16
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 813d 	beq.w	8006000 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2210      	movs	r2, #16
 8005d8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d98:	2b40      	cmp	r3, #64	; 0x40
 8005d9a:	f040 80b5 	bne.w	8005f08 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005daa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 8164 	beq.w	800607c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005dba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	f080 815c 	bcs.w	800607c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	f000 8086 	beq.w	8005ee6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005dee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005df2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e08:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e10:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e14:	e841 2300 	strex	r3, r2, [r1]
 8005e18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1da      	bne.n	8005dda <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3308      	adds	r3, #8
 8005e2a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e2e:	e853 3f00 	ldrex	r3, [r3]
 8005e32:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e36:	f023 0301 	bic.w	r3, r3, #1
 8005e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3308      	adds	r3, #8
 8005e44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e48:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e4c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e54:	e841 2300 	strex	r3, r2, [r1]
 8005e58:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e1      	bne.n	8005e24 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3308      	adds	r3, #8
 8005e66:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3308      	adds	r3, #8
 8005e80:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e84:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e8c:	e841 2300 	strex	r3, r2, [r1]
 8005e90:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1e3      	bne.n	8005e60 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eae:	e853 3f00 	ldrex	r3, [r3]
 8005eb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb6:	f023 0310 	bic.w	r3, r3, #16
 8005eba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ec8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005eca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ecc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ece:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ed0:	e841 2300 	strex	r3, r2, [r1]
 8005ed4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1e4      	bne.n	8005ea6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fc f9d0 	bl	8002286 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	4619      	mov	r1, r3
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f8eb 	bl	80060dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f06:	e0b9      	b.n	800607c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 80ab 	beq.w	8006080 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005f2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 80a6 	beq.w	8006080 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	e853 3f00 	ldrex	r3, [r3]
 8005f40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
 8005f52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f56:	647b      	str	r3, [r7, #68]	; 0x44
 8005f58:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1e4      	bne.n	8005f34 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3308      	adds	r3, #8
 8005f70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	e853 3f00 	ldrex	r3, [r3]
 8005f78:	623b      	str	r3, [r7, #32]
   return(result);
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	f023 0301 	bic.w	r3, r3, #1
 8005f80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3308      	adds	r3, #8
 8005f8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f8e:	633a      	str	r2, [r7, #48]	; 0x30
 8005f90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e3      	bne.n	8005f6a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0310 	bic.w	r3, r3, #16
 8005fca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fd8:	61fb      	str	r3, [r7, #28]
 8005fda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	69b9      	ldr	r1, [r7, #24]
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	e841 2300 	strex	r3, r2, [r1]
 8005fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e4      	bne.n	8005fb6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ff2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f86f 	bl	80060dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ffe:	e03f      	b.n	8006080 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00e      	beq.n	800602a <HAL_UART_IRQHandler+0x56a>
 800600c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d008      	beq.n	800602a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006020:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fe01 	bl	8006c2a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006028:	e02d      	b.n	8006086 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800602a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800602e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00e      	beq.n	8006054 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800603a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603e:	2b00      	cmp	r3, #0
 8006040:	d008      	beq.n	8006054 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006046:	2b00      	cmp	r3, #0
 8006048:	d01c      	beq.n	8006084 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	4798      	blx	r3
    }
    return;
 8006052:	e017      	b.n	8006084 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d012      	beq.n	8006086 <HAL_UART_IRQHandler+0x5c6>
 8006060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00c      	beq.n	8006086 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fdb2 	bl	8006bd6 <UART_EndTransmit_IT>
    return;
 8006072:	e008      	b.n	8006086 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006074:	bf00      	nop
 8006076:	e006      	b.n	8006086 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006078:	bf00      	nop
 800607a:	e004      	b.n	8006086 <HAL_UART_IRQHandler+0x5c6>
      return;
 800607c:	bf00      	nop
 800607e:	e002      	b.n	8006086 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006080:	bf00      	nop
 8006082:	e000      	b.n	8006086 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006084:	bf00      	nop
  }

}
 8006086:	37e8      	adds	r7, #232	; 0xe8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689a      	ldr	r2, [r3, #8]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	4b8a      	ldr	r3, [pc, #552]	; (8006348 <UART_SetConfig+0x254>)
 8006120:	4013      	ands	r3, r2
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	6812      	ldr	r2, [r2, #0]
 8006126:	6979      	ldr	r1, [r7, #20]
 8006128:	430b      	orrs	r3, r1
 800612a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	430a      	orrs	r2, r1
 8006164:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a78      	ldr	r2, [pc, #480]	; (800634c <UART_SetConfig+0x258>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d120      	bne.n	80061b2 <UART_SetConfig+0xbe>
 8006170:	4b77      	ldr	r3, [pc, #476]	; (8006350 <UART_SetConfig+0x25c>)
 8006172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006174:	f003 0303 	and.w	r3, r3, #3
 8006178:	2b03      	cmp	r3, #3
 800617a:	d817      	bhi.n	80061ac <UART_SetConfig+0xb8>
 800617c:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <UART_SetConfig+0x90>)
 800617e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006182:	bf00      	nop
 8006184:	08006195 	.word	0x08006195
 8006188:	080061a1 	.word	0x080061a1
 800618c:	080061a7 	.word	0x080061a7
 8006190:	0800619b 	.word	0x0800619b
 8006194:	2300      	movs	r3, #0
 8006196:	77fb      	strb	r3, [r7, #31]
 8006198:	e01d      	b.n	80061d6 <UART_SetConfig+0xe2>
 800619a:	2302      	movs	r3, #2
 800619c:	77fb      	strb	r3, [r7, #31]
 800619e:	e01a      	b.n	80061d6 <UART_SetConfig+0xe2>
 80061a0:	2304      	movs	r3, #4
 80061a2:	77fb      	strb	r3, [r7, #31]
 80061a4:	e017      	b.n	80061d6 <UART_SetConfig+0xe2>
 80061a6:	2308      	movs	r3, #8
 80061a8:	77fb      	strb	r3, [r7, #31]
 80061aa:	e014      	b.n	80061d6 <UART_SetConfig+0xe2>
 80061ac:	2310      	movs	r3, #16
 80061ae:	77fb      	strb	r3, [r7, #31]
 80061b0:	e011      	b.n	80061d6 <UART_SetConfig+0xe2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a67      	ldr	r2, [pc, #412]	; (8006354 <UART_SetConfig+0x260>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d102      	bne.n	80061c2 <UART_SetConfig+0xce>
 80061bc:	2300      	movs	r3, #0
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	e009      	b.n	80061d6 <UART_SetConfig+0xe2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a64      	ldr	r2, [pc, #400]	; (8006358 <UART_SetConfig+0x264>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d102      	bne.n	80061d2 <UART_SetConfig+0xde>
 80061cc:	2300      	movs	r3, #0
 80061ce:	77fb      	strb	r3, [r7, #31]
 80061d0:	e001      	b.n	80061d6 <UART_SetConfig+0xe2>
 80061d2:	2310      	movs	r3, #16
 80061d4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061de:	d15a      	bne.n	8006296 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80061e0:	7ffb      	ldrb	r3, [r7, #31]
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	d827      	bhi.n	8006236 <UART_SetConfig+0x142>
 80061e6:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <UART_SetConfig+0xf8>)
 80061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ec:	08006211 	.word	0x08006211
 80061f0:	08006219 	.word	0x08006219
 80061f4:	08006221 	.word	0x08006221
 80061f8:	08006237 	.word	0x08006237
 80061fc:	08006227 	.word	0x08006227
 8006200:	08006237 	.word	0x08006237
 8006204:	08006237 	.word	0x08006237
 8006208:	08006237 	.word	0x08006237
 800620c:	0800622f 	.word	0x0800622f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006210:	f7fd fd68 	bl	8003ce4 <HAL_RCC_GetPCLK1Freq>
 8006214:	61b8      	str	r0, [r7, #24]
        break;
 8006216:	e013      	b.n	8006240 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006218:	f7fd fd86 	bl	8003d28 <HAL_RCC_GetPCLK2Freq>
 800621c:	61b8      	str	r0, [r7, #24]
        break;
 800621e:	e00f      	b.n	8006240 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006220:	4b4e      	ldr	r3, [pc, #312]	; (800635c <UART_SetConfig+0x268>)
 8006222:	61bb      	str	r3, [r7, #24]
        break;
 8006224:	e00c      	b.n	8006240 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006226:	f7fd fce7 	bl	8003bf8 <HAL_RCC_GetSysClockFreq>
 800622a:	61b8      	str	r0, [r7, #24]
        break;
 800622c:	e008      	b.n	8006240 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800622e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006232:	61bb      	str	r3, [r7, #24]
        break;
 8006234:	e004      	b.n	8006240 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	77bb      	strb	r3, [r7, #30]
        break;
 800623e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d074      	beq.n	8006330 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	005a      	lsls	r2, r3, #1
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	085b      	lsrs	r3, r3, #1
 8006250:	441a      	add	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	fbb2 f3f3 	udiv	r3, r2, r3
 800625a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	2b0f      	cmp	r3, #15
 8006260:	d916      	bls.n	8006290 <UART_SetConfig+0x19c>
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006268:	d212      	bcs.n	8006290 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	b29b      	uxth	r3, r3
 800626e:	f023 030f 	bic.w	r3, r3, #15
 8006272:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	085b      	lsrs	r3, r3, #1
 8006278:	b29b      	uxth	r3, r3
 800627a:	f003 0307 	and.w	r3, r3, #7
 800627e:	b29a      	uxth	r2, r3
 8006280:	89fb      	ldrh	r3, [r7, #14]
 8006282:	4313      	orrs	r3, r2
 8006284:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	89fa      	ldrh	r2, [r7, #14]
 800628c:	60da      	str	r2, [r3, #12]
 800628e:	e04f      	b.n	8006330 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	77bb      	strb	r3, [r7, #30]
 8006294:	e04c      	b.n	8006330 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006296:	7ffb      	ldrb	r3, [r7, #31]
 8006298:	2b08      	cmp	r3, #8
 800629a:	d828      	bhi.n	80062ee <UART_SetConfig+0x1fa>
 800629c:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <UART_SetConfig+0x1b0>)
 800629e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a2:	bf00      	nop
 80062a4:	080062c9 	.word	0x080062c9
 80062a8:	080062d1 	.word	0x080062d1
 80062ac:	080062d9 	.word	0x080062d9
 80062b0:	080062ef 	.word	0x080062ef
 80062b4:	080062df 	.word	0x080062df
 80062b8:	080062ef 	.word	0x080062ef
 80062bc:	080062ef 	.word	0x080062ef
 80062c0:	080062ef 	.word	0x080062ef
 80062c4:	080062e7 	.word	0x080062e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062c8:	f7fd fd0c 	bl	8003ce4 <HAL_RCC_GetPCLK1Freq>
 80062cc:	61b8      	str	r0, [r7, #24]
        break;
 80062ce:	e013      	b.n	80062f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062d0:	f7fd fd2a 	bl	8003d28 <HAL_RCC_GetPCLK2Freq>
 80062d4:	61b8      	str	r0, [r7, #24]
        break;
 80062d6:	e00f      	b.n	80062f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062d8:	4b20      	ldr	r3, [pc, #128]	; (800635c <UART_SetConfig+0x268>)
 80062da:	61bb      	str	r3, [r7, #24]
        break;
 80062dc:	e00c      	b.n	80062f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062de:	f7fd fc8b 	bl	8003bf8 <HAL_RCC_GetSysClockFreq>
 80062e2:	61b8      	str	r0, [r7, #24]
        break;
 80062e4:	e008      	b.n	80062f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ea:	61bb      	str	r3, [r7, #24]
        break;
 80062ec:	e004      	b.n	80062f8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	77bb      	strb	r3, [r7, #30]
        break;
 80062f6:	bf00      	nop
    }

    if (pclk != 0U)
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d018      	beq.n	8006330 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	085a      	lsrs	r2, r3, #1
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	441a      	add	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006310:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	2b0f      	cmp	r3, #15
 8006316:	d909      	bls.n	800632c <UART_SetConfig+0x238>
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800631e:	d205      	bcs.n	800632c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	b29a      	uxth	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	60da      	str	r2, [r3, #12]
 800632a:	e001      	b.n	8006330 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800633c:	7fbb      	ldrb	r3, [r7, #30]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3720      	adds	r7, #32
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	efff69f3 	.word	0xefff69f3
 800634c:	40013800 	.word	0x40013800
 8006350:	40021000 	.word	0x40021000
 8006354:	40004400 	.word	0x40004400
 8006358:	40004800 	.word	0x40004800
 800635c:	007a1200 	.word	0x007a1200

08006360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	f003 0308 	and.w	r3, r3, #8
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	f003 0310 	and.w	r3, r3, #16
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	f003 0320 	and.w	r3, r3, #32
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643c:	2b00      	cmp	r3, #0
 800643e:	d01a      	beq.n	8006476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800645e:	d10a      	bne.n	8006476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00a      	beq.n	8006498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	605a      	str	r2, [r3, #4]
  }
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b098      	sub	sp, #96	; 0x60
 80064a8:	af02      	add	r7, sp, #8
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064b4:	f7fb fd24 	bl	8001f00 <HAL_GetTick>
 80064b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0308 	and.w	r3, r3, #8
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d12e      	bne.n	8006526 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064d0:	2200      	movs	r2, #0
 80064d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f88c 	bl	80065f4 <UART_WaitOnFlagUntilTimeout>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d021      	beq.n	8006526 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ea:	e853 3f00 	ldrex	r3, [r3]
 80064ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064f6:	653b      	str	r3, [r7, #80]	; 0x50
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	461a      	mov	r2, r3
 80064fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006500:	647b      	str	r3, [r7, #68]	; 0x44
 8006502:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006504:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006508:	e841 2300 	strex	r3, r2, [r1]
 800650c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800650e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e6      	bne.n	80064e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2220      	movs	r2, #32
 8006518:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e062      	b.n	80065ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b04      	cmp	r3, #4
 8006532:	d149      	bne.n	80065c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800653c:	2200      	movs	r2, #0
 800653e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f856 	bl	80065f4 <UART_WaitOnFlagUntilTimeout>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d03c      	beq.n	80065c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	623b      	str	r3, [r7, #32]
   return(result);
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800656c:	633b      	str	r3, [r7, #48]	; 0x30
 800656e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e6      	bne.n	800654e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3308      	adds	r3, #8
 8006586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	e853 3f00 	ldrex	r3, [r3]
 800658e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0301 	bic.w	r3, r3, #1
 8006596:	64bb      	str	r3, [r7, #72]	; 0x48
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3308      	adds	r3, #8
 800659e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065a0:	61fa      	str	r2, [r7, #28]
 80065a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a4:	69b9      	ldr	r1, [r7, #24]
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	e841 2300 	strex	r3, r2, [r1]
 80065ac:	617b      	str	r3, [r7, #20]
   return(result);
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1e5      	bne.n	8006580 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e011      	b.n	80065ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3758      	adds	r7, #88	; 0x58
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	603b      	str	r3, [r7, #0]
 8006600:	4613      	mov	r3, r2
 8006602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006604:	e049      	b.n	800669a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660c:	d045      	beq.n	800669a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800660e:	f7fb fc77 	bl	8001f00 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	429a      	cmp	r2, r3
 800661c:	d302      	bcc.n	8006624 <UART_WaitOnFlagUntilTimeout+0x30>
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e048      	b.n	80066ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0304 	and.w	r3, r3, #4
 8006632:	2b00      	cmp	r3, #0
 8006634:	d031      	beq.n	800669a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	f003 0308 	and.w	r3, r3, #8
 8006640:	2b08      	cmp	r3, #8
 8006642:	d110      	bne.n	8006666 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2208      	movs	r2, #8
 800664a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f8ff 	bl	8006850 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2208      	movs	r2, #8
 8006656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e029      	b.n	80066ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006674:	d111      	bne.n	800669a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800667e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 f8e5 	bl	8006850 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2220      	movs	r2, #32
 800668a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e00f      	b.n	80066ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69da      	ldr	r2, [r3, #28]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	4013      	ands	r3, r2
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	bf0c      	ite	eq
 80066aa:	2301      	moveq	r3, #1
 80066ac:	2300      	movne	r3, #0
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	461a      	mov	r2, r3
 80066b2:	79fb      	ldrb	r3, [r7, #7]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d0a6      	beq.n	8006606 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b096      	sub	sp, #88	; 0x58
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	4613      	mov	r3, r2
 80066d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	88fa      	ldrh	r2, [r7, #6]
 80066dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2222      	movs	r2, #34	; 0x22
 80066ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d028      	beq.n	800674a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066fc:	4a3e      	ldr	r2, [pc, #248]	; (80067f8 <UART_Start_Receive_DMA+0x134>)
 80066fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006704:	4a3d      	ldr	r2, [pc, #244]	; (80067fc <UART_Start_Receive_DMA+0x138>)
 8006706:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800670c:	4a3c      	ldr	r2, [pc, #240]	; (8006800 <UART_Start_Receive_DMA+0x13c>)
 800670e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006714:	2200      	movs	r2, #0
 8006716:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3324      	adds	r3, #36	; 0x24
 8006722:	4619      	mov	r1, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006728:	461a      	mov	r2, r3
 800672a:	88fb      	ldrh	r3, [r7, #6]
 800672c:	f7fb fd4c 	bl	80021c8 <HAL_DMA_Start_IT>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d009      	beq.n	800674a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2210      	movs	r2, #16
 800673a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2220      	movs	r2, #32
 8006742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e051      	b.n	80067ee <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d018      	beq.n	8006784 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006766:	657b      	str	r3, [r7, #84]	; 0x54
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006770:	64bb      	str	r3, [r7, #72]	; 0x48
 8006772:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006776:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800677e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e6      	bne.n	8006752 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3308      	adds	r3, #8
 800678a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	f043 0301 	orr.w	r3, r3, #1
 800679a:	653b      	str	r3, [r7, #80]	; 0x50
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3308      	adds	r3, #8
 80067a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067a4:	637a      	str	r2, [r7, #52]	; 0x34
 80067a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067ac:	e841 2300 	strex	r3, r2, [r1]
 80067b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e5      	bne.n	8006784 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3308      	adds	r3, #8
 80067be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	e853 3f00 	ldrex	r3, [r3]
 80067c6:	613b      	str	r3, [r7, #16]
   return(result);
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3308      	adds	r3, #8
 80067d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067d8:	623a      	str	r2, [r7, #32]
 80067da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	69f9      	ldr	r1, [r7, #28]
 80067de:	6a3a      	ldr	r2, [r7, #32]
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e5      	bne.n	80067b8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3758      	adds	r7, #88	; 0x58
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	080069c9 	.word	0x080069c9
 80067fc:	08006aef 	.word	0x08006aef
 8006800:	08006b2d 	.word	0x08006b2d

08006804 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006804:	b480      	push	{r7}
 8006806:	b089      	sub	sp, #36	; 0x24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	60bb      	str	r3, [r7, #8]
   return(result);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006820:	61fb      	str	r3, [r7, #28]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	461a      	mov	r2, r3
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	61bb      	str	r3, [r7, #24]
 800682c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	6979      	ldr	r1, [r7, #20]
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	613b      	str	r3, [r7, #16]
   return(result);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e6      	bne.n	800680c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2220      	movs	r2, #32
 8006842:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006844:	bf00      	nop
 8006846:	3724      	adds	r7, #36	; 0x24
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006850:	b480      	push	{r7}
 8006852:	b095      	sub	sp, #84	; 0x54
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800686c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006876:	643b      	str	r3, [r7, #64]	; 0x40
 8006878:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800687c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e6      	bne.n	8006858 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3308      	adds	r3, #8
 8006890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	e853 3f00 	ldrex	r3, [r3]
 8006898:	61fb      	str	r3, [r7, #28]
   return(result);
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	f023 0301 	bic.w	r3, r3, #1
 80068a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3308      	adds	r3, #8
 80068a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e5      	bne.n	800688a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d118      	bne.n	80068f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f023 0310 	bic.w	r3, r3, #16
 80068da:	647b      	str	r3, [r7, #68]	; 0x44
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068e4:	61bb      	str	r3, [r7, #24]
 80068e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6979      	ldr	r1, [r7, #20]
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	613b      	str	r3, [r7, #16]
   return(result);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e6      	bne.n	80068c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800690c:	bf00      	nop
 800690e:	3754      	adds	r7, #84	; 0x54
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b090      	sub	sp, #64	; 0x40
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	2b20      	cmp	r3, #32
 800692c:	d037      	beq.n	800699e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800692e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006930:	2200      	movs	r2, #0
 8006932:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3308      	adds	r3, #8
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	623b      	str	r3, [r7, #32]
   return(result);
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800694c:	63bb      	str	r3, [r7, #56]	; 0x38
 800694e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3308      	adds	r3, #8
 8006954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006956:	633a      	str	r2, [r7, #48]	; 0x30
 8006958:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800695c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e5      	bne.n	8006936 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800696a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	60fb      	str	r3, [r7, #12]
   return(result);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800697e:	637b      	str	r3, [r7, #52]	; 0x34
 8006980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006988:	61fb      	str	r3, [r7, #28]
 800698a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	69b9      	ldr	r1, [r7, #24]
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	617b      	str	r3, [r7, #20]
   return(result);
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e6      	bne.n	800696a <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800699c:	e002      	b.n	80069a4 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800699e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80069a0:	f7fa fe0e 	bl	80015c0 <HAL_UART_TxCpltCallback>
}
 80069a4:	bf00      	nop
 80069a6:	3740      	adds	r7, #64	; 0x40
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f7ff fb66 	bl	800608c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069c0:	bf00      	nop
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b09c      	sub	sp, #112	; 0x70
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	2b20      	cmp	r3, #32
 80069dc:	d071      	beq.n	8006ac2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80069de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e0:	2200      	movs	r2, #0
 80069e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80069fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	461a      	mov	r2, r3
 8006a02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a04:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a06:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a0c:	e841 2300 	strex	r3, r2, [r1]
 8006a10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e6      	bne.n	80069e6 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a22:	e853 3f00 	ldrex	r3, [r3]
 8006a26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2a:	f023 0301 	bic.w	r3, r3, #1
 8006a2e:	667b      	str	r3, [r7, #100]	; 0x64
 8006a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3308      	adds	r3, #8
 8006a36:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006a38:	647a      	str	r2, [r7, #68]	; 0x44
 8006a3a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a40:	e841 2300 	strex	r3, r2, [r1]
 8006a44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1e5      	bne.n	8006a18 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3308      	adds	r3, #8
 8006a52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a62:	663b      	str	r3, [r7, #96]	; 0x60
 8006a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3308      	adds	r3, #8
 8006a6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a6c:	633a      	str	r2, [r7, #48]	; 0x30
 8006a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e5      	bne.n	8006a4c <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a82:	2220      	movs	r2, #32
 8006a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d118      	bne.n	8006ac2 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f023 0310 	bic.w	r3, r3, #16
 8006aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aae:	61fb      	str	r3, [r7, #28]
 8006ab0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	69b9      	ldr	r1, [r7, #24]
 8006ab4:	69fa      	ldr	r2, [r7, #28]
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	617b      	str	r3, [r7, #20]
   return(result);
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e6      	bne.n	8006a90 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d107      	bne.n	8006ae0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006ada:	f7ff faff 	bl	80060dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ade:	e002      	b.n	8006ae6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006ae0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006ae2:	f7ff fadd 	bl	80060a0 <HAL_UART_RxCpltCallback>
}
 8006ae6:	bf00      	nop
 8006ae8:	3770      	adds	r7, #112	; 0x70
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d109      	bne.n	8006b1e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b10:	085b      	lsrs	r3, r3, #1
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	4619      	mov	r1, r3
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f7ff fae0 	bl	80060dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b1c:	e002      	b.n	8006b24 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f7ff fac8 	bl	80060b4 <HAL_UART_RxHalfCpltCallback>
}
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b38:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b3e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b52:	2b80      	cmp	r3, #128	; 0x80
 8006b54:	d109      	bne.n	8006b6a <UART_DMAError+0x3e>
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2b21      	cmp	r3, #33	; 0x21
 8006b5a:	d106      	bne.n	8006b6a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006b64:	6978      	ldr	r0, [r7, #20]
 8006b66:	f7ff fe4d 	bl	8006804 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b74:	2b40      	cmp	r3, #64	; 0x40
 8006b76:	d109      	bne.n	8006b8c <UART_DMAError+0x60>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b22      	cmp	r3, #34	; 0x22
 8006b7c:	d106      	bne.n	8006b8c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006b86:	6978      	ldr	r0, [r7, #20]
 8006b88:	f7ff fe62 	bl	8006850 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b92:	f043 0210 	orr.w	r2, r3, #16
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b9c:	6978      	ldr	r0, [r7, #20]
 8006b9e:	f7ff fa93 	bl	80060c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ba2:	bf00      	nop
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f7ff fa7d 	bl	80060c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bce:	bf00      	nop
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b088      	sub	sp, #32
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bf2:	61fb      	str	r3, [r7, #28]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	61bb      	str	r3, [r7, #24]
 8006bfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	6979      	ldr	r1, [r7, #20]
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	e841 2300 	strex	r3, r2, [r1]
 8006c08:	613b      	str	r3, [r7, #16]
   return(result);
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e6      	bne.n	8006bde <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7fa fccf 	bl	80015c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c22:	bf00      	nop
 8006c24:	3720      	adds	r7, #32
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c32:	bf00      	nop
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
	...

08006c40 <__libc_init_array>:
 8006c40:	b570      	push	{r4, r5, r6, lr}
 8006c42:	4d0d      	ldr	r5, [pc, #52]	; (8006c78 <__libc_init_array+0x38>)
 8006c44:	4c0d      	ldr	r4, [pc, #52]	; (8006c7c <__libc_init_array+0x3c>)
 8006c46:	1b64      	subs	r4, r4, r5
 8006c48:	10a4      	asrs	r4, r4, #2
 8006c4a:	2600      	movs	r6, #0
 8006c4c:	42a6      	cmp	r6, r4
 8006c4e:	d109      	bne.n	8006c64 <__libc_init_array+0x24>
 8006c50:	4d0b      	ldr	r5, [pc, #44]	; (8006c80 <__libc_init_array+0x40>)
 8006c52:	4c0c      	ldr	r4, [pc, #48]	; (8006c84 <__libc_init_array+0x44>)
 8006c54:	f000 f820 	bl	8006c98 <_init>
 8006c58:	1b64      	subs	r4, r4, r5
 8006c5a:	10a4      	asrs	r4, r4, #2
 8006c5c:	2600      	movs	r6, #0
 8006c5e:	42a6      	cmp	r6, r4
 8006c60:	d105      	bne.n	8006c6e <__libc_init_array+0x2e>
 8006c62:	bd70      	pop	{r4, r5, r6, pc}
 8006c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c68:	4798      	blx	r3
 8006c6a:	3601      	adds	r6, #1
 8006c6c:	e7ee      	b.n	8006c4c <__libc_init_array+0xc>
 8006c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c72:	4798      	blx	r3
 8006c74:	3601      	adds	r6, #1
 8006c76:	e7f2      	b.n	8006c5e <__libc_init_array+0x1e>
 8006c78:	08006eec 	.word	0x08006eec
 8006c7c:	08006eec 	.word	0x08006eec
 8006c80:	08006eec 	.word	0x08006eec
 8006c84:	08006ef0 	.word	0x08006ef0

08006c88 <memset>:
 8006c88:	4402      	add	r2, r0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d100      	bne.n	8006c92 <memset+0xa>
 8006c90:	4770      	bx	lr
 8006c92:	f803 1b01 	strb.w	r1, [r3], #1
 8006c96:	e7f9      	b.n	8006c8c <memset+0x4>

08006c98 <_init>:
 8006c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9a:	bf00      	nop
 8006c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c9e:	bc08      	pop	{r3}
 8006ca0:	469e      	mov	lr, r3
 8006ca2:	4770      	bx	lr

08006ca4 <_fini>:
 8006ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca6:	bf00      	nop
 8006ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006caa:	bc08      	pop	{r3}
 8006cac:	469e      	mov	lr, r3
 8006cae:	4770      	bx	lr
